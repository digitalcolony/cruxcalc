---
// filepath: c:\_CODE\sites\cruxcalc\src\layouts\Layout.astro
import Footer from "../components/Footer.astro";

export interface Props {
	title: string;
	description?: string;
}

const { title, description = "Health and fitness calculators with engaging design." } = Astro.props;

// Get current page path to highlight active nav link
const currentPath = Astro.url.pathname;

// Check if user is on any BMR page
const isBMRPage = currentPath.includes("/bmr-");
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
	</head>
	<body>
		<header class="header">
			<div class="container">
				<nav class="nav">
					<a href="/" class="nav-logo">
						<h1>CruxCalc</h1>
					</a>
					<div class="nav-links">
						<a href="/bmi" class={`nav-link ${currentPath === "/bmi" ? "nav-link-active" : ""}`}
							>BMI</a
						>
						<div class={`nav-dropdown ${isBMRPage ? "nav-dropdown-active" : ""}`}>
							<button class="nav-dropdown-toggle">
								BMR
								<span class="dropdown-arrow">▼</span>
							</button>
							<div class="nav-dropdown-menu">
								<a
									href="/bmr-harris-benedict"
									class={`nav-dropdown-link ${currentPath === "/bmr-harris-benedict" ? "nav-dropdown-link-active" : ""}`}
								>
									Harris-Benedict
								</a>
								<a
									href="/bmr-mifflin-st-jeor"
									class={`nav-dropdown-link ${currentPath === "/bmr-mifflin-st-jeor" ? "nav-dropdown-link-active" : ""}`}
								>
									Mifflin-St Jeor
								</a>
								<a
									href="/bmr-katch-mcardle"
									class={`nav-dropdown-link ${currentPath === "/bmr-katch-mcardle" ? "nav-dropdown-link-active" : ""}`}
								>
									Katch-McArdle
								</a>
							</div>
						</div>
						<a
							href="/muscle-potential"
							class={`nav-link ${currentPath === "/muscle-potential" ? "nav-link-active" : ""}`}
							>Muscle</a
						>
						<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">🌙</button>
					</div>
				</nav>
			</div>
		</header>
		<main>
			<slot />
		</main>

		<Footer />

		<style>
			@import url("https://fonts.googleapis.com/css2?family=JetBrains+Mono:wght@400;700;800&display=swap");

			:root {
				/* Neo-brutalist color palette */
				--color-primary: #ff3366;
				--color-secondary: #00ff88;
				--color-accent: #3366ff;
				--color-success: #00cc66;
				--color-warning: #ffcc00;
				--color-danger: #ff3366;
				--color-bg: #f5f5dc;
				--color-surface: #ffffff;
				--color-text: #000000;
				--color-text-muted: #555555;
				--color-border: #000000;

				/* Bold shadows for neo-brutalist effect */
				--shadow-sm: 4px 4px 0px #000000;
				--shadow-md: 6px 6px 0px #000000;
				--shadow-lg: 8px 8px 0px #000000;
				--shadow-hover: 2px 2px 0px #000000;

				--border-radius: 0px;
				--border-width: 4px;
				--font-size-xs: 0.75rem;
				--font-size-sm: 0.875rem;
				--font-size-base: 1rem;
				--font-size-lg: 1.125rem;
				--font-size-xl: 1.25rem;
				--font-size-2xl: 1.5rem;
				--font-size-3xl: 2rem;
				--font-size-4xl: 2.5rem;
			}
			[data-theme="dark"] {
				--color-bg: #2f3349;
				--color-surface: #111111;
				--color-text: #ffffff;
				--color-text-muted: #cccccc;
				--color-border: #ffffff;
				--shadow-sm: 4px 4px 0px #ffffff;
				--shadow-md: 6px 6px 0px #ffffff;
				--shadow-lg: 8px 8px 0px #ffffff;
				--shadow-hover: 2px 2px 0px #ffffff;
			}

			* {
				box-sizing: border-box;
			}

			body {
				font-family: "JetBrains Mono", monospace;
				background-color: var(--color-bg);
				color: var(--color-text);
				margin: 0;
				padding: 0;
				line-height: 1.4;
				font-weight: 700;
				transition: all 0.2s ease;
			}

			.container {
				max-width: 1200px;
				margin: 0 auto;
				padding: 0 1rem;
			}

			.header {
				background: var(--color-surface);
				border-bottom: var(--border-width) solid var(--color-border);
				padding: 1rem 0;
				position: sticky;
				top: 0;
				z-index: 100;
			}
			.header {
				background: var(--color-surface);
				border-bottom: var(--border-width) solid var(--color-border);
				padding: 1rem 0;
				position: sticky;
				top: 0;
				z-index: 100;
			}

			.nav {
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.nav-logo h1 {
				margin: 0;
				color: var(--color-primary);
				font-weight: 800;
				font-size: 1.5rem;
			}

			.nav-logo {
				text-decoration: none;
			}

			.nav-links {
				display: flex;
				align-items: center;
				gap: 1rem;
			}
			.nav-link {
				text-decoration: none;
				color: var(--color-text);
				font-weight: 700;
				padding: 0.5rem 1rem;
				border-radius: var(--border-radius);
				transition: all 0.2s ease;
				position: relative;
			}

			.nav-link:hover {
				background: var(--color-primary);
				color: white;
				transform: translate(-1px, -1px);
				box-shadow: var(--shadow-sm);
			}

			.nav-link-active {
				background: var(--color-surface);
				border: var(--border-width) solid var(--color-primary);
				color: var(--color-primary);
				box-shadow: var(--shadow-sm);
				transform: translate(-1px, -1px);
			}
			.nav-link-active:hover {
				background: var(--color-primary);
				color: white;
			}

			/* Dropdown Styles */
			.nav-dropdown {
				position: relative;
				display: inline-block;
			}

			.nav-dropdown-toggle {
				background: none;
				border: none;
				color: var(--color-text);
				font-weight: 700;
				padding: 0.5rem 1rem;
				border-radius: var(--border-radius);
				transition: all 0.2s ease;
				cursor: pointer;
				display: flex;
				align-items: center;
				gap: 0.5rem;
			}

			.nav-dropdown-toggle:hover {
				background: var(--color-primary);
				color: white;
				transform: translate(-1px, -1px);
				box-shadow: var(--shadow-sm);
			}

			.nav-dropdown-active .nav-dropdown-toggle {
				background: var(--color-surface);
				border: var(--border-width) solid var(--color-primary);
				color: var(--color-primary);
				box-shadow: var(--shadow-sm);
				transform: translate(-1px, -1px);
			}

			.nav-dropdown-active .nav-dropdown-toggle:hover {
				background: var(--color-primary);
				color: white;
			}

			.dropdown-arrow {
				font-size: 0.8rem;
				transition: transform 0.2s ease;
			}

			.nav-dropdown.open .dropdown-arrow {
				transform: rotate(180deg);
			}

			.nav-dropdown-menu {
				position: absolute;
				top: 100%;
				left: 0;
				background: var(--color-surface);
				border: var(--border-width) solid var(--color-border);
				border-radius: var(--border-radius);
				box-shadow: var(--shadow-lg);
				opacity: 0;
				visibility: hidden;
				transform: translateY(-10px);
				transition: all 0.2s ease;
				min-width: 180px;
				z-index: 1000;
			}

			.nav-dropdown.open .nav-dropdown-menu {
				opacity: 1;
				visibility: visible;
				transform: translateY(0);
			}

			.nav-dropdown-link {
				display: block;
				text-decoration: none;
				color: var(--color-text);
				padding: 0.75rem 1rem;
				font-weight: 600;
				transition: all 0.2s ease;
				border-bottom: 2px solid var(--color-border);
			}

			.nav-dropdown-link:last-child {
				border-bottom: none;
			}

			.nav-dropdown-link:hover {
				background: var(--color-primary);
				color: white;
				transform: translate(-2px, -2px);
			}

			.nav-dropdown-link-active {
				background: var(--color-secondary);
				color: var(--color-text);
				font-weight: 700;
			}

			.nav-dropdown-link-active:hover {
				background: var(--color-primary);
				color: white;
			}
			.theme-toggle {
				background: none;
				border: none;
				padding: 0.5rem;
				cursor: pointer;
				font-size: 1.2rem;
				transition: all 0.2s ease;
				border-radius: var(--border-radius);
			}
			.theme-toggle:hover {
				background: var(--color-bg);
				transform: scale(1.1);
			}

			@media (max-width: 768px) {
				.nav {
					flex-direction: column;
					gap: 1rem;
				}

				.nav-links {
					flex-wrap: wrap;
					justify-content: center;
				}

				.nav-dropdown-menu {
					position: fixed;
					top: auto;
					left: 50%;
					transform: translateX(-50%);
					width: 90%;
					max-width: 300px;
				}

				.nav-dropdown.open .nav-dropdown-menu {
					transform: translateX(-50%) translateY(0);
				}
			}
		</style>
		<script>
			// Theme toggle functionality
			const themeToggle = document.getElementById("theme-toggle");
			const html = document.documentElement;

			// Check for saved theme or default to light
			const savedTheme = localStorage.getItem("theme") || "light";
			html.setAttribute("data-theme", savedTheme);
			if (themeToggle) {
				themeToggle.textContent = savedTheme === "dark" ? "☀️" : "🌙";

				themeToggle.addEventListener("click", () => {
					const currentTheme = html.getAttribute("data-theme");
					const newTheme = currentTheme === "dark" ? "light" : "dark";

					html.setAttribute("data-theme", newTheme);
					localStorage.setItem("theme", newTheme);
					themeToggle.textContent = newTheme === "dark" ? "☀️" : "🌙";
				});
			}

			// Dropdown functionality
			document.addEventListener("DOMContentLoaded", () => {
				const dropdown = document.querySelector(".nav-dropdown");
				const dropdownToggle = document.querySelector(".nav-dropdown-toggle");
				const dropdownMenu = document.querySelector(".nav-dropdown-menu");
				if (dropdown && dropdownToggle && dropdownMenu) {
					// Toggle dropdown on click
					dropdownToggle.addEventListener("click", (e) => {
						e.preventDefault();
						e.stopPropagation();
						dropdown.classList.toggle("open");
					});

					// Handle keyboard navigation
					dropdownToggle.addEventListener("keydown", (e) => {
						const keyEvent = e as KeyboardEvent;
						if (keyEvent.key === "Enter" || keyEvent.key === " ") {
							e.preventDefault();
							dropdown.classList.toggle("open");
						} else if (keyEvent.key === "ArrowDown") {
							e.preventDefault();
							dropdown.classList.add("open");
							const firstLink = dropdownMenu.querySelector(".nav-dropdown-link") as HTMLElement;
							if (firstLink) firstLink.focus();
						}
					});

					// Handle navigation within dropdown
					dropdownMenu.addEventListener("keydown", (e) => {
						const keyEvent = e as KeyboardEvent;
						const links = Array.from(
							dropdownMenu.querySelectorAll(".nav-dropdown-link")
						) as HTMLElement[];
						const currentIndex = links.indexOf(document.activeElement as HTMLElement);

						if (keyEvent.key === "ArrowDown") {
							e.preventDefault();
							const nextIndex = (currentIndex + 1) % links.length;
							links[nextIndex]?.focus();
						} else if (keyEvent.key === "ArrowUp") {
							e.preventDefault();
							const prevIndex = currentIndex > 0 ? currentIndex - 1 : links.length - 1;
							links[prevIndex]?.focus();
						} else if (keyEvent.key === "Escape") {
							e.preventDefault();
							dropdown.classList.remove("open");
							(dropdownToggle as HTMLElement).focus();
						}
					}); // Close dropdown when clicking outside
					document.addEventListener("click", (e) => {
						if (!dropdown.contains(e.target as Node)) {
							dropdown.classList.remove("open");
						}
					});

					// Close dropdown when pressing Escape
					document.addEventListener("keydown", (e) => {
						if (e.key === "Escape") {
							dropdown.classList.remove("open");
						}
					});

					// Prevent dropdown from closing when clicking inside the menu
					dropdownMenu.addEventListener("click", (e) => {
						e.stopPropagation();
					});
				}
			});
		</script>
	</body>
</html>
