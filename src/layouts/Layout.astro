---
// filepath: c:\_CODE\sites\cruxcalc\src\layouts\Layout.astro
export interface Props {
	title: string;
	description?: string;
}

const { title, description = "Modern health and fitness calculators with engaging design." } =
	Astro.props;
---

<!doctype html>
<html lang="en">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content={description} />
		<meta name="viewport" content="width=device-width, initial-scale=1.0" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<title>{title}</title>
		<link rel="stylesheet" href="/src/styles/global.css" />
	</head>
	<body>
		<header class="header">
			<div class="container">
				<nav class="nav">
					<a href="/" class="nav-logo">
						<h1>CruxCalc</h1>
					</a>
					<div class="nav-links">
						<a href="/bmi" class="nav-link">BMI</a>
						<a href="/bmr-harris-benedict" class="nav-link">BMR</a>
						<a href="/muscle-potential" class="nav-link">Muscle</a>
						<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">üåô</button>
					</div>
				</nav>
			</div>
		</header>

		<main>
			<slot />
		</main>

		<footer class="footer">
			<div class="container">
				<p>
					<strong>Medical Disclaimer:</strong> These calculators are for educational purposes only and
					should not replace professional medical advice.
				</p>
			</div>
		</footer>

		<style>
			.header {
				background: var(--color-surface);
				border-bottom: var(--border-width) solid var(--color-border);
				padding: 1rem 0;
				position: sticky;
				top: 0;
				z-index: 100;
			}

			.nav {
				display: flex;
				justify-content: space-between;
				align-items: center;
			}

			.nav-logo h1 {
				margin: 0;
				color: var(--color-primary);
				font-weight: 800;
				font-size: 1.5rem;
			}

			.nav-logo {
				text-decoration: none;
			}

			.nav-links {
				display: flex;
				align-items: center;
				gap: 1rem;
			}

			.nav-link {
				text-decoration: none;
				color: var(--color-text);
				font-weight: 700;
				padding: 0.5rem 1rem;
				border-radius: var(--border-radius);
				transition: all 0.2s ease;
			}

			.nav-link:hover {
				background: var(--color-primary);
				color: white;
			}

			.theme-toggle {
				background: none;
				border: var(--border-width) solid var(--color-border);
				border-radius: var(--border-radius);
				padding: 0.5rem;
				cursor: pointer;
				font-size: 1rem;
				transition: all 0.2s ease;
			}

			.theme-toggle:hover {
				border-color: var(--color-primary);
			}

			.footer {
				background: var(--color-surface);
				border-top: var(--border-width) solid var(--color-border);
				padding: 2rem 0;
				margin-top: 4rem;
				text-align: center;
				font-size: 0.875rem;
				color: var(--color-text-muted);
			}

			@media (max-width: 768px) {
				.nav {
					flex-direction: column;
					gap: 1rem;
				}

				.nav-links {
					flex-wrap: wrap;
					justify-content: center;
				}
			}
		</style>

		<script>
			// Theme toggle functionality
			const themeToggle = document.getElementById("theme-toggle");
			const html = document.documentElement;

			// Check for saved theme or default to light
			const savedTheme = localStorage.getItem("theme") || "light";
			html.setAttribute("data-theme", savedTheme);
			if (themeToggle) {
				themeToggle.textContent = savedTheme === "dark" ? "‚òÄÔ∏è" : "üåô";

				themeToggle.addEventListener("click", () => {
					const currentTheme = html.getAttribute("data-theme");
					const newTheme = currentTheme === "dark" ? "light" : "dark";

					html.setAttribute("data-theme", newTheme);
					localStorage.setItem("theme", newTheme);
					themeToggle.textContent = newTheme === "dark" ? "‚òÄÔ∏è" : "üåô";
				});
			}
		</script>
	</body>
</html>
