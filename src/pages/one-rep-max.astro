---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";

// Initialize SharedValues on the server side
const sharedValues = {
	weightUnit: "imperial",
};
---

<Layout
	title="One Rep Max Calculator - Potato Hack Fitness Calculators"
	description="Calculate your one-repetition maximum using Epley, Brzycki, and Lombardi formulas. Estimate your max lift from submaximal weights and reps."
>
	<CalculatorLayout
		title="One Rep Max Calculator"
		description="Estimate your maximum lift using three proven formulas from submaximal weights and repetitions"
	>
		<div slot="inputs">
			<InputGroup label="Weight Lifted" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "lbs" },
						{ value: "metric", label: "kg" },
					]}
					activeValue={sharedValues.weightUnit}
					dataAttribute="unit"
				/>
			</InputGroup>

			<div class="weight-inputs imperial-weight" data-unit-group="imperial">
				<InputGroup label="Weight" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="weight"
						label=""
						min={50}
						max={500}
						value={135}
						unit="lbs"
						sharedKey="weightLbs"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-weight" data-unit-group="metric" style="display: none;">
				<InputGroup label="Weight" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="weight-kg"
						label=""
						min={23}
						max={227}
						value={61}
						unit="kg"
						sharedKey="weightKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Repetitions Performed"
				helpText="Enter the number of reps completed with good form"
			>
				<PrecisionRangeSlider
					id="reps"
					label=""
					min={1}
					max={10}
					value={5}
					unit="reps"
					sharedKey="repetitions"
				/>
			</InputGroup>
		</div>

		<div slot="results">
			<div class="results-grid">
				<ResultCard title="Epley Formula" variant="primary">
					<ResultValue id="epley-result" value={169} unit="lbs" size="xl" color="primary" />
					<p slot="description" class="result-description">Most commonly used formula</p>
				</ResultCard>

				<ResultCard title="Brzycki Formula" variant="success">
					<ResultValue id="brzycki-result" value={169} unit="lbs" size="xl" color="success" />
					<p slot="description" class="result-description">Conservative research-backed estimate</p>
				</ResultCard>

				<ResultCard title="Lombardi Formula" variant="warning">
					<ResultValue id="lombardi-result" value={169} unit="lbs" size="xl" color="warning" />
					<p slot="description" class="result-description">Logarithmic approach</p>
				</ResultCard>
			</div>

			<div class="formula-details">
				<h3>Formula Information</h3>
				<div class="formula-grid">
					<div class="formula-item">
						<h4>Epley</h4>
						<code>1RM = w × (1 + r/30)</code>
						<p>
							Developed by Boyd Epley (1985). Tends to slightly overestimate for low rep ranges but
							is widely used in strength training.
						</p>
					</div>
					<div class="formula-item">
						<h4>Brzycki</h4>
						<code>1RM = w × 36/(37 - r)</code>
						<p>
							Created by Matt Brzycki (1998). More conservative estimate, extensively validated in
							research studies.
						</p>
					</div>
					<div class="formula-item">
						<h4>Lombardi</h4>
						<code>1RM = w × r^0.10</code>
						<p>
							Uses logarithmic progression. Works well for moderate rep ranges (3-8 reps) and
							different muscle groups.
						</p>
					</div>
				</div>
				<div class="formula-note">
					<p>
						<strong>Note:</strong> All formulas converge around 10 reps but diverge significantly below
						5 reps. For best accuracy, use weights you can lift for 3-6 repetitions.
					</p>
				</div>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	/* Component-specific styles */
	.weight-inputs {
		display: block;
		margin-bottom: 1rem;
	}

	/* Full width styling */
	.full-width {
		width: 100%;
	}

	.calculator-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.calculator-header h1 {
		color: var(--color-primary);
		margin-bottom: 0.5rem;
		font-size: 2.5rem;
		font-weight: 700;
	}

	.calculator-header p {
		color: var(--color-text-muted);
		font-size: 1.125rem;
	}

	.calculator-layout {
		display: grid;
		grid-template-columns: 1fr 1.5fr;
		gap: 3rem;
		max-width: 1400px;
		margin: 0 auto;
	}

	.calculator-inputs {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		height: fit-content;
		box-shadow: var(--shadow-md);
	}

	.input-group {
		margin-bottom: 2rem;
		display: block;
	}

	.input-group:last-child {
		margin-bottom: 0;
	}

	.input-group label {
		display: block;
		font-weight: 600;
		font-size: 1rem;
		color: var(--color-text);
		margin-bottom: 0.75rem;
	}

	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		font-family: inherit;
		font-weight: 600;
		padding: 0.5rem 1rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.1s ease;
		font-size: 0.875rem;
		box-shadow: var(--shadow-sm);
	}

	.unit-btn:hover {
		transform: translate(-1px, -1px);
		box-shadow: var(--shadow-md);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
	}

	.input-container {
		position: relative;
		margin-bottom: 1rem;
		width: 100%;
	}

	.input-container:last-child {
		margin-bottom: 0;
	}

	.input-display {
		text-align: center;
		font-weight: 600;
		color: var(--color-primary);
		margin-top: 0.5rem;
		font-size: 1.125rem;
	}

	input[type="range"] {
		width: 100%;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
	}

	input[type="range"]::-webkit-slider-thumb {
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	input[type="range"]::-moz-range-thumb {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		border: none;
		box-shadow: var(--shadow-sm);
	}

	.weight-inputs {
		width: 100%;
	}

	.weight-inputs.metric {
		display: none;
	}

	.calculator-results {
		display: flex;
		flex-direction: column;
		gap: 1rem;
	}

	.results-grid {
		display: grid;
		grid-template-columns: 1fr;
		gap: 1rem;
	}

	.result-card {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		text-align: center;
		box-shadow: var(--shadow-md);
		transition: all 0.1s ease;
	}

	.result-card:hover {
		transform: translate(-2px, -2px);
		box-shadow: var(--shadow-lg);
	}

	.result-card h3 {
		margin: 0 0 0.75rem 0;
		color: var(--color-text);
		font-size: 1.125rem;
	}

	.result-value {
		font-size: 2.5rem;
		font-weight: 800;
		color: var(--color-primary);
		margin-bottom: 0.25rem;
		line-height: 1;
	}

	.result-unit {
		font-size: 1.25rem;
		color: var(--color-text-muted);
		margin-left: 0.5rem;
	}

	.result-description {
		color: var(--color-text-muted);
		font-size: 0.875rem;
		margin: 0;
	}

	.formula-details {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.formula-details h3 {
		margin: 0 0 1.5rem 0;
		color: var(--color-text);
		text-align: center;
		font-size: 1.25rem;
	}

	.formula-grid {
		display: grid;
		grid-template-columns: 1fr;
		gap: 1.5rem;
		margin-bottom: 1.5rem;
	}

	.formula-item {
		padding: 1rem;
		background: var(--color-bg);
		border: 2px solid var(--color-border);
		border-radius: var(--border-radius);
	}

	.formula-item h4 {
		margin: 0 0 0.5rem 0;
		color: var(--color-primary);
		font-size: 1rem;
		font-weight: 700;
	}

	.formula-item code {
		display: block;
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: 4px;
		padding: 0.5rem;
		margin: 0.5rem 0;
		font-family: "Courier New", monospace;
		font-size: 0.875rem;
		color: var(--color-text);
	}

	.formula-item p {
		margin: 0.5rem 0 0 0;
		font-size: 0.875rem;
		color: var(--color-text-muted);
		line-height: 1.4;
	}

	.formula-note {
		background: var(--color-bg);
		border: 2px solid var(--color-primary);
		border-radius: var(--border-radius);
		padding: 1rem;
	}

	.formula-note p {
		margin: 0;
		font-size: 0.875rem;
		color: var(--color-text);
		line-height: 1.5;
	}

	.info-sections {
		margin-top: 2rem;
		display: flex;
		flex-direction: column;
		gap: 2rem;
	}

	.info-section {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		box-shadow: var(--shadow-sm);
	}

	.info-section h3 {
		margin: 0 0 1rem 0;
		color: var(--color-primary);
		font-weight: 700;
		font-size: 1rem;
	}

	.info-section p {
		color: var(--color-text-muted);
		line-height: 1.6;
		margin: 0;
		font-size: 0.875rem;
	}

	.info-section ul {
		color: var(--color-text-muted);
		line-height: 1.6;
		margin: 0;
		padding-left: 1.5rem;
		font-size: 0.875rem;
	}

	.info-section li {
		margin-bottom: 0.5rem;
	}

	.info-section strong {
		color: var(--color-text);
	}

	/* Color coding for different formulas */
	.epley-card {
		border-left: 6px solid #00ff88;
	}

	.brzycki-card {
		border-left: 6px solid #33ccff;
	}

	.lombardi-card {
		border-left: 6px solid #ffcc00;
	}

	/* Mobile Responsiveness */
	@media (max-width: 1024px) {
		.calculator-layout {
			grid-template-columns: 1fr;
			gap: 2rem;
		}
	}

	@media (max-width: 768px) {
		.calculator-page {
			padding: 1rem 0 2rem;
		}

		.calculator-header {
			margin-bottom: 2rem;
			padding: 0 1rem;
		}

		.calculator-header h1 {
			font-size: 2rem;
		}

		.calculator-layout {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.result-value {
			font-size: 2rem;
		}

		.unit-toggle {
			justify-content: center;
		}

		.mobile-hide {
			display: none;
		}

		.formula-grid {
			gap: 1rem;
		}
	}

	@media (max-width: 480px) {
		.calculator-inputs,
		.formula-details {
			padding: 1rem;
			border-left: none;
			border-right: none;
			border-radius: 0;
		}

		.result-card {
			padding: 1rem;
			border-left: none;
			border-right: none;
			border-radius: 0;
		}

		.calculator-page {
			padding: 1rem 0;
		}

		.calculator-header {
			padding: 0 0.5rem;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// @ts-nocheck - Disable TypeScript checking for this Astro component
	// One Rep Max Calculator with ReactiveSharedValues integration

	class OneRepMaxCalculator {
		private reactiveSharedValues: any;

		constructor() {
			// Initialize ReactiveSharedValues system
			if ((window as any).ReactiveSharedValues) {
				this.reactiveSharedValues = new (window as any).ReactiveSharedValues();
			}

			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Initialize default values if not already set
			if (!this.reactiveSharedValues.get("weightLbs")) {
				this.reactiveSharedValues.set("weightLbs", 135);
			}
			if (!this.reactiveSharedValues.get("weightKg")) {
				this.reactiveSharedValues.set("weightKg", 61);
			}
			if (!this.reactiveSharedValues.get("repetitions")) {
				this.reactiveSharedValues.set("repetitions", 5);
			}

			// Initialize unit from saved data or default
			const savedUnit = this.reactiveSharedValues.get("weightUnit") || "imperial";
			this.toggleWeightUnit(savedUnit);

			// Initial calculation
			this.calculate();
		}

		private setupEventListeners(): void {
			// Listen for precision-range-change events with bidirectional sync
			document.addEventListener("precision-range-change", (event) => {
				const customEvent = event as CustomEvent;
				const { sharedKey, value } = customEvent.detail;

				console.log(`=== RANGE CHANGE DEBUG ===`);
				console.log(`Precision range change: ${sharedKey} = ${value}`);

				// Update ReactiveSharedValues for persistence
				this.reactiveSharedValues.set(sharedKey, value);

				// Bidirectional weight unit synchronization
				if (sharedKey === "weightLbs") {
					const lbsValue = parseFloat(value);
					const kg = Math.round(lbsValue * 0.453592 * 10) / 10; // Round to 1 decimal place
					console.log(
						`Converting ${lbsValue} lbs to ${kg} kg (formula: ${lbsValue} * 0.453592 = ${lbsValue * 0.453592})`
					);
					this.reactiveSharedValues.set("weightKg", kg);
					console.log(`After weight conversion - SharedValues:`, {
						weightLbs: this.reactiveSharedValues.get("weightLbs"),
						weightKg: this.reactiveSharedValues.get("weightKg"),
					});
				} else if (sharedKey === "weightKg") {
					const kgValue = parseFloat(value);
					const lbs = Math.round(kgValue / 0.453592);
					console.log(`Converting ${kgValue} kg to ${lbs} lbs`);
					this.reactiveSharedValues.set("weightLbs", lbs);
				}

				// Recalculate results
				this.calculate();
			});

			// Unit toggle functionality
			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				if (customEvent.detail.attribute === "unit") {
					console.log("=== UNIT TOGGLE DEBUG START ===");
					console.log("Unit toggle change detected:", customEvent.detail.value);

					// Log current state before sync
					console.log("BEFORE sync - Current SharedValues state:", {
						weightLbs: this.reactiveSharedValues.get("weightLbs"),
						weightKg: this.reactiveSharedValues.get("weightKg"),
						weightUnit: this.reactiveSharedValues.get("weightUnit"),
					});

					// First set the unit preference
					this.reactiveSharedValues.set("weightUnit", customEvent.detail.value);

					// Use ReactiveSharedValues sync method for proper conversion
					console.log("Calling syncWeightUnits with:", customEvent.detail.value);
					if (customEvent.detail.value === "metric") {
						this.reactiveSharedValues.syncWeightUnits("metric");
					} else {
						this.reactiveSharedValues.syncWeightUnits("imperial");
					}

					// Log current state after sync
					console.log("AFTER sync - Current SharedValues state:", {
						weightLbs: this.reactiveSharedValues.get("weightLbs"),
						weightKg: this.reactiveSharedValues.get("weightKg"),
						weightUnit: this.reactiveSharedValues.get("weightUnit"),
					});

					// Toggle the display
					this.toggleWeightUnit(customEvent.detail.value);

					// After sync, update the visible sliders to show converted values
					this.updateVisibleSliders();
					console.log("=== UNIT TOGGLE DEBUG END ===");
				}
				this.calculate();
			});
		}

		private toggleWeightUnit(unit: string): void {
			const imperialGroup = document.querySelector(".imperial-weight") as HTMLElement;
			const metricGroup = document.querySelector(".metric-weight") as HTMLElement;

			console.log(`Converting weight units to: ${unit}`);

			if (imperialGroup && metricGroup) {
				if (unit === "imperial") {
					imperialGroup.style.display = "block";
					metricGroup.style.display = "none";
				} else {
					imperialGroup.style.display = "none";
					metricGroup.style.display = "block";
				}
				// ReactiveSharedValues sync methods handle the actual conversion
				// No need to force reload sliders - they will update automatically via precision-range-change events
			}
		}

		private updateVisibleSliders(): void {
			const currentUnit = this.reactiveSharedValues.get("weightUnit") || "imperial";

			console.log(`=== UPDATE VISIBLE SLIDERS DEBUG ===`);
			console.log(`Current unit: ${currentUnit}`);
			console.log("Current SharedValues in updateVisibleSliders:", {
				weightLbs: this.reactiveSharedValues.get("weightLbs"),
				weightKg: this.reactiveSharedValues.get("weightKg"),
				weightUnit: this.reactiveSharedValues.get("weightUnit"),
			});

			if (currentUnit === "imperial") {
				// Update imperial slider with current SharedValues
				const imperialSlider = document.querySelector(
					".imperial-weight .precision-range-input"
				) as HTMLInputElement;
				const imperialNumberInput = document.querySelector(
					".imperial-weight .precision-number-input"
				) as HTMLInputElement;
				const imperialDisplay = document.querySelector(
					".imperial-weight #weight-display"
				) as HTMLElement;

				if (imperialSlider) {
					const weightLbs = this.reactiveSharedValues.get("weightLbs") || 135;
					console.log(`Updating imperial slider to: ${weightLbs} lbs`);

					imperialSlider.value = weightLbs.toString();
					if (imperialNumberInput) {
						imperialNumberInput.value = weightLbs.toString();
					}
					if (imperialDisplay) {
						imperialDisplay.textContent = weightLbs.toString();
					}

					// Trigger display update
					imperialSlider.dispatchEvent(new Event("input", { bubbles: true }));
				} else {
					console.log("Imperial slider not found!");
				}
			} else {
				// Update metric slider with current SharedValues
				const metricSlider = document.querySelector(
					".metric-weight .precision-range-input"
				) as HTMLInputElement;
				const metricNumberInput = document.querySelector(
					".metric-weight .precision-number-input"
				) as HTMLInputElement;
				const metricDisplay = document.querySelector(
					".metric-weight #weight-kg-display"
				) as HTMLElement;

				console.log("Metric slider element:", metricSlider);
				console.log("Metric number input element:", metricNumberInput);
				console.log("Metric display element:", metricDisplay);

				if (metricSlider) {
					const weightKg = this.reactiveSharedValues.get("weightKg") || 73;
					console.log(`Updating metric slider to: ${weightKg} kg`);

					metricSlider.value = weightKg.toString();
					if (metricNumberInput) {
						metricNumberInput.value = weightKg.toString();
					}
					if (metricDisplay) {
						metricDisplay.textContent = weightKg.toString();
					}

					// Trigger display update
					metricSlider.dispatchEvent(new Event("input", { bubbles: true }));
				} else {
					console.log("Metric slider not found!");
				}
			}
			console.log(`=== UPDATE VISIBLE SLIDERS DEBUG END ===`);
		}

		// 1RM calculation formulas
		private calculateEpley(weight: number, reps: number): number {
			if (reps === 1) return weight;
			return weight * (1 + reps / 30);
		}

		private calculateBrzycki(weight: number, reps: number): number {
			if (reps === 1) return weight;
			return (weight * 36) / (37 - reps);
		}

		private calculateLombardi(weight: number, reps: number): number {
			if (reps === 1) return weight;
			return weight * Math.pow(reps, 0.1);
		}

		private calculate(): void {
			try {
				// Get current values from ReactiveSharedValues
				const currentUnit = this.reactiveSharedValues.get("weightUnit") || "imperial";
				const reps = this.reactiveSharedValues.get("repetitions") || 5;

				// Get weight in pounds for calculations
				let weightLbs: number;
				if (currentUnit === "imperial") {
					weightLbs = this.reactiveSharedValues.get("weightLbs") || 135;
				} else {
					const weightKg = this.reactiveSharedValues.get("weightKg") || 61;
					weightLbs = weightKg / 0.453592; // Convert kg to lbs for calculation
				}

				// Calculate 1RM using all three formulas
				const epleyValue = this.calculateEpley(weightLbs, reps);
				const brzyckiValue = this.calculateBrzycki(weightLbs, reps);
				const lombardiValue = this.calculateLombardi(weightLbs, reps);

				// Update results display
				this.updateResults(epleyValue, brzyckiValue, lombardiValue, currentUnit);
			} catch (error) {
				console.error("Calculation error:", error);
			}
		}

		private updateResults(epley: number, brzycki: number, lombardi: number, unit: string): void {
			// Get result elements
			const epleyResult = document.querySelector("#epley-result .result-value__number");
			const brzyckiResult = document.querySelector("#brzycki-result .result-value__number");
			const lombardiResult = document.querySelector("#lombardi-result .result-value__number");
			const epleyUnit = document.querySelector("#epley-result .result-value__unit");
			const brzyckiUnit = document.querySelector("#brzycki-result .result-value__unit");
			const lombardiUnit = document.querySelector("#lombardi-result .result-value__unit");

			// Convert and display results based on current unit
			if (unit === "metric") {
				if (epleyResult) epleyResult.textContent = Math.round(epley * 0.453592).toString();
				if (brzyckiResult) brzyckiResult.textContent = Math.round(brzycki * 0.453592).toString();
				if (lombardiResult) lombardiResult.textContent = Math.round(lombardi * 0.453592).toString();
				if (epleyUnit) epleyUnit.textContent = "kg";
				if (brzyckiUnit) brzyckiUnit.textContent = "kg";
				if (lombardiUnit) lombardiUnit.textContent = "kg";
			} else {
				if (epleyResult) epleyResult.textContent = Math.round(epley).toString();
				if (brzyckiResult) brzyckiResult.textContent = Math.round(brzycki).toString();
				if (lombardiResult) lombardiResult.textContent = Math.round(lombardi).toString();
				if (epleyUnit) epleyUnit.textContent = "lbs";
				if (brzyckiUnit) brzyckiUnit.textContent = "lbs";
				if (lombardiUnit) lombardiUnit.textContent = "lbs";
			}
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		new OneRepMaxCalculator();
	});
</script>
