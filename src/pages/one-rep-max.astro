---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import GlobalUnitToggle from "../components/GlobalUnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
---

<Layout
	title="One Rep Max Calculator - Potato Hack Fitness Calculators"
	description="Calculate your one-repetition maximum using Epley, Brzycki, and Lombardi formulas. Estimate your max lift from submaximal weights and reps."
>
	<CalculatorLayout
		title="One Rep Max Calculator"
		description="Estimate your maximum lift using three proven formulas from submaximal weights and repetitions"
	>
		<div slot="inputs">
			<InputGroup label="Units" helpText="Switch between imperial and metric">
				<GlobalUnitToggle />
			</InputGroup>
			<div class="weight-inputs imperial-weight" data-unit-group="imperial">
				<InputGroup label="Weight" class="full-width">
					<PrecisionRangeSlider
						id="weight"
						min={50}
						max={500}
						value={135}
						unit="lbs"
						sharedKey="weightLbs"
					/>
				</InputGroup>
			</div>
			<div class="weight-inputs metric-weight" data-unit-group="metric" style="display:none;">
				<InputGroup label="Weight" class="full-width">
					<PrecisionRangeSlider
						id="weight-kg"
						min={23}
						max={227}
						value={61}
						unit="kg"
						sharedKey="weightKg"
					/>
				</InputGroup>
			</div>
			<InputGroup
				label="Repetitions Performed"
				helpText="Enter the number of reps completed with good form"
			>
				<PrecisionRangeSlider
					id="reps"
					min={1}
					max={10}
					value={5}
					unit="reps"
					sharedKey="repetitions"
				/>
			</InputGroup>
		</div>
		<div slot="results">
			<div class="results-grid">
				<ResultCard title="Epley Formula" variant="primary">
					<ResultValue id="epley-result" value={169} unit="lbs" size="xl" color="primary" />
					<p slot="description" class="result-description">Most commonly used formula</p>
				</ResultCard>
				<ResultCard title="Brzycki Formula" variant="success">
					<ResultValue id="brzycki-result" value={169} unit="lbs" size="xl" color="success" />
					<p slot="description" class="result-description">Conservative research-backed estimate</p>
				</ResultCard>
				<ResultCard title="Lombardi Formula" variant="warning">
					<ResultValue id="lombardi-result" value={169} unit="lbs" size="xl" color="warning" />
					<p slot="description" class="result-description">Logarithmic approach</p>
				</ResultCard>
			</div>
			<div class="formula-details">
				<h3>Formula Information</h3>
				<div class="formula-grid">
					<div class="formula-item">
						<h4>Epley</h4>
						<code>1RM = w × (1 + r/30)</code>
						<p>
							Developed by Boyd Epley (1985). Tends to slightly overestimate for low rep ranges but
							is widely used in strength training.
						</p>
					</div>
					<div class="formula-item">
						<h4>Brzycki</h4>
						<code>1RM = w × 36/(37 - r)</code>
						<p>
							Created by Matt Brzycki (1998). More conservative estimate, extensively validated in
							research studies.
						</p>
					</div>
					<div class="formula-item">
						<h4>Lombardi</h4>
						<code>1RM = w × r^0.10</code>
						<p>
							Uses logarithmic progression. Works well for moderate rep ranges (3-8 reps) and
							different muscle groups.
						</p>
					</div>
				</div>
				<div class="formula-note">
					<p>
						<strong>Note:</strong> All formulas converge around 10 reps but diverge significantly below
						5 reps. For best accuracy, use weights you can lift for 3-6 repetitions.
					</p>
				</div>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	.weight-inputs {
		margin-bottom: 1rem;
	}
	.full-width {
		width: 100%;
	}
	.results-grid {
		display: grid;
		gap: 1rem;
	}
	.result-description {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin: 0;
	}
	.formula-details {
		margin-top: 1.5rem;
	}
	.formula-grid {
		display: grid;
		gap: 1rem;
	}
	.formula-item code {
		display: block;
		margin: 0.5rem 0;
	}
	@media (max-width: 768px) {
		.results-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// @ts-nocheck
	(function () {
		class OneRepMaxCalculator {
			constructor() {
				this.shared = new window.ReactiveSharedValues();
				this.ensureDefaults();
				this.bindEvents();
				this.syncVisibility();
				this.calculate();
			}
			ensureDefaults() {
				if (this.shared.get("unitSystem") == null) this.shared.set("unitSystem", "imperial");
				if (this.shared.get("weightLbs") == null) this.shared.set("weightLbs", 135);
				if (this.shared.get("weightKg") == null) this.shared.set("weightKg", 61);
				if (this.shared.get("repetitions") == null) this.shared.set("repetitions", 5);
			}
			bindEvents() {
				document.addEventListener("precision-range-change", (e) => {
					const { sharedKey, value } = e.detail || {};
					if (!sharedKey) return;
					this.shared.set(sharedKey, value);
					if (sharedKey === "weightLbs") {
						const lbs = parseFloat(value);
						this.shared.set("weightKg", Math.round(lbs * 0.453592 * 10) / 10);
					} else if (sharedKey === "weightKg") {
						const kg = parseFloat(value);
						this.shared.set("weightLbs", Math.round(kg / 0.453592));
					}
					this.calculate();
				});
				window.addEventListener("unit-system-change", () => {
					this.syncVisibility();
					// Refresh sliders from shared values so visible input reflects the converted counterpart
					document.querySelectorAll(".precision-range-wrapper").forEach((w) => {
						w.dispatchEvent(new CustomEvent("refresh-from-shared-values", { bubbles: true }));
					});
					this.calculate();
				});
			}
			syncVisibility() {
				const sys = this.shared.get("unitSystem") || "imperial";
				const imp = document.querySelector(".imperial-weight");
				const met = document.querySelector(".metric-weight");
				if (!imp || !met) return;
				imp.style.display = sys === "imperial" ? "block" : "none";
				met.style.display = sys === "metric" ? "block" : "none";
			}
			epley(w, r) {
				return r === 1 ? w : w * (1 + r / 30);
			}
			brzycki(w, r) {
				return r === 1 ? w : (w * 36) / (37 - r);
			}
			lombardi(w, r) {
				return r === 1 ? w : w * Math.pow(r, 0.1);
			}
			calculate() {
				const sys = this.shared.get("unitSystem") || "imperial";
				const reps = parseFloat(this.shared.get("repetitions")) || 5;
				const wLbs =
					sys === "imperial"
						? parseFloat(this.shared.get("weightLbs")) || 135
						: (parseFloat(this.shared.get("weightKg")) || 61) / 0.453592;
				const e = this.epley(wLbs, reps);
				const b = this.brzycki(wLbs, reps);
				const l = this.lombardi(wLbs, reps);
				this.render(e, b, l, sys);
			}
			render(e, b, l, sys) {
				const toKg = (v) => Math.round(v * 0.453592);
				function setVal(id, val) {
					const el = document.querySelector(`#${id} .result-value__number`);
					if (el) el.textContent = val;
				}
				function setUnit(id, u) {
					const el = document.querySelector(`#${id} .result-value__unit`);
					if (el) el.textContent = u;
				}
				if (sys === "metric") {
					setVal("epley-result", toKg(e));
					setVal("brzycki-result", toKg(b));
					setVal("lombardi-result", toKg(l));
					["epley", "brzycki", "lombardi"].forEach((f) => setUnit(`${f}-result`, "kg"));
				} else {
					setVal("epley-result", Math.round(e));
					setVal("brzycki-result", Math.round(b));
					setVal("lombardi-result", Math.round(l));
					["epley", "brzycki", "lombardi"].forEach((f) => setUnit(`${f}-result`, "lbs"));
				}
			}
		}
		document.addEventListener("DOMContentLoaded", () => new OneRepMaxCalculator());
	})();
</script>
