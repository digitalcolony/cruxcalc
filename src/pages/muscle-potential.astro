---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
---

<Layout
	title="Muscle Potential Calculator - Potato Hack Fitness Calculators"
	description="Calculate your maximum natural muscle potential using Casey Butt's scientifically-derived formula based on bone structure measurements (wrist, ankle, height). Get accurate muscle mass predictions."
	image="/og-muscle.png"
	imageAlt="Muscle Potential Calculator - Casey Butt's Formula for Maximum Natural Muscle Growth"
	canonical="/muscle-potential"
>
	<CalculatorLayout
		title="Muscle Potential Calculator"
		description="Estimate your maximum muscular potential using Casey Butt's formulas based on bone structure"
	>
		<div slot="inputs">
			<InputGroup label="Height" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "ft/in" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="height-unit"
				/>
			</InputGroup>

			<div class="height-inputs imperial-height" data-unit-group="imperial">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-total-inches"
						label=""
						min={48}
						max={84}
						step={0.5}
						value={68}
						unit=""
						sharedKey="heightTotalInches"
						formatAsHeight={true}
					/>
				</InputGroup>
			</div>

			<div class="height-inputs metric-height" data-unit-group="metric" style="display: none;">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-cm"
						label=""
						min={120}
						max={220}
						value={173}
						unit="cm"
						sharedKey="heightCm"
					/>
				</InputGroup>
			</div>

			<InputGroup label="Wrist Circumference" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "inches" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="wrist-unit"
				/>
			</InputGroup>

			<div class="wrist-inputs imperial-wrist" data-unit-group="imperial">
				<InputGroup
					label=""
					helpText="Measure around the smallest part, just below the wrist bone"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="wrist-inches"
						label=""
						min={5.5}
						max={9}
						step={0.1}
						value={7}
						unit="inches"
						sharedKey="wristInches"
					/>
				</InputGroup>
			</div>

			<div class="wrist-inputs metric-wrist" data-unit-group="metric" style="display: none;">
				<InputGroup
					label=""
					helpText="Measure around the smallest part, just below the wrist bone"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="wrist-cm"
						label=""
						min={14}
						max={23}
						step={0.1}
						value={17.8}
						unit="cm"
						sharedKey="wristCm"
					/>
				</InputGroup>
			</div>

			<InputGroup label="Ankle Circumference" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "inches" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="ankle-unit"
				/>
			</InputGroup>

			<div class="ankle-inputs imperial-ankle" data-unit-group="imperial">
				<InputGroup
					label=""
					helpText="Measure around the smallest part, just above the ankle bone"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="ankle-inches"
						label=""
						min={7}
						max={11}
						step={0.1}
						value={8.5}
						unit="inches"
						sharedKey="ankleInches"
					/>
				</InputGroup>
			</div>

			<div class="ankle-inputs metric-ankle" data-unit-group="metric" style="display: none;">
				<InputGroup
					label=""
					helpText="Measure around the smallest part, just above the ankle bone"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="ankle-cm"
						label=""
						min={18}
						max={28}
						step={0.1}
						value={21.6}
						unit="cm"
						sharedKey="ankleCm"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Target Body Fat %"
				helpText="Your target body fat percentage for maximum muscle potential calculations"
			>
				<PrecisionRangeSlider
					id="body-fat"
					label=""
					min={5}
					max={20}
					step={0.5}
					value={10}
					unit="%"
					sharedKey="bodyFat"
				/>
			</InputGroup>
		</div>

		<div slot="results">
			<div class="main-results">
				<ResultCard title="Maximum Lean Body Mass" variant="primary">
					<ResultValue id="max-lean-number" value={167} unit="lbs" size="xl" color="primary" />
					<p slot="description" class="result-description">
						Muscle + organs + bones (fat-free mass)
					</p>
				</ResultCard>

				<ResultCard title="Maximum Body Weight" variant="success">
					<ResultValue id="max-weight-number" value={185} unit="lbs" size="xl" color="success" />
					<p slot="description" class="result-description">
						At <span id="target-bf-text">10</span>% body fat
					</p>
				</ResultCard>
			</div>

			<div class="body-parts-results">
				<h3>Maximum Measurements</h3>
				<div class="measurements-grid">
					<div class="measurement-item">
						<strong>Arms</strong>
						<span id="max-arms">16.2 inches</span>
					</div>
					<div class="measurement-item">
						<strong>Forearms</strong>
						<span id="max-forearms">13.1 inches</span>
					</div>
					<div class="measurement-item">
						<strong>Neck</strong>
						<span id="max-neck">15.7 inches</span>
					</div>
					<div class="measurement-item">
						<strong>Chest</strong>
						<span id="max-chest">44.2 inches</span>
					</div>
					<div class="measurement-item">
						<strong>Thighs</strong>
						<span id="max-thighs">24.1 inches</span>
					</div>
					<div class="measurement-item">
						<strong>Calves</strong>
						<span id="max-calves">15.2 inches</span>
					</div>
				</div>
			</div>

			<div class="formula-info">
				<h4>Casey Butt's Formula</h4>
				<p id="formula-text">LBM = H^1.5 × (√W/22.667 + √A/17.01) × (F/224 + 1)</p>
				<p class="formula-note">
					Casey Butt's scientifically-derived formula calculates maximum natural lean body mass
					based on bone structure (wrist/ankle) and height. The formula was developed from
					measurements of elite natural bodybuilders at their competitive peak. LBM = Lean Body
					Mass, which excludes body fat. Total weight is calculated by dividing LBM by (1 - body fat
					%).
				</p>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	.main-results {
		display: flex;
		gap: 1.5rem;
		margin-bottom: 2rem;
	}

	.body-parts-results {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		margin-bottom: 2rem;
	}

	.body-parts-results h3 {
		margin: 0 0 1.5rem 0;
		color: var(--color-text);
		font-size: 1.25rem;
		font-weight: 600;
		text-align: center;
	}

	.measurements-grid {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
	}

	.measurement-item {
		display: flex;
		justify-content: space-between;
		align-items: center;
		padding: 0.75rem;
		background: var(--color-background);
		border-radius: var(--border-radius);
		border: var(--border-width) solid var(--color-border);
	}

	.measurement-item strong {
		color: var(--color-text);
		font-weight: 600;
	}

	.measurement-item span {
		color: var(--color-primary);
		font-weight: 500;
	}

	.formula-info {
		background: var(--color-background);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 1.5rem;
	}

	.formula-info h4 {
		margin: 0 0 0.75rem 0;
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
	}

	.formula-info p {
		margin: 0 0 0.5rem 0;
		color: var(--color-text-muted);
		font-size: 0.875rem;
		font-family: "Courier New", monospace;
	}

	.formula-info .formula-note {
		margin-top: 1rem;
		font-family: inherit;
		font-style: italic;
	}

	/* Mobile Responsiveness */
	@media (max-width: 768px) {
		.main-results {
			flex-direction: column;
		}

		.measurements-grid {
			grid-template-columns: 1fr;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// @ts-nocheck - Disable TypeScript checking for this Astro component
	let currentHeightUnit = "imperial";
	let currentMeasurementUnit = "imperial"; // for wrist/ankle measurements

	// Get DOM elements using the new component selectors
	const heightTotalInches = document.getElementById("height-total-inches");
	const heightCm = document.getElementById("height-cm");
	const wristInches = document.getElementById("wrist-inches");
	const wristCm = document.getElementById("wrist-cm");
	const ankleInches = document.getElementById("ankle-inches");
	const ankleCm = document.getElementById("ankle-cm");
	const bodyFat = document.getElementById("body-fat");

	// Results elements
	const maxWeightNumber = document.querySelector("#max-weight-number .result-value__number");
	const maxLeanNumber = document.querySelector("#max-lean-number .result-value__number");
	const maxWeightUnit = document.querySelector("#max-weight-number .result-value__unit");
	const maxLeanUnit = document.querySelector("#max-lean-number .result-value__unit");
	const formulaText = document.getElementById("formula-text");

	// Calculate muscle potential using Casey Butt's formulas
	function calculateMusclePotential() {
		const shared = new (window as any).ReactiveSharedValues();
		let heightInInches, wristInInches, ankleInInches, bodyFatPercent;

		// Get values from ReactiveSharedValues
		if (currentHeightUnit === "imperial") {
			heightInInches = shared.get("heightTotalInches") || 68;
		} else {
			heightInInches = (shared.get("heightCm") || 173) / 2.54;
		}

		// Get wrist measurement in inches
		if (currentMeasurementUnit === "imperial") {
			wristInInches = shared.get("wristInches") || 7;
		} else {
			wristInInches = (shared.get("wristCm") || 17.8) / 2.54;
		}

		// Get ankle measurement in inches
		if (currentMeasurementUnit === "imperial") {
			ankleInInches = shared.get("ankleInches") || 8.5;
		} else {
			ankleInInches = (shared.get("ankleCm") || 21.6) / 2.54;
		}

		// Get body fat percentage
		bodyFatPercent = (shared.get("bodyFat") || 10) / 100;

		// Casey Butt's formula for maximum lean body mass (Imperial Units)
		// LBM = H^1.5 × (√W/22.667 + √A/17.01) × (F/224 + 1)
		// Where H = height in inches, W = wrist in inches, A = ankle in inches, F = body fat %

		const heightFactor = Math.pow(heightInInches, 1.5);
		const wristFactor = Math.sqrt(wristInInches) / 22.667;
		const ankleFactor = Math.sqrt(ankleInInches) / 17.01;
		const bodyFatFactor = (bodyFatPercent * 100) / 224 + 1;

		const maxLeanMassLbs = heightFactor * (wristFactor + ankleFactor) * bodyFatFactor;
		const maxWeightLbs = maxLeanMassLbs / (1 - bodyFatPercent);

		// Casey Butt's body part measurements based on bone structure
		const maxArmsInches = wristInInches + 10.5;
		const maxForearmsInches = wristInInches + 6.0;
		const maxNeckInches = wristInInches + 8.5;
		const maxChestInches = wristInInches * 6.5;
		const maxThighsInches = ankleInInches + 14.0;
		const maxCalvesInches = ankleInInches + 6.0;

		return {
			maxWeightLbs,
			maxLeanMassLbs,
			maxArmsInches,
			maxForearmsInches,
			maxNeckInches,
			maxChestInches,
			maxThighsInches,
			maxCalvesInches,
			heightInInches,
			wristInInches,
			ankleInInches,
			bodyFatPercent,
		};
	}

	function updateDisplay() {
		const results = calculateMusclePotential();
		const maxWeightKg = results.maxWeightLbs * 0.453592;
		const maxLeanKg = results.maxLeanMassLbs * 0.453592;

		// Update main results using new component selectors
		if (currentHeightUnit === "imperial") {
			if (maxLeanNumber) maxLeanNumber.textContent = Math.round(results.maxLeanMassLbs).toString();
			if (maxWeightNumber)
				maxWeightNumber.textContent = Math.round(results.maxWeightLbs).toString();
			if (maxWeightUnit) maxWeightUnit.textContent = "lbs";
			if (maxLeanUnit) maxLeanUnit.textContent = "lbs";
		} else {
			if (maxLeanNumber) maxLeanNumber.textContent = Math.round(maxLeanKg).toString();
			if (maxWeightNumber) maxWeightNumber.textContent = Math.round(maxWeightKg).toString();
			if (maxWeightUnit) maxWeightUnit.textContent = "kg";
			if (maxLeanUnit) maxLeanUnit.textContent = "kg";
		}

		// Update body fat text
		const targetBfText = document.getElementById("target-bf-text");
		if (targetBfText) targetBfText.textContent = bodyFat?.value || "10";

		// Update body part measurements
		const displayUnit = currentMeasurementUnit === "imperial" ? "inches" : "cm";
		const convert = currentMeasurementUnit === "imperial" ? 1 : 2.54;

		const maxArms = document.getElementById("max-arms");
		const maxForearms = document.getElementById("max-forearms");
		const maxNeck = document.getElementById("max-neck");
		const maxChest = document.getElementById("max-chest");
		const maxThighs = document.getElementById("max-thighs");
		const maxCalves = document.getElementById("max-calves");

		if (maxArms)
			maxArms.textContent = `${(results.maxArmsInches * convert).toFixed(1)} ${displayUnit}`;
		if (maxForearms)
			maxForearms.textContent = `${(results.maxForearmsInches * convert).toFixed(1)} ${displayUnit}`;
		if (maxNeck)
			maxNeck.textContent = `${(results.maxNeckInches * convert).toFixed(1)} ${displayUnit}`;
		if (maxChest)
			maxChest.textContent = `${(results.maxChestInches * convert).toFixed(1)} ${displayUnit}`;
		if (maxThighs)
			maxThighs.textContent = `${(results.maxThighsInches * convert).toFixed(1)} ${displayUnit}`;
		if (maxCalves)
			maxCalves.textContent = `${(results.maxCalvesInches * convert).toFixed(1)} ${displayUnit}`;

		// Update formula display
		if (formulaText) {
			formulaText.textContent = `LBM = ${results.heightInInches.toFixed(1)}^1.5 × (√${results.wristInInches.toFixed(1)}/22.667 + √${results.ankleInInches.toFixed(1)}/17.01) × (${(results.bodyFatPercent * 100).toFixed(1)}/224 + 1) = ${Math.round(results.maxLeanMassLbs)} lbs`;
		}
	}

	// Modern event listeners for precision range sliders with bidirectional sync
	document.addEventListener("precision-range-change", (event) => {
		const customEvent = event as CustomEvent;
		const { sharedKey, value } = customEvent.detail;

		// Update ReactiveSharedValues for persistence
		const shared = new (window as any).ReactiveSharedValues();
		shared.set(sharedKey, value);

		// Bidirectional unit synchronization
		if (sharedKey === "heightTotalInches") {
			const cm = Math.round(parseFloat(value) * 2.54);
			shared.set("heightCm", cm);
			// Force reload metric slider to reflect the change
			const metricSlider = document.getElementById("height-cm");
			if (metricSlider) {
				metricSlider.dispatchEvent(new CustomEvent("force-update"));
			}
		} else if (sharedKey === "heightCm") {
			const totalInches = Math.round((parseFloat(value) / 2.54) * 2) / 2;
			shared.set("heightTotalInches", totalInches);
			// Force reload imperial slider to reflect the change
			const imperialSlider = document.getElementById("height-total-inches");
			if (imperialSlider) {
				imperialSlider.dispatchEvent(new CustomEvent("force-update"));
			}
		} else if (sharedKey === "wristInches") {
			const cm = Math.round(parseFloat(value) * 2.54 * 10) / 10;
			shared.set("wristCm", cm);
		} else if (sharedKey === "wristCm") {
			const inches = Math.round((parseFloat(value) / 2.54) * 10) / 10;
			shared.set("wristInches", inches);
		} else if (sharedKey === "ankleInches") {
			const cm = Math.round(parseFloat(value) * 2.54 * 10) / 10;
			shared.set("ankleCm", cm);
		} else if (sharedKey === "ankleCm") {
			const inches = Math.round((parseFloat(value) / 2.54) * 10) / 10;
			shared.set("ankleInches", inches);
		}

		// Update the display
		updateDisplay();
	});

	function setSliderValue(id, value) {
		const slider = document.getElementById(id);
		if (slider) {
			// For PrecisionRangeSlider, we need to update the internal input
			const rangeInput = slider.querySelector(".range-input") as HTMLInputElement;
			const numberInput = slider.querySelector(".number-input") as HTMLInputElement;

			if (rangeInput) {
				rangeInput.value = value.toString();
				rangeInput.dispatchEvent(new Event("input", { bubbles: true }));
			}
			if (numberInput) {
				numberInput.value = value.toString();
			}
		}
	}

	// Unit toggle functionality
	document.addEventListener("unit-toggle-change", (event) => {
		const customEvent = event as CustomEvent;
		const unit = customEvent.detail.value;
		const attribute = customEvent.detail.attribute;

		if (attribute === "height-unit") {
			currentHeightUnit = unit;

			const imperialHeight = document.querySelector(".imperial-height");
			const metricHeight = document.querySelector(".metric-height");

			// Read existing shared values to avoid overwrites on simple page load
			const shared = new (window as any).ReactiveSharedValues();
			const existingUnit = shared.get("heightUnit") || "imperial";
			if (unit !== existingUnit) {
				shared.set("heightUnit", unit);
			}

			if (unit === "metric") {
				imperialHeight.style.display = "none";
				metricHeight.style.display = "block";
				// Convert only if switching units now; otherwise honor existing heightCm
				if (existingUnit === "imperial") {
					const totalInches =
						shared.get("heightTotalInches") ?? parseFloat(heightTotalInches?.value || "68");
					const cm = Math.round(totalInches * 2.54);
					shared.set("heightCm", cm);
					setSliderValue("height-cm", cm);
				}
			} else {
				imperialHeight.style.display = "block";
				metricHeight.style.display = "none";
				// Convert only if switching units now; otherwise honor existing heightTotalInches
				if (existingUnit === "metric") {
					const cm = shared.get("heightCm") ?? parseInt(heightCm?.value || "173");
					const inches = Math.round((cm / 2.54) * 2) / 2; // nearest 0.5
					shared.set("heightTotalInches", inches);
					setSliderValue("height-total-inches", inches);
				}
			}
		} else if (attribute === "wrist-unit") {
			currentMeasurementUnit = unit;

			const imperialWrist = document.querySelector(".imperial-wrist");
			const metricWrist = document.querySelector(".metric-wrist");

			if (unit === "metric") {
				imperialWrist.style.display = "none";
				metricWrist.style.display = "block";
				// Convert inches to cm
				const inches = parseFloat(wristInches?.value || "7");
				if (wristCm) wristCm.value = (inches * 2.54).toFixed(1);
			} else {
				imperialWrist.style.display = "block";
				metricWrist.style.display = "none";
				// Convert cm to inches
				const cm = parseFloat(wristCm?.value || "17.8");
				if (wristInches) wristInches.value = (cm / 2.54).toFixed(1);
			}
		} else if (attribute === "ankle-unit") {
			currentMeasurementUnit = unit;

			const imperialAnkle = document.querySelector(".imperial-ankle");
			const metricAnkle = document.querySelector(".metric-ankle");

			if (unit === "metric") {
				imperialAnkle.style.display = "none";
				metricAnkle.style.display = "block";
				// Convert inches to cm
				const inches = parseFloat(ankleInches?.value || "8.5");
				if (ankleCm) ankleCm.value = (inches * 2.54).toFixed(1);
			} else {
				imperialAnkle.style.display = "block";
				metricAnkle.style.display = "none";
				// Convert cm to inches
				const cm = parseFloat(ankleCm?.value || "21.6");
				if (ankleInches) ankleInches.value = (cm / 2.54).toFixed(1);
			}
		}

		updateDisplay();
	});

	// Initialize the calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		updateDisplay();
		// Initialize from ReactiveSharedValues for height without forcing conversions
		try {
			const shared = new (window as any).ReactiveSharedValues();
			const savedHeightUnit = shared.get("heightUnit") || "imperial";
			currentHeightUnit = savedHeightUnit;
			const imperialHeight = document.querySelector(".imperial-height") as HTMLElement;
			const metricHeight = document.querySelector(".metric-height") as HTMLElement;
			if (savedHeightUnit === "imperial") {
				if (imperialHeight) imperialHeight.style.display = "block";
				if (metricHeight) metricHeight.style.display = "none";
				const inches = shared.get("heightTotalInches");
				if (inches != null) setSliderValue("height-total-inches", inches);
			} else {
				if (imperialHeight) imperialHeight.style.display = "none";
				if (metricHeight) metricHeight.style.display = "block";
				const cm = shared.get("heightCm");
				if (cm != null) setSliderValue("height-cm", cm);
			}

			// Sync unit toggle UI state to saved unit
			const heightToggle = document.querySelector(
				'.unit-toggle .unit-btn[data-height-unit="' + savedHeightUnit + '"]'
			) as HTMLElement | null;
			if (heightToggle) {
				// simulate click to update active state without re-triggering conversions
				document
					.querySelectorAll(".unit-toggle .unit-btn[data-height-unit]")
					.forEach((btn) => btn.classList.remove("active"));
				heightToggle.classList.add("active");
			}
		} catch (e) {
			console.warn("ReactiveSharedValues init failed on muscle-potential:", e);
		}
	});
</script>
