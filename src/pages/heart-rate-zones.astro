---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import RangeSlider from "../components/RangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import CategoryBadge from "../components/CategoryBadge.astro";
import ComparisonTable from "../components/ComparisonTable.astro";
import ValidationDisplay from "../components/ValidationDisplay.astro";
---

<Layout
	title="Heart Rate Zones Calculator - Potato Hack Fitness Calculators"
	description="Calculate your heart rate training zones based on age and maximum heart rate. Get personalized zones for effective training intensity."
>
	<CalculatorLayout
		title="Heart Rate Zones Calculator"
		description="Calculate your heart rate training zones for optimal workout intensity and performance"
	>
		<div slot="inputs">
			<InputGroup
				label="Maximum Heart Rate Method"
				helpText="Choose how to determine your max heart rate"
			>
				<UnitToggle
					options={[
						{ value: "formula", label: "Age Formula" },
						{ value: "custom", label: "Known Max HR" },
					]}
					activeValue="formula"
					dataAttribute="max-hr-method"
				/>
			</InputGroup>

			<div class="age-group" data-method-group="formula">
				<InputGroup label="Age" helpText="Your current age in years">
					<RangeSlider
						id="age"
						label=""
						min={15}
						max={100}
						value={30}
						unit="years"
						sharedKey="age"
					/>
				</InputGroup>
			</div>

			<div class="custom-hr-group" data-method-group="custom" style="display: none;">
				<InputGroup
					label="Your Maximum Heart Rate"
					helpText="Enter your highest recorded heart rate during intense exercise"
				>
					<RangeSlider
						id="custom-max-hr"
						label=""
						min={150}
						max={220}
						value={190}
						unit="bpm"
						sharedKey="customMaxHR"
					/>
				</InputGroup>
			</div>

			<ResultCard title="Training Tips" variant="default">
				<div class="info-sections">
					<div class="info-section">
						<h4>How to Find Your True Max Heart Rate</h4>
						<ul>
							<li>
								<strong>Field Test:</strong> Warm up, then run up a hill for 2 minutes at increasing
								intensity
							</li>
							<li>
								<strong>Recent Maximum:</strong> Use the highest heart rate seen during intense exercise
								in the last 6 months
							</li>
							<li>
								<strong>Age Formula:</strong> 220 minus your age (less accurate but widely used)
							</li>
						</ul>
					</div>

					<div class="info-section">
						<h4>Zone Training Benefits</h4>
						<ul>
							<li>
								<strong>Zone 1-2:</strong> Improves fat burning, builds aerobic base, aids recovery
							</li>
							<li><strong>Zone 3:</strong> Develops aerobic capacity and lactate buffering</li>
							<li><strong>Zone 4:</strong> Improves lactate threshold and VO2 max</li>
							<li><strong>Zone 5:</strong> Develops neuromuscular power and anaerobic capacity</li>
						</ul>
					</div>
				</div>
			</ResultCard>

			<ValidationDisplay />
		</div>

		<div slot="results">
			<ResultCard title="Maximum Heart Rate" variant="primary">
				<ResultValue id="calculated-max-hr" value={190} unit="bpm" size="xl" color="primary" />
				<p id="max-hr-method-text" class="method-description">Calculated using 220 - age formula</p>
			</ResultCard>

			<ResultCard title="Training Zones">
				<ComparisonTable
					headers={["Zone", "Name", "Heart Rate", "%Max", "Purpose"]}
					rows={[
						{
							cells: [
								"1",
								"Easy",
								"<span id='zone1-range'>129-139</span>",
								"68-73%",
								"Recovery & base endurance",
							],
							class: "zone-1",
						},
						{
							cells: [
								"2",
								"Steady",
								"<span id='zone2-range'>139-152</span>",
								"73-80%",
								"Aerobic base building",
							],
							class: "zone-2",
						},
						{
							cells: [
								"3",
								"Tempo",
								"<span id='zone3-range'>152-171</span>",
								"80-90%",
								"Lactate threshold",
							],
							class: "zone-3",
						},
						{
							cells: [
								"4",
								"Threshold",
								"<span id='zone4-range'>171-181</span>",
								"90-95%",
								"VO2 max improvement",
							],
							class: "zone-4",
						},
						{
							cells: [
								"5",
								"VO2 Max",
								"<span id='zone5-range'>181-190</span>",
								"95-100%",
								"Neuromuscular power",
							],
							class: "zone-5",
						},
					]}
					class="heart-rate-zones"
				/>
			</ResultCard>

			<ResultCard title="Zone Distribution Guide">
				<ComparisonTable
					headers={["Training Goal", "Zone 1-2", "Zone 3", "Zone 4", "Zone 5"]}
					rows={[
						{ cells: ["Base Building", "80%", "15%", "5%", "0%"], highlight: true },
						{ cells: ["General Fitness", "70%", "20%", "8%", "2%"] },
						{ cells: ["Race Preparation", "60%", "25%", "12%", "3%"] },
						{ cells: ["Peak Performance", "50%", "25%", "20%", "5%"] },
					]}
				/>
			</ResultCard>
		</div>
	</CalculatorLayout>
</Layout>

<script src="/sharedValues.js" is:inline></script>
<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Heart Rate Zones Calculator - Refactored with Components
	class HeartRateZonesCalculator {
		private sharedValues: any;
		private reactiveSharedValues: any;

		constructor() {
			// Initialize SharedValues systems
			this.sharedValues = new (window as any).SharedValues();

			if ((window as any).ReactiveSharedValues) {
				this.reactiveSharedValues = new (window as any).ReactiveSharedValues();
			}

			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Set default method
			this.sharedValues.set("maxHRMethod", "formula");

			// Initialize the UI state
			this.toggleMaxHRMethod("formula");

			// Initial calculation
			this.calculate();
		}

		private setupEventListeners(): void {
			// Listen for input changes
			document.addEventListener("range-slider-change", (event) => {
				this.calculate();
			});

			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				if (customEvent.detail.attribute === "max-hr-method") {
					this.toggleMaxHRMethod(customEvent.detail.value);
					this.sharedValues.set("maxHRMethod", customEvent.detail.value);
				}
				this.calculate();
			});
		}

		private toggleMaxHRMethod(method: string): void {
			const ageGroup = document.querySelector(".age-group") as HTMLElement;
			const customGroup = document.querySelector(".custom-hr-group") as HTMLElement;

			if (ageGroup && customGroup) {
				if (method === "formula") {
					ageGroup.style.display = "block";
					customGroup.style.display = "none";
				} else {
					ageGroup.style.display = "none";
					customGroup.style.display = "block";
				}
			}
		}

		private calculate(): void {
			try {
				const method = this.sharedValues.get("maxHRMethod") || "formula";
				let maxHR: number;

				if (method === "formula") {
					const age = this.sharedValues.get("age") || 30;
					maxHR = 220 - age;
				} else {
					maxHR = this.sharedValues.get("customMaxHR") || 190;
				}

				// Update max HR display
				this.updateMaxHR(maxHR, method);

				// Calculate and update zones
				this.updateZones(maxHR);
			} catch (error) {
				console.error("Calculation error:", error);
			}
		}

		private updateMaxHR(maxHR: number, method: string): void {
			const maxHRElement = document.getElementById("calculated-max-hr");
			const methodTextElement = document.getElementById("max-hr-method-text");

			if (maxHRElement) {
				maxHRElement.textContent = maxHR.toString();
			}

			if (methodTextElement) {
				if (method === "formula") {
					methodTextElement.textContent = "Calculated using 220 - age formula";
				} else {
					methodTextElement.textContent = "Using your known maximum heart rate";
				}
			}
		}

		private updateZones(maxHR: number): void {
			// Zone calculations (% of max HR)
			const zones = [
				{ min: 0.68, max: 0.73, id: "zone1-range" },
				{ min: 0.73, max: 0.8, id: "zone2-range" },
				{ min: 0.8, max: 0.9, id: "zone3-range" },
				{ min: 0.9, max: 0.95, id: "zone4-range" },
				{ min: 0.95, max: 1.0, id: "zone5-range" },
			];

			zones.forEach((zone) => {
				const minHR = Math.round(maxHR * zone.min);
				const maxHRZone = Math.round(maxHR * zone.max);
				const element = document.getElementById(zone.id);

				if (element) {
					element.textContent = `${minHR}-${maxHRZone}`;
				}
			});
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		new HeartRateZonesCalculator();
	});
</script>

<style>
	/* Component-specific styles */
	.info-sections {
		display: grid;
		gap: 1.5rem;
	}

	.info-section h4 {
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
		margin-bottom: 0.75rem;
	}

	.info-section ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.info-section li {
		padding: 0.5rem 0;
		border-bottom: 1px solid var(--color-border);
		font-size: 0.875rem;
		line-height: 1.4;
	}

	.info-section li:last-child {
		border-bottom: none;
	}

	.method-description {
		color: var(--color-text-muted);
		font-size: 0.875rem;
		margin-top: 1rem;
		text-align: center;
	}

	/* Heart rate zone styling */
	.heart-rate-zones .zone-1 {
		background: color-mix(in srgb, var(--color-success) 10%, transparent);
	}

	.heart-rate-zones .zone-2 {
		background: color-mix(in srgb, var(--color-info) 10%, transparent);
	}

	.heart-rate-zones .zone-3 {
		background: color-mix(in srgb, var(--color-warning) 10%, transparent);
	}

	.heart-rate-zones .zone-4 {
		background: color-mix(in srgb, var(--color-danger) 10%, transparent);
	}

	.heart-rate-zones .zone-5 {
		background: color-mix(in srgb, var(--color-accent) 10%, transparent);
	}

	/* Method group toggling */
	[data-method-group] {
		transition: all 0.3s ease;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		.info-sections {
			gap: 1rem;
		}

		.info-section li {
			font-size: 0.8125rem;
		}
	}
</style>
