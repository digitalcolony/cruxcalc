---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import GenderToggle from "../components/GenderToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import CategoryBadge from "../components/CategoryBadge.astro";
import ComparisonTable from "../components/ComparisonTable.astro";
---

<Layout
	title="Body Fat Calculator - Navy Method Body Fat Percentage"
	description="Calculate body fat percentage using the proven Navy circumference method. Get accurate body composition analysis."
>
	<CalculatorLayout
		title="Body Fat Percentage Calculator"
		description="Get accurate body composition analysis using the Navy circumference method"
	>
		<div slot="inputs">
			<InputGroup label="Gender" helpText="Select your biological gender for accurate calculations">
				<GenderToggle activeGender="male" />
			</InputGroup>

			<InputGroup label="Height" helpText="Select your preferred unit system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "ft/in" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="height-unit"
				/>
			</InputGroup>

			<div class="height-inputs imperial-height" data-unit-group="imperial">
				<InputGroup label="" class="full-width">
					<PrecisionRangeSlider
						id="height-total-inches"
						min={48}
						max={84}
						step={0.5}
						value={70}
						unit=""
						sharedKey="heightTotalInches"
						formatAsHeight={true}
					/>
				</InputGroup>
			</div>

			<div class="height-inputs metric-height" data-unit-group="metric" style="display: none;">
				<InputGroup label="" class="full-width">
					<PrecisionRangeSlider
						id="height-cm"
						min={120}
						max={220}
						value={178}
						unit="cm"
						sharedKey="heightCm"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Neck Circumference"
				helpText="Measure below the larynx, tape sloping downward to front"
			>
				<PrecisionRangeSlider
					id="neck"
					min={10}
					max={25}
					value={15}
					step={0.5}
					unit="inches"
					sharedKey="neckCircumference"
				/>
			</InputGroup>

			<InputGroup
				label="Waist Circumference"
				helpText="Men: Measure at navel level | Women: Measure at smallest width"
			>
				<PrecisionRangeSlider
					id="waist"
					min={20}
					max={60}
					value={32}
					step={0.5}
					unit="inches"
					sharedKey="waistCircumference"
				/>
			</InputGroup>

			<div class="hip-group" style="display: none;">
				<InputGroup
					label="Hip Circumference (Female)"
					helpText="Measure at largest horizontal circumference"
				>
					<PrecisionRangeSlider
						id="hips"
						min={25}
						max={65}
						value={38}
						step={0.5}
						unit="inches"
						sharedKey="hipCircumference"
					/>
				</InputGroup>
			</div>
		</div>

		<div slot="results">
			<ResultCard title="Body Fat Percentage (Navy Method)" variant="primary">
				<ResultValue id="navy-result" value={15.3} unit="%" size="xl" color="primary" />
				<slot name="badge">
					<CategoryBadge id="category-badge" category="Fitness" class="fitness" />
				</slot>
			</ResultCard>

			<ResultCard title="Body Fat Categories">
				<ComparisonTable
					headers={["Category", "Men", "Women", "Description"]}
					rows={[
						{
							cells: ["Essential", "2-5%", "10-13%", "Minimum fat needed for health"],
							class: "essential",
						},
						{ cells: ["Athletic", "6-13%", "14-20%", "Typical for athletes"], class: "athletic" },
						{
							cells: ["Fitness", "14-17%", "21-24%", "Fit and healthy appearance"],
							class: "fitness",
						},
						{
							cells: ["Average", "18-24%", "25-31%", "Typical for general population"],
							class: "average",
						},
						{ cells: ["Obese", "≥25%", "≥32%", "Higher health risks"], class: "obese" },
					]}
					class="body-fat-categories"
				/>
			</ResultCard>

			<ResultCard title="Calculation Methods">
				<ComparisonTable
					headers={["Method", "Accuracy", "Equipment"]}
					rows={[
						{ cells: ["Navy Circumference", "±3-4%", "Measuring tape"], highlight: true },
						{ cells: ["DEXA Scan", "±1-2%", "Professional equipment"] },
						{ cells: ["Bod Pod", "±2-3%", "Air displacement"] },
						{ cells: ["Hydrostatic", "±1-2%", "Water tank"] },
					]}
				/>
			</ResultCard>
		</div>
	</CalculatorLayout>
</Layout>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Body Fat Calculator - Refactored with Components
	class BodyFatCalculator {
		private sharedValues: any;

		constructor() {
			console.log("BodyFatCalculator: Initializing...");

			// Initialize ReactiveSharedValues
			this.sharedValues = new (window as any).ReactiveSharedValues();

			// Log current values
			const currentValues = this.sharedValues.getAll();
			console.log("Body Fat Calculator - Loaded existing values:", currentValues);

			// Set default values only if they don't exist
			const defaults = {
				gender: "male",
				heightUnit: "imperial",
				heightTotalInches: 70,
				heightCm: 178,
				neckCircumference: 15,
				waistCircumference: 32,
				hipCircumference: 38,
			};

			Object.entries(defaults).forEach(([key, defaultValue]) => {
				if (currentValues[key] === undefined || currentValues[key] === null) {
					console.log(`Setting default for ${key}: ${defaultValue}`);
					this.sharedValues.set(key, defaultValue);
				} else {
					console.log(`Using existing value for ${key}: ${currentValues[key]}`);
				}
			});

			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Use existing values or defaults for UI initialization
			const heightUnit = this.sharedValues.get("heightUnit") || "imperial";
			const gender = this.sharedValues.get("gender") || "male";

			// Initialize UI state with existing preferences
			this.convertAndToggleHeightUnits(heightUnit);
			this.toggleGenderSpecificInputs();

			// Initial calculation
			this.calculate();
		}

		private setupEventListeners(): void {
			// Listen for precision range slider changes
			document.addEventListener("precision-range-change", (event) => {
				const customEvent = event as CustomEvent;
				const sharedKey = customEvent.detail.sharedKey;
				const value = customEvent.detail.value;

				console.log(`Body Fat Calculator: Range change for ${sharedKey}, value: ${value}`);

				// Store the value in SharedValues
				if (sharedKey) {
					this.sharedValues.set(sharedKey, value);
				}

				// Bidirectional unit sync for height
				if (sharedKey === "heightTotalInches") {
					const cm = Math.round(value * 2.54);
					console.log(`Syncing height: ${value} inches = ${cm} cm`);
					this.sharedValues.set("heightCm", cm);
				} else if (sharedKey === "heightCm") {
					const totalInches = Math.round((value / 2.54) * 2) / 2;
					console.log(`Syncing height: ${value} cm = ${totalInches} inches`);
					this.sharedValues.set("heightTotalInches", totalInches);
				}

				// Recalculate results
				this.calculate();
			});

			document.addEventListener("gender-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				console.log("Gender toggle change:", customEvent.detail);

				// GenderToggle sends detail.gender (not detail.value)
				if (customEvent.detail.gender) {
					this.sharedValues.set("gender", customEvent.detail.gender);
				}

				this.toggleGenderSpecificInputs();
				this.calculate();
			});
			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				console.log("Unit change event received:", customEvent.detail);

				if (customEvent.detail.attribute === "height-unit") {
					console.log("Updating height unit to:", customEvent.detail.value);
					this.sharedValues.set("heightUnit", customEvent.detail.value);
					this.convertAndToggleHeightUnits(customEvent.detail.value);
				}
				this.calculate();
			});
		}

		private toggleGenderSpecificInputs(): void {
			const gender = this.sharedValues.get("gender") || "male";
			const hipGroup = document.querySelector(".hip-group") as HTMLElement;

			if (hipGroup) {
				hipGroup.style.display = gender === "female" ? "block" : "none";
			}
		}

		private convertAndToggleHeightUnits(unit: string): void {
			const imperialGroup = document.querySelector(".imperial-height") as HTMLElement;
			const metricGroup = document.querySelector(".metric-height") as HTMLElement;

			console.log(`Converting height units to: ${unit}`);

			if (imperialGroup && metricGroup) {
				if (unit === "imperial") {
					// Show imperial, hide metric
					imperialGroup.style.display = "block";
					metricGroup.style.display = "none";

					// Force reload the imperial height slider from shared values
					const imperialSlider = imperialGroup.querySelector(
						'input[type="range"]'
					) as HTMLInputElement;
					if (imperialSlider) {
						const heightTotalInches = this.sharedValues.get("heightTotalInches") || 70;
						console.log(`Setting imperial height slider to: ${heightTotalInches} inches`);
						imperialSlider.value = heightTotalInches.toString();
						// Trigger an input event to update the display
						imperialSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				} else {
					// Show metric, hide imperial
					imperialGroup.style.display = "none";
					metricGroup.style.display = "block";

					// Force reload the metric height slider from shared values
					const metricSlider = metricGroup.querySelector('input[type="range"]') as HTMLInputElement;
					if (metricSlider) {
						const heightCm = this.sharedValues.get("heightCm") || 178;
						console.log(`Setting metric height slider to: ${heightCm} cm`);
						metricSlider.value = heightCm.toString();
						// Trigger an input event to update the display
						metricSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				}
			}
		}

		private getHeightInInches(): number {
			const heightUnit = this.sharedValues.get("heightUnit") || "imperial";

			if (heightUnit === "imperial") {
				return this.sharedValues.get("heightTotalInches") || 70;
			} else {
				const cm = this.sharedValues.get("heightCm") || 178;
				return cm / 2.54; // Convert cm to inches
			}
		}

		private calculate(): void {
			try {
				const gender = this.sharedValues.get("gender") || "male";
				const heightInches = this.getHeightInInches();
				const neck = this.sharedValues.get("neckCircumference") || 15;
				const waist = this.sharedValues.get("waistCircumference") || 32;
				const hips = this.sharedValues.get("hipCircumference") || 38;

				// Convert inches to centimeters for Navy formula (formula uses metric)
				const heightCm = heightInches * 2.54;
				const neckCm = neck * 2.54;
				const waistCm = waist * 2.54;
				const hipsCm = hips * 2.54;

				let bodyFat: number;

				if (gender === "male") {
					// Navy formula for men: 495 / (1.0324 - 0.19077 * log10(waist - neck) + 0.15456 * log10(height)) - 450
					bodyFat =
						495 /
							(1.0324 - 0.19077 * Math.log10(waistCm - neckCm) + 0.15456 * Math.log10(heightCm)) -
						450;
				} else {
					// Navy formula for women: 495 / (1.29579 - 0.35004 * log10(waist + hips - neck) + 0.22100 * log10(height)) - 450
					bodyFat =
						495 /
							(1.29579 -
								0.35004 * Math.log10(waistCm + hipsCm - neckCm) +
								0.221 * Math.log10(heightCm)) -
						450;
				}

				// Ensure reasonable bounds
				bodyFat = Math.max(1, Math.min(60, bodyFat));

				// Update result display
				this.updateResults(bodyFat, gender);
			} catch (error) {
				console.error("Calculation error:", error);
				this.updateResults(0, "male");
			}
		}

		private updateResults(bodyFat: number, gender: string): void {
			// Update result value
			const resultElement = document.getElementById("navy-result");
			if (resultElement) {
				resultElement.textContent = bodyFat.toFixed(1);
			}

			// Update category badge
			const category = this.getBodyFatCategory(bodyFat, gender);
			const categoryBadge = document.getElementById("category-badge");
			if (categoryBadge) {
				categoryBadge.textContent = category.name;
				categoryBadge.className = `category-badge ${category.class}`;
			}

			// Highlight appropriate row in table
			this.highlightCategoryRow(category.class);
		}

		private getBodyFatCategory(bodyFat: number, gender: string): { name: string; class: string } {
			if (gender === "male") {
				if (bodyFat < 6) return { name: "Essential", class: "essential" };
				if (bodyFat < 14) return { name: "Athletic", class: "athletic" };
				if (bodyFat < 18) return { name: "Fitness", class: "fitness" };
				if (bodyFat < 25) return { name: "Average", class: "average" };
				return { name: "Obese", class: "obese" };
			} else {
				if (bodyFat < 14) return { name: "Essential", class: "essential" };
				if (bodyFat < 21) return { name: "Athletic", class: "athletic" };
				if (bodyFat < 25) return { name: "Fitness", class: "fitness" };
				if (bodyFat < 32) return { name: "Average", class: "average" };
				return { name: "Obese", class: "obese" };
			}
		}

		private highlightCategoryRow(categoryClass: string): void {
			// Remove existing highlights
			const rows = document.querySelectorAll(".body-fat-categories tbody tr");
			rows.forEach((row) => row.classList.remove("highlight"));

			// Add highlight to matching row
			const targetRow = document.querySelector(`.body-fat-categories .${categoryClass}`);
			if (targetRow) {
				targetRow.classList.add("highlight");
			}
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		new BodyFatCalculator();
	});
</script>

<style>
	/* Component-specific styles */
	.height-inputs {
		display: block;
		margin-bottom: 1rem;
	}

	.hip-group {
		transition: all 0.3s ease;
	}

	/* Body fat category styling */
	.body-fat-categories .essential {
		background: color-mix(in srgb, var(--color-info) 10%, transparent);
	}

	.body-fat-categories .athletic {
		background: color-mix(in srgb, var(--color-success) 10%, transparent);
	}

	.body-fat-categories .fitness {
		background: color-mix(in srgb, var(--color-primary) 10%, transparent);
	}

	.body-fat-categories .average {
		background: color-mix(in srgb, var(--color-warning) 10%, transparent);
	}

	.body-fat-categories .obese {
		background: color-mix(in srgb, var(--color-danger) 10%, transparent);
	}

	.body-fat-categories .highlight {
		background: color-mix(in srgb, var(--color-accent) 20%, transparent);
		font-weight: 600;
	}

	/* Category badge colors */
	:global(.category-badge.essential) {
		background: color-mix(in srgb, var(--color-info) 20%, transparent);
		color: var(--color-info);
		border-color: var(--color-info);
	}

	:global(.category-badge.athletic) {
		background: color-mix(in srgb, var(--color-success) 20%, transparent);
		color: var(--color-success);
		border-color: var(--color-success);
	}

	:global(.category-badge.fitness) {
		background: color-mix(in srgb, var(--color-primary) 20%, transparent);
		color: var(--color-primary);
		border-color: var(--color-primary);
	}

	:global(.category-badge.average) {
		background: color-mix(in srgb, var(--color-warning) 20%, transparent);
		color: var(--color-warning);
		border-color: var(--color-warning);
	}

	:global(.category-badge.obese) {
		background: color-mix(in srgb, var(--color-danger) 20%, transparent);
		color: var(--color-danger);
		border-color: var(--color-danger);
	}

	/* Full width height inputs */
	.full-width {
		width: 100%;
	}

	.height-inputs .full-width {
		flex: 1;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		.height-inputs {
			grid-template-columns: 1fr;
		}
	}
</style>
