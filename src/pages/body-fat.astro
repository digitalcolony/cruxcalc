---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import RangeSlider from "../components/RangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import GenderToggle from "../components/GenderToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import CategoryBadge from "../components/CategoryBadge.astro";
import ComparisonTable from "../components/ComparisonTable.astro";
import ValidationDisplay from "../components/ValidationDisplay.astro";
---

<Layout
	title="Body Fat Calculator - Navy Method Body Fat Percentage"
	description="Calculate body fat percentage using the proven Navy circumference method. Get accurate body composition analysis."
>
	<CalculatorLayout
		title="Body Fat Percentage Calculator"
		description="Get accurate body composition analysis using the Navy circumference method"
	>
		<div slot="inputs">
			<InputGroup label="Gender" helpText="Select your biological gender for accurate calculations">
				<GenderToggle activeGender="male" />
			</InputGroup>

			<InputGroup label="Height" helpText="Select your preferred unit system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "ft/in" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="height-unit"
				/>
			</InputGroup>

			<div class="height-inputs imperial-height" data-unit-group="imperial">
				<InputGroup label="Height" class="full-width">
					<RangeSlider
						id="height-total-inches"
						label=""
						min={48}
						max={84}
						step={0.5}
						value={70}
						unit=""
						sharedKey="heightTotalInches"
						formatAsHeight={true}
					/>
				</InputGroup>
			</div>

			<div class="height-inputs metric-height" data-unit-group="metric" style="display: none;">
				<InputGroup label="Height" class="full-width">
					<RangeSlider
						id="height-cm"
						label=""
						min={120}
						max={220}
						value={178}
						unit="cm"
						sharedKey="heightCm"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Neck Circumference"
				helpText="Measure below the larynx, tape sloping downward to front"
			>
				<RangeSlider
					id="neck"
					label=""
					min={10}
					max={25}
					value={15}
					step={0.1}
					unit="inches"
					sharedKey="neckCircumference"
				/>
			</InputGroup>

			<InputGroup
				label="Waist Circumference"
				helpText="Men: Measure at navel level | Women: Measure at smallest width"
			>
				<RangeSlider
					id="waist"
					label=""
					min={20}
					max={60}
					value={32}
					step={0.1}
					unit="inches"
					sharedKey="waistCircumference"
				/>
			</InputGroup>

			<div class="hip-group" style="display: none;">
				<InputGroup
					label="Hip Circumference (Female)"
					helpText="Measure at largest horizontal circumference"
				>
					<RangeSlider
						id="hips"
						label=""
						min={25}
						max={65}
						value={38}
						step={0.1}
						unit="inches"
						sharedKey="hipCircumference"
					/>
				</InputGroup>
			</div>

			<ValidationDisplay />
		</div>

		<div slot="results">
			<ResultCard title="Body Fat Percentage (Navy Method)" variant="primary">
				<ResultValue id="navy-result" value={15.3} unit="%" size="xl" color="primary" />
				<slot name="badge">
					<CategoryBadge id="category-badge" category="Fitness" class="fitness" />
				</slot>
			</ResultCard>

			<ResultCard title="Body Fat Categories">
				<ComparisonTable
					headers={["Category", "Men", "Women", "Description"]}
					rows={[
						{
							cells: ["Essential", "2-5%", "10-13%", "Minimum fat needed for health"],
							class: "essential",
						},
						{ cells: ["Athletic", "6-13%", "14-20%", "Typical for athletes"], class: "athletic" },
						{
							cells: ["Fitness", "14-17%", "21-24%", "Fit and healthy appearance"],
							class: "fitness",
						},
						{
							cells: ["Average", "18-24%", "25-31%", "Typical for general population"],
							class: "average",
						},
						{ cells: ["Obese", "≥25%", "≥32%", "Higher health risks"], class: "obese" },
					]}
					class="body-fat-categories"
				/>
			</ResultCard>

			<ResultCard title="Calculation Methods">
				<ComparisonTable
					headers={["Method", "Accuracy", "Equipment"]}
					rows={[
						{ cells: ["Navy Circumference", "±3-4%", "Measuring tape"], highlight: true },
						{ cells: ["DEXA Scan", "±1-2%", "Professional equipment"] },
						{ cells: ["Bod Pod", "±2-3%", "Air displacement"] },
						{ cells: ["Hydrostatic", "±1-2%", "Water tank"] },
					]}
				/>
			</ResultCard>
		</div>
	</CalculatorLayout>
</Layout>

<script src="/sharedValues.js" is:inline></script>
<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Body Fat Calculator - Refactored with Components
	class BodyFatCalculator {
		private sharedValues: any;
		private reactiveSharedValues: any;

		constructor() {
			// Initialize SharedValues systems
			this.sharedValues = new (window as any).SharedValues();

			if ((window as any).ReactiveSharedValues) {
				this.reactiveSharedValues = new (window as any).ReactiveSharedValues();
			}

			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Initial calculation
			this.calculate();
		}

		private setupEventListeners(): void {
			// Listen for input changes
			document.addEventListener("range-slider-change", (event) => {
				this.calculate();
			});

			document.addEventListener("gender-toggle-change", (event) => {
				this.toggleGenderSpecificInputs();
				this.calculate();
			});

			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				if (customEvent.detail.attribute === "height-unit") {
					this.toggleHeightUnits(customEvent.detail.value);
				}
				this.calculate();
			});
		}

		private toggleGenderSpecificInputs(): void {
			const gender = this.sharedValues.get("gender") || "male";
			const hipGroup = document.querySelector(".hip-group") as HTMLElement;

			if (hipGroup) {
				hipGroup.style.display = gender === "female" ? "block" : "none";
			}
		}

		private toggleHeightUnits(unit: string): void {
			const imperialInputs = document.querySelector(".imperial-height") as HTMLElement;
			const metricInputs = document.querySelector(".metric-height") as HTMLElement;

			if (imperialInputs && metricInputs) {
				if (unit === "imperial") {
					// Converting from metric to imperial
					const currentCm = this.sharedValues.get("heightCm") || 178;
					const totalInches = Math.round((currentCm / 2.54) * 2) / 2; // Round to nearest 0.5

					// Update the SharedValues with converted value
					this.sharedValues.set("heightTotalInches", totalInches);

					// Update the UI slider
					this.updateSliderValue("height-total-inches", totalInches);

					imperialInputs.style.display = "block";
					metricInputs.style.display = "none";
				} else {
					// Converting from imperial to metric
					const totalInches = this.sharedValues.get("heightTotalInches") || 70;
					const cm = Math.round(totalInches * 2.54);

					// Update the SharedValues with converted value
					this.sharedValues.set("heightCm", cm);

					// Update the UI slider
					this.updateSliderValue("height-cm", cm);

					imperialInputs.style.display = "none";
					metricInputs.style.display = "block";
				}
			}
		}

		private updateSliderValue(sliderId: string, value: number): void {
			const slider = document.getElementById(sliderId) as HTMLInputElement;
			if (slider) {
				slider.value = value.toString();

				// Trigger the display update
				const event = new Event("input", { bubbles: true });
				slider.dispatchEvent(event);
			}
		}

		private getHeightInInches(): number {
			const heightUnit = this.sharedValues.get("heightUnit") || "imperial";

			if (heightUnit === "imperial") {
				return this.sharedValues.get("heightTotalInches") || 70;
			} else {
				const cm = this.sharedValues.get("heightCm") || 178;
				return cm / 2.54; // Convert cm to inches
			}
		}

		private calculate(): void {
			try {
				const gender = this.sharedValues.get("gender") || "male";
				const heightInches = this.getHeightInInches();
				const neck = this.sharedValues.get("neckCircumference") || 15;
				const waist = this.sharedValues.get("waistCircumference") || 32;
				const hips = this.sharedValues.get("hipCircumference") || 38;

				let bodyFat: number;

				if (gender === "male") {
					// Navy formula for men: 495 / (1.0324 - 0.19077 * log10(waist - neck) + 0.15456 * log10(height)) - 450
					bodyFat =
						495 /
							(1.0324 - 0.19077 * Math.log10(waist - neck) + 0.15456 * Math.log10(heightInches)) -
						450;
				} else {
					// Navy formula for women: 495 / (1.29579 - 0.35004 * log10(waist + hips - neck) + 0.22100 * log10(height)) - 450
					bodyFat =
						495 /
							(1.29579 -
								0.35004 * Math.log10(waist + hips - neck) +
								0.221 * Math.log10(heightInches)) -
						450;
				}

				// Ensure reasonable bounds
				bodyFat = Math.max(1, Math.min(60, bodyFat));

				// Update result display
				this.updateResults(bodyFat, gender);
			} catch (error) {
				console.error("Calculation error:", error);
				this.updateResults(0, "male");
			}
		}

		private updateResults(bodyFat: number, gender: string): void {
			// Update result value
			const resultElement = document.getElementById("navy-result");
			if (resultElement) {
				resultElement.textContent = bodyFat.toFixed(1);
			}

			// Update category badge
			const category = this.getBodyFatCategory(bodyFat, gender);
			const categoryBadge = document.getElementById("category-badge");
			if (categoryBadge) {
				categoryBadge.textContent = category.name;
				categoryBadge.className = `category-badge ${category.class}`;
			}

			// Highlight appropriate row in table
			this.highlightCategoryRow(category.class);
		}

		private getBodyFatCategory(bodyFat: number, gender: string): { name: string; class: string } {
			if (gender === "male") {
				if (bodyFat < 6) return { name: "Essential", class: "essential" };
				if (bodyFat < 14) return { name: "Athletic", class: "athletic" };
				if (bodyFat < 18) return { name: "Fitness", class: "fitness" };
				if (bodyFat < 25) return { name: "Average", class: "average" };
				return { name: "Obese", class: "obese" };
			} else {
				if (bodyFat < 14) return { name: "Essential", class: "essential" };
				if (bodyFat < 21) return { name: "Athletic", class: "athletic" };
				if (bodyFat < 25) return { name: "Fitness", class: "fitness" };
				if (bodyFat < 32) return { name: "Average", class: "average" };
				return { name: "Obese", class: "obese" };
			}
		}

		private highlightCategoryRow(categoryClass: string): void {
			// Remove existing highlights
			const rows = document.querySelectorAll(".body-fat-categories tbody tr");
			rows.forEach((row) => row.classList.remove("highlight"));

			// Add highlight to matching row
			const targetRow = document.querySelector(`.body-fat-categories .${categoryClass}`);
			if (targetRow) {
				targetRow.classList.add("highlight");
			}
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		new BodyFatCalculator();
	});
</script>

<style>
	/* Component-specific styles */
	.height-inputs {
		display: block;
		margin-bottom: 1rem;
	}

	.hip-group {
		transition: all 0.3s ease;
	}

	/* Body fat category styling */
	.body-fat-categories .essential {
		background: color-mix(in srgb, var(--color-info) 10%, transparent);
	}

	.body-fat-categories .athletic {
		background: color-mix(in srgb, var(--color-success) 10%, transparent);
	}

	.body-fat-categories .fitness {
		background: color-mix(in srgb, var(--color-primary) 10%, transparent);
	}

	.body-fat-categories .average {
		background: color-mix(in srgb, var(--color-warning) 10%, transparent);
	}

	.body-fat-categories .obese {
		background: color-mix(in srgb, var(--color-danger) 10%, transparent);
	}

	.body-fat-categories .highlight {
		background: color-mix(in srgb, var(--color-accent) 20%, transparent);
		font-weight: 600;
	}

	/* Category badge colors */
	:global(.category-badge.essential) {
		background: color-mix(in srgb, var(--color-info) 20%, transparent);
		color: var(--color-info);
		border-color: var(--color-info);
	}

	:global(.category-badge.athletic) {
		background: color-mix(in srgb, var(--color-success) 20%, transparent);
		color: var(--color-success);
		border-color: var(--color-success);
	}

	:global(.category-badge.fitness) {
		background: color-mix(in srgb, var(--color-primary) 20%, transparent);
		color: var(--color-primary);
		border-color: var(--color-primary);
	}

	:global(.category-badge.average) {
		background: color-mix(in srgb, var(--color-warning) 20%, transparent);
		color: var(--color-warning);
		border-color: var(--color-warning);
	}

	:global(.category-badge.obese) {
		background: color-mix(in srgb, var(--color-danger) 20%, transparent);
		color: var(--color-danger);
		border-color: var(--color-danger);
	}

	/* Full width height inputs */
	.full-width {
		width: 100%;
	}

	.height-inputs .full-width {
		flex: 1;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		.height-inputs {
			grid-template-columns: 1fr;
		}
	}
</style>
