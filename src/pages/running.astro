---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import InputGroup from "../components/InputGroup.astro";
---

<Layout
	title="Running Pace Calculator - Potato Hack Fitness Calculators"
	description="Calculate race finish times based on your running pace. Interactive pace slider for 5K, 10K, half marathon, and full marathon distances."
	image="/og-running.png"
	imageAlt="Running Pace Calculator - Calculate Race Finish Times"
	canonical="/running"
>
	<CalculatorLayout
		title="Running Pace Calculator"
		description="See your finish times for different race distances based on your pace per mile"
	>
		<div slot="inputs">
			<InputGroup label="Pace per Mile">
				<PrecisionRangeSlider
					id="pace-slider"
					min={240}
					max={1440}
					step={5}
					value={490}
					unit="min/mi"
					sharedKey="runningPace"
					formatAsPace={true}
				/>
				<div class="pace-range">
					<span class="range-label">4:00 (Fast)</span>
					<span class="range-label">24:00 (Slow)</span>
				</div>
			</InputGroup>

			<div class="pace-category-section">
				<div class="pace-value">
					<span id="pace-category">Recreational</span>
				</div>
				<div class="pace-description">
					<span id="pace-description">A comfortable pace for most recreational runners</span>
				</div>
			</div>
		</div>

		<div slot="results">
			<div class="race-times">
				<div class="race-card">
					<h3>5K</h3>
					<div class="distance">3.11 miles</div>
					<div class="finish-time" id="time-5k">24:52</div>
				</div>

				<div class="race-card">
					<h3>10K</h3>
					<div class="distance">6.21 miles</div>
					<div class="finish-time" id="time-10k">49:41</div>
				</div>

				<div class="race-card">
					<h3>Half Marathon</h3>
					<div class="distance">13.11 miles</div>
					<div class="finish-time" id="time-half">1:44:53</div>
				</div>

				<div class="race-card">
					<h3>Full Marathon</h3>
					<div class="distance">26.22 miles</div>
					<div class="finish-time" id="time-full">3:29:46</div>
				</div>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Race distances in miles
	const DISTANCES = {
		"5k": 3.10686,
		"10k": 6.21371,
		half: 13.1094,
		full: 26.2188,
	};

	// Pace categories with descriptions
	const PACE_CATEGORIES = [
		{ max: 300, name: "Elite", description: "World-class competitive pace", color: "#d4af37" },
		{
			max: 360,
			name: "Sub-Elite",
			description: "Highly competitive racing pace",
			color: "#c0392b",
		},
		{
			max: 420,
			name: "Competitive",
			description: "Strong competitive runner pace",
			color: "#e74c3c",
		},
		{ max: 480, name: "Advanced", description: "Experienced runner pace", color: "#f39c12" },
		{
			max: 540,
			name: "Intermediate",
			description: "Regular training runner pace",
			color: "#27ae60",
		},
		{
			max: 600,
			name: "Recreational",
			description: "Comfortable recreational pace",
			color: "#3498db",
		},
		{
			max: 720,
			name: "Beginner",
			description: "New runner or easy training pace",
			color: "#9b59b6",
		},
		{
			max: 900,
			name: "Walking/Jogging",
			description: "Walk-jog combination pace",
			color: "#95a5a6",
		},
		{
			max: 1440,
			name: "Walking",
			description: "Brisk to moderate walking pace",
			color: "#7f8c8d",
		},
	];

	function formatTime(totalSeconds: number) {
		const hours = Math.floor(totalSeconds / 3600);
		const minutes = Math.floor((totalSeconds % 3600) / 60);
		const seconds = Math.round(totalSeconds % 60);

		if (hours > 0) {
			return `${hours}:${minutes.toString().padStart(2, "0")}:${seconds.toString().padStart(2, "0")}`;
		} else {
			return `${minutes}:${seconds.toString().padStart(2, "0")}`;
		}
	}

	function formatPace(totalSeconds: number) {
		const minutes = Math.floor(totalSeconds / 60);
		const seconds = Math.round(totalSeconds % 60);
		return `${minutes}:${seconds.toString().padStart(2, "0")}`;
	}
	function calculateRaceTimes(paceSeconds: number) {
		const times: Record<string, number> = {
			"5k": 0,
			"10k": 0,
			half: 0,
			full: 0,
		};
		for (const [race, distance] of Object.entries(DISTANCES)) {
			times[race] = distance * paceSeconds;
		}
		return times;
	}

	function getPaceCategory(paceSeconds: number) {
		for (const category of PACE_CATEGORIES) {
			if (paceSeconds <= category.max) {
				return category;
			}
		}
		return PACE_CATEGORIES[PACE_CATEGORIES.length - 1];
	}
	// Initialize calculator
	document.addEventListener("DOMContentLoaded", function () {
		console.log("Running calculator initializing...");

		// Initialize ReactiveSharedValues
		const sharedValues = new (window as any).ReactiveSharedValues();

		function savePaceValue(paceSeconds: number) {
			// Use ReactiveSharedValues for persistence and cross-calculator integration
			sharedValues.set("runningPace", paceSeconds);
		}

		function loadPaceValue() {
			// Load from ReactiveSharedValues
			return sharedValues.get("runningPace") || 490; // Default to 8:10 (490 seconds)
		}

		function updateCalculations() {
			console.log("updateCalculations called");

			// Read pace from the slider - use PrecisionRangeSlider selector
			const paceSlider = document.getElementById("pace-slider") as HTMLInputElement;
			if (!paceSlider) {
				console.log("Could not find pace slider");
				return;
			}

			const paceSeconds = parseInt(paceSlider.value);
			console.log("Current pace value:", paceSeconds);

			// Calculate and display race times
			const raceTimes = calculateRaceTimes(paceSeconds);
			console.log("Calculated race times:", raceTimes);

			const time5k = document.getElementById("time-5k");
			console.log("5K element found:", !!time5k);
			if (time5k) time5k.textContent = formatTime(raceTimes["5k"]);

			const time10k = document.getElementById("time-10k");
			console.log("10K element found:", !!time10k);
			if (time10k) time10k.textContent = formatTime(raceTimes["10k"]);

			const timeHalf = document.getElementById("time-half");
			console.log("Half element found:", !!timeHalf);
			if (timeHalf) timeHalf.textContent = formatTime(raceTimes["half"]);

			const timeFull = document.getElementById("time-full");
			console.log("Full element found:", !!timeFull);
			if (timeFull) timeFull.textContent = formatTime(raceTimes["full"]);

			// Update pace category
			const category = getPaceCategory(paceSeconds);
			console.log("Pace category:", category);
			const categoryElement = document.getElementById("pace-category");
			const descriptionElement = document.getElementById("pace-description");

			console.log("Category element found:", !!categoryElement);
			console.log("Description element found:", !!descriptionElement);

			if (categoryElement) {
				categoryElement.textContent = category.name;
				categoryElement.style.backgroundColor = category.color;
				console.log("Updated category to:", category.name, "with color:", category.color);
			}

			if (descriptionElement) {
				descriptionElement.textContent = category.description;
				console.log("Updated description to:", category.description);
			}

			// Save the pace value using ReactiveSharedValues
			savePaceValue(paceSeconds);
			console.log("Updated calculations complete");
		}

		// Load saved pace value or use default (8:10 = 490 seconds)
		const savedPaceSeconds = loadPaceValue();
		console.log("Loaded pace:", savedPaceSeconds);

		// Function to handle any pace change
		function handlePaceChange() {
			console.log("Handle pace change called");
			updateCalculations();
		}

		// Listen for precision range slider changes
		document.addEventListener("precision-range-change", (event) => {
			const customEvent = event as CustomEvent;
			const sharedKey = customEvent.detail.sharedKey;
			const value = customEvent.detail.value;

			console.log(`Precision range change for ${sharedKey}, value: ${value}`);

			if (sharedKey === "runningPace") {
				console.log(`Updating running pace to: ${value} seconds`);
				updateCalculations();
			}
		});

		// Wait for components to load, then set up everything
		setTimeout(() => {
			console.log("Setting up slider...");

			const paceSlider = document.getElementById("pace-slider") as HTMLInputElement;
			if (paceSlider) {
				// Set initial value from SharedValues
				paceSlider.value = savedPaceSeconds.toString();
				console.log("Set slider value to:", savedPaceSeconds);

				// Add multiple event listeners to catch any change
				paceSlider.addEventListener("input", handlePaceChange);
				paceSlider.addEventListener("change", handlePaceChange);

				console.log("Added event listeners to slider");
			} else {
				console.log("ERROR: Pace slider not found!");
			}

			// Trigger initial calculation
			console.log("Triggering initial calculation...");
			updateCalculations();
		}, 200);
	});
</script>

<style>
	.pace-range {
		display: flex;
		justify-content: space-between;
		margin-top: 0.5rem;
	}
	.range-label {
		color: var(--color-text-muted);
		font-size: 0.875rem;
		font-weight: 500;
	}

	.pace-category-section {
		margin-top: 2rem;
		text-align: center;
	}

	.pace-value {
		margin-bottom: 1rem;
	}

	.pace-value span {
		font-size: 1.5rem;
		font-weight: 700;
		color: white;
		padding: 0.75rem 1.5rem;
		border-radius: var(--border-radius);
		background: var(--color-primary);
		display: inline-block;
	}

	.pace-description {
		color: var(--color-text-muted);
		font-size: 1rem;
		font-weight: 500;
	}

	/* Results */
	.calculator-results {
		display: flex;
		flex-direction: column;
	}

	.race-times {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		display: grid;
		grid-template-columns: repeat(2, 1fr);
		gap: 1.5rem;
	}

	@media (max-width: 480px) {
		.race-times {
			grid-template-columns: 1fr;
		}
	}

	.race-card {
		text-align: center;
		padding: 1.5rem;
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		transition: all 0.1s ease;
	}

	.race-card:hover {
		transform: translate(-2px, -2px);
		box-shadow: var(--shadow-md);
	}

	.race-card h3 {
		color: var(--color-primary);
		font-size: 1.25rem;
		font-weight: 700;
		margin-bottom: 0.5rem;
		text-transform: uppercase;
		letter-spacing: 1px;
	}

	.distance {
		color: var(--color-text-muted);
		font-size: 0.875rem;
		font-weight: 500;
		margin-bottom: 0.75rem;
	}

	.finish-time {
		color: var(--color-text);
		font-size: 1.5rem;
		font-weight: 800;
		font-family: "JetBrains Mono", monospace;
	}

	/* Dark mode adjustments */
	[data-theme="dark"] .race-card {
		background: var(--color-surface);
	}

	/* Hide number input between + and - buttons on running page */
	:global(.precision-controls .precision-number-input) {
		display: none !important;
	}

	/* Alternative selector in case the above doesn't work */
	:global(input.precision-number-input) {
		display: none !important;
	}

	/* Very specific selector for the pace slider number input */
	:global(#pace-slider-number) {
		display: none !important;
	}

	/* Align buttons to left and right when number input is hidden */
	:global(.precision-controls) {
		justify-content: space-between !important;
	}
</style>
