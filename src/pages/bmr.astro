---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import RangeSlider from "../components/RangeSlider.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import GenderToggle from "../components/GenderToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import ComparisonTable from "../components/ComparisonTable.astro";
---

<Layout
	title="BMR Calculator - Potato Hack Fitness Calculators"
	description="Calculate your Basal Metabolic Rate using all three major formulas: Mifflin-St Jeor, Harris-Benedict, and Katch-McArdle. Compare results instantly."
>
	<CalculatorLayout
		title="Complete BMR Calculator"
		description="Calculate your Basal Metabolic Rate using all three major formulas and compare results"
	>
		<div slot="inputs">
			<InputGroup label="Gender" helpText="Biological sex affects metabolic rate calculations">
				<GenderToggle activeGender="male" />
			</InputGroup>

			<InputGroup label="Age" helpText="Age impacts metabolic rate">
				<PrecisionRangeSlider id="age" min={15} max={80} value={30} unit="years" sharedKey="age" />
			</InputGroup>

			<InputGroup label="Height" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "ft/in" },
						{ value: "metric", label: "cm" },
					]}
					activeValue="imperial"
					dataAttribute="height-unit"
				/>
			</InputGroup>

			<div class="height-inputs imperial-height" data-unit-group="imperial">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-total-inches"
						min={48}
						max={84}
						step={0.5}
						value={68}
						unit=""
						sharedKey="heightTotalInches"
						formatAsHeight={true}
					/>
				</InputGroup>
			</div>

			<div class="height-inputs metric-height" data-unit-group="metric" style="display: none;">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-cm"
						min={120}
						max={220}
						value={173}
						unit="cm"
						sharedKey="heightCm"
					/>
				</InputGroup>
			</div>

			<InputGroup label="Weight" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "lbs" },
						{ value: "metric", label: "kg" },
					]}
					activeValue="imperial"
					dataAttribute="weight-unit"
				/>
			</InputGroup>

			<div class="weight-inputs imperial-weight" data-unit-group="imperial">
				<InputGroup label="" helpText="">
					<PrecisionRangeSlider
						id="weight-lbs"
						min={80}
						max={400}
						value={160}
						unit="lbs"
						sharedKey="weightLbs"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-weight" data-unit-group="metric" style="display: none;">
				<InputGroup label="" helpText="">
					<PrecisionRangeSlider
						id="weight-kg"
						min={35}
						max={180}
						value={73}
						unit="kg"
						sharedKey="weightKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Body Fat Percentage"
				helpText="Optional: Required only for Katch-McArdle formula"
			>
				<PrecisionRangeSlider
					id="body-fat"
					min={5}
					max={50}
					step={0.5}
					value={15}
					unit="%"
					sharedKey="bodyFat"
				/>
			</InputGroup>

			<InputGroup label="Activity Level" helpText="Your typical weekly exercise routine">
				<div class="activity-selector">
					<button class="activity-btn active" data-multiplier="1.2">
						<strong>Sedentary</strong>
						<span>Little to no exercise</span>
					</button>
					<button class="activity-btn" data-multiplier="1.375">
						<strong>Lightly Active</strong>
						<span>Light exercise 1-3 days/week</span>
					</button>
					<button class="activity-btn" data-multiplier="1.55">
						<strong>Moderately Active</strong>
						<span>Moderate exercise 3-5 days/week</span>
					</button>
					<button class="activity-btn" data-multiplier="1.725">
						<strong>Very Active</strong>
						<span>Heavy exercise 6-7 days/week</span>
					</button>
					<button class="activity-btn" data-multiplier="1.9">
						<strong>Extremely Active</strong>
						<span>Physical job + exercise</span>
					</button>
				</div>
			</InputGroup>
		</div>

		<div slot="results">
			<ResultCard title="Mifflin-St Jeor Formula" variant="primary">
				<div class="dual-results">
					<div class="result-section">
						<div class="result-label">BMR (Resting)</div>
						<ResultValue id="mifflin-bmr" value={1685} unit="cal/day" size="lg" color="primary" />
					</div>
					<div class="result-section">
						<div class="result-label">TDEE (Total Daily)</div>
						<ResultValue id="mifflin-tdee" value={2022} unit="cal/day" size="lg" color="success" />
					</div>
				</div>
				<p class="result-description">Most accurate for general population</p>
			</ResultCard>

			<ResultCard title="Harris-Benedict Formula">
				<div class="dual-results">
					<div class="result-section">
						<div class="result-label">BMR (Resting)</div>
						<ResultValue id="harris-bmr" value={1712} unit="cal/day" size="lg" color="primary" />
					</div>
					<div class="result-section">
						<div class="result-label">TDEE (Total Daily)</div>
						<ResultValue id="harris-tdee" value={2054} unit="cal/day" size="lg" color="success" />
					</div>
				</div>
				<p class="result-description">Classic formula, slightly higher estimates</p>
			</ResultCard>

			<ResultCard title="Katch-McArdle Formula">
				<div class="dual-results">
					<div class="result-section">
						<div class="result-label">BMR (Resting)</div>
						<ResultValue id="katch-bmr" value={1798} unit="cal/day" size="lg" color="primary" />
					</div>
					<div class="result-section">
						<div class="result-label">TDEE (Total Daily)</div>
						<ResultValue id="katch-tdee" value={2158} unit="cal/day" size="lg" color="success" />
					</div>
				</div>
				<p class="result-description">Most accurate for lean/athletic individuals</p>
			</ResultCard>

			<ResultCard title="Formula Comparison">
				<ComparisonTable
					headers={["Formula", "BMR", "TDEE", "Best For"]}
					rows={[
						{
							cells: [
								"Mifflin-St Jeor",
								"<span id='comparison-mifflin-bmr'>1,685</span>",
								"<span id='comparison-mifflin-tdee'>2,022</span>",
								"General population",
							],
							highlight: true,
						},
						{
							cells: [
								"Harris-Benedict",
								"<span id='comparison-harris-bmr'>1,712</span>",
								"<span id='comparison-harris-tdee'>2,054</span>",
								"Traditional method",
							],
						},
						{
							cells: [
								"Katch-McArdle",
								"<span id='comparison-katch-bmr'>1,798</span>",
								"<span id='comparison-katch-tdee'>2,158</span>",
								"Athletic/lean body",
							],
						},
					]}
				/>
			</ResultCard>

			<ResultCard title="Understanding Your Results">
				<div class="info-sections">
					<div class="info-section">
						<h4>BMR vs TDEE</h4>
						<ul>
							<li><strong>BMR (Basal Metabolic Rate):</strong> Calories burned at complete rest</li>
							<li><strong>TDEE (Total Daily Energy Expenditure):</strong> BMR Ã— activity factor</li>
							<li><strong>For weight loss:</strong> Eat below TDEE but above BMR</li>
							<li><strong>For weight gain:</strong> Eat above TDEE</li>
						</ul>
					</div>
					<div class="info-section">
						<h4>Which Formula to Use?</h4>
						<ul>
							<li><strong>Mifflin-St Jeor:</strong> Most accurate for average body composition</li>
							<li><strong>Harris-Benedict:</strong> Older formula, tends to overestimate</li>
							<li><strong>Katch-McArdle:</strong> Best if you know your body fat percentage</li>
						</ul>
					</div>
				</div>
			</ResultCard>
		</div>
	</CalculatorLayout>
</Layout>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// BMR Calculator - Refactored with Components
	class BMRCalculator {
		private sharedValues: any;
		private activityMultiplier: number = 1.2;

		constructor() {
			// Initialize ReactiveSharedValues system
			this.sharedValues = new (window as any).ReactiveSharedValues();

			console.log(
				"[BMR Calculator] Initializing with existing SharedValues:",
				this.sharedValues.load()
			);
			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Load current values first
			const currentValues = this.sharedValues.getAll();
			console.log("BMR Calculator - Loaded existing values:", currentValues);

			// Set default values only if they don't exist (using proper null/undefined check)
			const defaults = {
				gender: "male",
				age: 30,
				heightUnit: "imperial",
				weightUnit: "imperial",
				heightTotalInches: 68,
				heightCm: 173,
				weightLbs: 160,
				weightKg: 73,
				bodyFat: 15,
			};

			Object.entries(defaults).forEach(([key, defaultValue]) => {
				if (currentValues[key] === undefined || currentValues[key] === null) {
					console.log(`Setting default for ${key}: ${defaultValue}`);
					this.sharedValues.set(key, defaultValue);
				} else {
					console.log(`Using existing value for ${key}: ${currentValues[key]}`);
				}
			});

			// Use existing values or defaults for UI initialization
			const heightUnit = this.sharedValues.get("heightUnit") || "imperial";
			const weightUnit = this.sharedValues.get("weightUnit") || "imperial";

			// Initialize UI state with existing preferences
			this.convertAndToggleHeightUnits(heightUnit);
			this.convertAndToggleWeightUnits(weightUnit);

			// Initial calculation
			this.calculate();
		}

		private setupEventListeners(): void {
			// Listen for precision range slider changes
			document.addEventListener("precision-range-change", (event) => {
				const customEvent = event as CustomEvent;
				const sharedKey = customEvent.detail.sharedKey;
				const value = customEvent.detail.value;

				console.log(`BMR Calculator: Range change for ${sharedKey}, value: ${value}`);

				// Persist the changed slider's own value first so base keys stay current
				if (sharedKey) {
					this.sharedValues.set(sharedKey, value);
				}

				// Bidirectional unit sync for height
				if (sharedKey === "heightTotalInches") {
					const cm = Math.round(value * 2.54);
					console.log(`Syncing height: ${value} inches = ${cm} cm`);
					this.sharedValues.set("heightCm", cm);
				} else if (sharedKey === "heightCm") {
					const totalInches = Math.round((value / 2.54) * 2) / 2;
					console.log(`Syncing height: ${value} cm = ${totalInches} inches`);
					this.sharedValues.set("heightTotalInches", totalInches);
				}
				// Bidirectional unit sync for weight
				else if (sharedKey === "weightLbs") {
					const kg = Math.round(value * 0.453592 * 10) / 10;
					console.log(`Syncing weight: ${value} lbs = ${kg} kg`);
					this.sharedValues.set("weightKg", kg);
				} else if (sharedKey === "weightKg") {
					const lbs = Math.round(value / 0.453592);
					console.log(`Syncing weight: ${value} kg = ${lbs} lbs`);
					this.sharedValues.set("weightLbs", lbs);
				}

				this.calculate();
			});

			document.addEventListener("gender-toggle-change", () => {
				this.calculate();
			});

			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				console.log("BMR Unit change event received:", customEvent.detail);

				if (customEvent.detail.attribute === "height-unit") {
					console.log("Updating height unit to:", customEvent.detail.value);
					this.sharedValues.set("heightUnit", customEvent.detail.value);

					// Use ReactiveSharedValues sync method for proper conversion
					if (customEvent.detail.value === "metric") {
						this.sharedValues.syncHeightUnits("metric");
					} else {
						this.sharedValues.syncHeightUnits("imperial");
					}

					this.convertAndToggleHeightUnits(customEvent.detail.value);
				} else if (customEvent.detail.attribute === "weight-unit") {
					console.log("Updating weight unit to:", customEvent.detail.value);

					// Debug current values before unit change
					console.log("Current weight values before unit change:", {
						weightLbs: this.sharedValues.get("weightLbs"),
						weightKg: this.sharedValues.get("weightKg"),
						weightUnit: this.sharedValues.get("weightUnit"),
					});

					this.sharedValues.set("weightUnit", customEvent.detail.value);

					// Use ReactiveSharedValues sync method for proper conversion
					if (customEvent.detail.value === "metric") {
						this.sharedValues.syncWeightUnits("metric");
					} else {
						this.sharedValues.syncWeightUnits("imperial");
					}

					// Debug values after sync
					console.log("Weight values after sync:", {
						weightLbs: this.sharedValues.get("weightLbs"),
						weightKg: this.sharedValues.get("weightKg"),
						weightUnit: this.sharedValues.get("weightUnit"),
					});

					this.convertAndToggleWeightUnits(customEvent.detail.value);
				}
				this.calculate();
			});

			// Activity level buttons
			document.querySelectorAll(".activity-btn").forEach((btn) => {
				btn.addEventListener("click", (e) => {
					e.preventDefault();
					this.handleActivityChange(btn as HTMLElement);
				});
			});
		}

		private convertAndToggleHeightUnits(unit: string): void {
			const imperialGroup = document.querySelector(".imperial-height") as HTMLElement;
			const metricGroup = document.querySelector(".metric-height") as HTMLElement;

			console.log(`Converting height units to: ${unit}`);

			if (imperialGroup && metricGroup) {
				if (unit === "imperial") {
					// Show imperial, hide metric
					imperialGroup.style.display = "block";
					metricGroup.style.display = "none";

					// Force reload the imperial height slider from shared values
					const imperialSlider = imperialGroup.querySelector(
						'input[type="range"]'
					) as HTMLInputElement;
					if (imperialSlider) {
						const heightTotalInches = this.sharedValues.get("heightTotalInches") || 68;
						console.log(`Setting imperial height slider to: ${heightTotalInches} inches`);
						imperialSlider.value = heightTotalInches.toString();
						// Trigger an input event to update the display
						imperialSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				} else {
					// Show metric, hide imperial
					imperialGroup.style.display = "none";
					metricGroup.style.display = "block";

					// Force reload the metric height slider from shared values
					const metricSlider = metricGroup.querySelector('input[type="range"]') as HTMLInputElement;
					if (metricSlider) {
						const heightCm = this.sharedValues.get("heightCm") || 173;
						console.log(`Setting metric height slider to: ${heightCm} cm`);
						metricSlider.value = heightCm.toString();
						// Trigger an input event to update the display
						metricSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				}
				// ReactiveSharedValues sync methods handle the actual conversion
			}
		}

		private convertAndToggleWeightUnits(unit: string): void {
			const imperialGroup = document.querySelector(".imperial-weight") as HTMLElement;
			const metricGroup = document.querySelector(".metric-weight") as HTMLElement;

			console.log(`Converting weight units to: ${unit}`);

			if (imperialGroup && metricGroup) {
				if (unit === "imperial") {
					// Show imperial, hide metric
					imperialGroup.style.display = "block";
					metricGroup.style.display = "none";

					// Force reload the imperial weight slider from shared values
					const imperialSlider = imperialGroup.querySelector(
						'input[type="range"]'
					) as HTMLInputElement;
					if (imperialSlider) {
						const weightLbs = this.sharedValues.get("weightLbs") || 160;
						console.log(`Setting imperial weight slider to: ${weightLbs} lbs`);
						imperialSlider.value = weightLbs.toString();
						// Trigger an input event to update the display
						imperialSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				} else {
					// Show metric, hide imperial
					imperialGroup.style.display = "none";
					metricGroup.style.display = "block";

					// Force reload the metric weight slider from shared values
					const metricSlider = metricGroup.querySelector('input[type="range"]') as HTMLInputElement;
					if (metricSlider) {
						const weightKg = this.sharedValues.get("weightKg") || 73;
						console.log(`Setting metric weight slider to: ${weightKg} kg`);
						metricSlider.value = weightKg.toString();
						// Trigger an input event to update the display
						metricSlider.dispatchEvent(new Event("input", { bubbles: true }));
					}
				}
				// ReactiveSharedValues sync methods handle the actual conversion
			}
		}

		private handleActivityChange(clickedBtn: HTMLElement): void {
			// Remove active class from all buttons
			document.querySelectorAll(".activity-btn").forEach((btn) => {
				btn.classList.remove("active");
			});

			// Add active class to clicked button
			clickedBtn.classList.add("active");

			// Get multiplier
			this.activityMultiplier = parseFloat(clickedBtn.getAttribute("data-multiplier") || "1.2");

			// Recalculate
			this.calculate();
		}

		private calculate(): void {
			try {
				const gender = this.sharedValues.get("gender") || "male";
				const age = this.sharedValues.get("age") || 30;
				const bodyFat = this.sharedValues.get("bodyFat") || 15;

				// Get height in cm
				let heightCm: number;
				const heightUnit = this.sharedValues.get("heightUnit") || "imperial";
				if (heightUnit === "imperial") {
					const totalInches = this.sharedValues.get("heightTotalInches") || 68;
					heightCm = totalInches * 2.54;
				} else {
					heightCm = this.sharedValues.get("heightCm") || 173;
				}

				// Get weight in kg
				let weightKg: number;
				const weightUnit = this.sharedValues.get("weightUnit") || "imperial";
				if (weightUnit === "imperial") {
					const weightLbs = this.sharedValues.get("weightLbs") || 160;
					weightKg = weightLbs * 0.453592;
				} else {
					weightKg = this.sharedValues.get("weightKg") || 73;
				}

				// Calculate BMR using all three formulas
				const mifflinBMR = this.calculateMifflinStJeor(gender, age, weightKg, heightCm);
				const harrisBMR = this.calculateHarrisBenedict(gender, age, weightKg, heightCm);
				const katchBMR = this.calculateKatchMcArdle(weightKg, bodyFat);

				// Calculate TDEE
				const mifflinTDEE = Math.round(mifflinBMR * this.activityMultiplier);
				const harrisTDEE = Math.round(harrisBMR * this.activityMultiplier);
				const katchTDEE = Math.round(katchBMR * this.activityMultiplier);

				// Update displays
				this.updateResults(
					Math.round(mifflinBMR),
					mifflinTDEE,
					Math.round(harrisBMR),
					harrisTDEE,
					Math.round(katchBMR),
					katchTDEE
				);
			} catch (error) {
				console.error("BMR calculation error:", error);
			}
		}

		private calculateMifflinStJeor(
			gender: string,
			age: number,
			weightKg: number,
			heightCm: number
		): number {
			if (gender === "male") {
				return 10 * weightKg + 6.25 * heightCm - 5 * age + 5;
			} else {
				return 10 * weightKg + 6.25 * heightCm - 5 * age - 161;
			}
		}

		private calculateHarrisBenedict(
			gender: string,
			age: number,
			weightKg: number,
			heightCm: number
		): number {
			if (gender === "male") {
				return 88.362 + 13.397 * weightKg + 4.799 * heightCm - 5.677 * age;
			} else {
				return 447.593 + 9.247 * weightKg + 3.098 * heightCm - 4.33 * age;
			}
		}

		private calculateKatchMcArdle(weightKg: number, bodyFatPercentage: number): number {
			const leanBodyMass = weightKg * (1 - bodyFatPercentage / 100);
			return 370 + 21.6 * leanBodyMass;
		}

		private updateResults(
			mifflinBMR: number,
			mifflinTDEE: number,
			harrisBMR: number,
			harrisTDEE: number,
			katchBMR: number,
			katchTDEE: number
		): void {
			// Update individual result cards
			this.updateElement("mifflin-bmr", mifflinBMR.toLocaleString());
			this.updateElement("mifflin-tdee", mifflinTDEE.toLocaleString());
			this.updateElement("harris-bmr", harrisBMR.toLocaleString());
			this.updateElement("harris-tdee", harrisTDEE.toLocaleString());
			this.updateElement("katch-bmr", katchBMR.toLocaleString());
			this.updateElement("katch-tdee", katchTDEE.toLocaleString());

			// Update comparison table
			this.updateElement("comparison-mifflin-bmr", mifflinBMR.toLocaleString());
			this.updateElement("comparison-mifflin-tdee", mifflinTDEE.toLocaleString());
			this.updateElement("comparison-harris-bmr", harrisBMR.toLocaleString());
			this.updateElement("comparison-harris-tdee", harrisTDEE.toLocaleString());
			this.updateElement("comparison-katch-bmr", katchBMR.toLocaleString());
			this.updateElement("comparison-katch-tdee", katchTDEE.toLocaleString());
		}

		private updateElement(id: string, value: string): void {
			const element = document.getElementById(id);
			if (element) {
				element.textContent = value;
			}
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		new BMRCalculator();
	});
</script>

<style>
	/* Activity selector styles */
	.activity-selector {
		display: flex;
		flex-direction: column;
		gap: 0.5rem;
	}

	.activity-btn {
		display: flex;
		flex-direction: column;
		align-items: flex-start;
		padding: 1rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		text-align: left;
	}

	.activity-btn:hover {
		background: var(--color-bg);
		border-color: var(--color-primary);
	}

	.activity-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.activity-btn strong {
		font-size: 1rem;
		margin-bottom: 0.25rem;
	}

	.activity-btn span {
		font-size: 0.875rem;
		opacity: 0.8;
	}

	/* Dual results styling */
	.dual-results {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1.5rem;
		margin-bottom: 1rem;
	}

	.result-section {
		text-align: center;
	}

	.result-label {
		font-size: 0.875rem;
		font-weight: 600;
		color: var(--color-text-muted);
		margin-bottom: 0.5rem;
		text-transform: uppercase;
		letter-spacing: 0.05em;
	}

	.result-description {
		color: var(--color-text-muted);
		font-size: 0.875rem;
		text-align: center;
		margin: 0;
	}

	/* Unit group toggling */
	[data-unit-group] {
		transition: all 0.3s ease;
	}

	/* Full width height inputs */
	.full-width {
		width: 100%;
	}

	.height-inputs .full-width {
		flex: 1;
	}

	/* Info sections */
	.info-sections {
		display: grid;
		gap: 1.5rem;
	}

	.info-section h4 {
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
		margin-bottom: 0.75rem;
	}

	.info-section ul {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.info-section li {
		padding: 0.5rem 0;
		border-bottom: 1px solid var(--color-border);
		font-size: 0.875rem;
		line-height: 1.4;
	}

	.info-section li:last-child {
		border-bottom: none;
	}

	/* Height inputs alignment */
	.height-inputs.imperial-height {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-top: 1rem;
	}

	/* Responsive design */
	@media (max-width: 768px) {
		.dual-results {
			grid-template-columns: 1fr;
			gap: 1rem;
		}

		.height-inputs.imperial-height {
			grid-template-columns: 1fr;
		}

		.activity-btn {
			padding: 0.75rem;
		}

		.info-sections {
			gap: 1rem;
		}
	}
</style>
