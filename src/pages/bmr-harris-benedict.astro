---
// filepath: c:\_CODE\sites\cruxcalc\src\pages\bmr-harris-benedict.astro
import Layout from "../layouts/Layout.astro";
---

<Layout
	title="Harris-Benedict BMR Calculator - CruxCalc"
	description="Calculate your Basal Metabolic Rate using the Harris-Benedict formula. Get accurate daily calorie needs with activity level multipliers."
>
	<section class="calculator-page">
		<div class="container">
			<div class="calculator-header">
				<h1>Harris-Benedict BMR Calculator</h1>
				<p>
					Calculate your Basal Metabolic Rate and daily calorie needs with activity level
					adjustments
				</p>
			</div>

			<div class="calculator-layout">
				<div class="calculator-inputs">
					<div class="input-group">
						<label for="gender">Gender</label>
						<div class="gender-toggle">
							<button class="gender-btn active" data-gender="male">Male</button>
							<button class="gender-btn" data-gender="female">Female</button>
						</div>
					</div>

					<div class="input-group">
						<label for="age">Age</label>
						<div class="input-container">
							<input type="range" id="age" min="15" max="80" value="30" />
							<div class="input-display">
								<span id="age-display">30</span> years
							</div>
						</div>
					</div>

					<div class="input-group">
						<label for="height">Height</label>
						<div class="unit-toggle">
							<button class="unit-btn active" data-unit="imperial">ft/in</button>
							<button class="unit-btn" data-unit="metric">cm</button>
						</div>

						<div class="height-inputs imperial">
							<div class="input-container">
								<input type="range" id="height-feet" min="4" max="7" value="5" />
								<div class="input-display">
									<span id="height-feet-display">5</span> ft
								</div>
							</div>
							<div class="input-container">
								<input type="range" id="height-inches" min="0" max="11.5" step="0.5" value="8" />
								<div class="input-display">
									<span id="height-inches-display">8</span> in
								</div>
							</div>
						</div>

						<div class="height-inputs metric" style="display: none;">
							<div class="input-container">
								<input type="range" id="height-cm" min="120" max="220" value="173" />
								<div class="input-display">
									<span id="height-cm-display">173</span> cm
								</div>
							</div>
						</div>
					</div>

					<div class="input-group">
						<label for="weight">Weight</label>
						<div class="unit-toggle">
							<button class="unit-btn active" data-unit="imperial">lbs</button>
							<button class="unit-btn" data-unit="metric">kg</button>
						</div>

						<div class="weight-inputs imperial">
							<div class="input-container">
								<input type="range" id="weight-lbs" min="80" max="400" value="160" />
								<div class="input-display">
									<span id="weight-lbs-display">160</span> lbs
								</div>
							</div>
						</div>
						<div class="weight-inputs metric" style="display: none;">
							<div class="input-container">
								<input type="range" id="weight-kg" min="35" max="180" value="73" />
								<div class="input-display">
									<span id="weight-kg-display">73</span> kg
								</div>
							</div>						</div>
					</div>

					<div class="input-group">
						<label for="activity">Activity Level</label>
						<div class="activity-selector">
							<button class="activity-btn active" data-multiplier="1.2">
								<strong>Sedentary</strong>
								<span>Little/no exercise</span>
							</button>
							<button class="activity-btn" data-multiplier="1.375">
								<strong>Light</strong>
								<span>Light exercise 1-3 days/week</span>
							</button>
							<button class="activity-btn" data-multiplier="1.55">
								<strong>Moderate</strong>
								<span>Moderate exercise 3-5 days/week</span>
							</button>
							<button class="activity-btn" data-multiplier="1.725">
								<strong>Very Active</strong>
								<span>Hard exercise 6-7 days/week</span>
							</button>
							<button class="activity-btn" data-multiplier="1.9">
								<strong>Extremely Active</strong>
								<span>Very hard exercise, physical job</span>
							</button>
						</div>
					</div>
				</div>
				<div class="calculator-results">

					<div class="result-display">
						<div class="bmr-value">
							<span id="bmr-number">1654</span>
							<span class="bmr-unit">BMR</span>
						</div>
						<div class="bmr-subtitle">Calories per day at rest</div>
					</div>

					<div class="tdee-display">
						<div class="tdee-value">
							<span id="tdee-number">1985</span>
							<span class="tdee-unit">TDEE</span>
						</div>
						<div class="tdee-subtitle">Total Daily Energy Expenditure</div>
					</div>

					<div class="bmr-info">
						<h3>About Harris-Benedict Formula</h3>
						<p id="bmr-explanation">
							The Harris-Benedict formula calculates your BMR based on gender, age, height, and
							weight. Your TDEE accounts for daily activity level.
						</p>

						<div class="formula-display">
							<h4>Formula Used:</h4>
							<div id="formula-text">
								<strong>Male:</strong> BMR = 88.362 + (13.397 × weight) + (4.799 × height) - (5.677 ×
								age)
							</div>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>

<style>
	.calculator-page {
		padding: 2rem 0 4rem 0;
	}

	.calculator-header {
		text-align: center;
		margin-bottom: 3rem;
	}
	.calculator-header h1 {
		color: var(--color-primary);
		margin-bottom: 0.5rem;
		font-size: 2.5rem;
		font-weight: 700;
	}

	.calculator-header p {
		color: var(--color-text-muted);
		font-size: 1.125rem;
	}

	.calculator-layout {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 3rem;
		max-width: 1200px;
		margin: 0 auto;
	}
	.calculator-inputs {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		height: fit-content;
	}

	.input-group {
		margin-bottom: 2rem;
	}

	.input-group:last-child {
		margin-bottom: 0;
	}

	.input-group label {
		display: block;
		font-weight: 600;
		margin-bottom: 0.75rem;
		color: var(--color-text);
	}

	/* Gender Toggle */
	.gender-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.gender-btn {
		flex: 1;
		padding: 0.75rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
	}

	.gender-btn:hover {
		border-color: var(--color-primary);
	}

	.gender-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	/* Input Controls */
	.input-container {
		margin-bottom: 1rem;
	}

	.input-container:last-child {
		margin-bottom: 0;
	}

	.height-inputs {
		display: flex;
		gap: 1rem;
	}

	.height-inputs.metric {
		display: block;
	}

	.input-display {
		text-align: center;
		font-weight: 600;
		color: var(--color-primary);
		margin-top: 0.5rem;
		font-size: 1.125rem;
	}

	input[type="range"] {
		width: 100%;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
	}

	input[type="range"]::-webkit-slider-thumb {
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	input[type="range"]::-moz-range-thumb {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		border: none;
		box-shadow: var(--shadow-sm);	} 

	/* Activity Selector */
	.activity-selector {
		display: flex;
		flex-direction: column;
		gap: 0.75rem;
	}

	.activity-btn {
		display: flex;
		flex-direction: column;
		gap: 0.25rem;
		padding: 1rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		cursor: pointer;
		transition: all 0.2s ease;
		background: var(--color-background);
		text-align: left;
		width: 100%;
	}

	.activity-btn:hover {
		border-color: var(--color-primary);
		background: var(--color-surface);
	}

	.activity-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.activity-btn strong {
		color: var(--color-text);
		font-weight: 600;
	}

	.activity-btn.active strong {
		color: white;
	}

	.activity-btn span {
		color: var(--color-text-muted);
		font-size: 0.875rem;
	}

	.activity-btn.active span {
		color: rgba(255, 255, 255, 0.8);
	}
	}

	.activity-btn.active span {
		color: rgba(255, 255, 255, 0.8);
	}

	/* Results */
	.calculator-results {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.result-display,
	.tdee-display {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		text-align: center;
	}

	.bmr-value,
	.tdee-value {
		margin-bottom: 1rem;
	}

	.bmr-value span:first-child,
	.tdee-value span:first-child {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--color-primary);
		display: block;
		line-height: 1;
	}

	.bmr-unit,
	.tdee-unit {
		color: var(--color-text-muted);
		font-size: 1rem;
		font-weight: 500;
	}

	.bmr-subtitle,
	.tdee-subtitle {
		color: var(--color-text-muted);
		margin: 0;
		font-size: 0.875rem;
	}

	.bmr-info {
		background: var(--color-background);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 1.5rem;
	}

	.bmr-info h3 {
		margin: 0 0 0.75rem 0;
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
	}

	.bmr-info p {
		margin: 0 0 0.5rem 0;
		color: var(--color-text-muted);
		font-size: 0.875rem;
		line-height: 1.5;
	}

	.formula-display {
		margin-top: 1rem;
	}

	.formula-display h4 {
		margin: 0 0 0.5rem 0;
		color: var(--color-text);
		font-size: 0.875rem;
		font-weight: 600;
	}

	.formula-display div {
		font-family: "Courier New", monospace;
		color: var(--color-text-muted);
		font-size: 0.75rem;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 0.75rem;
	}

	.bmr-info p {
		font-weight: 700;
		line-height: 1.5;
		margin-bottom: 0;
	}

	.formula-display {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1rem;
		box-shadow: var(--shadow-sm);
	}

	#formula-text {
		font-family: inherit;
		font-size: var(--font-size-sm);
		font-weight: 700;
		line-height: 1.4;
	}

	@media (max-width: 768px) {
		.calculator-layout {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.calculator-header h1 {
			font-size: 2rem;
		}

		.height-inputs {
			flex-direction: column;
			gap: 1rem;
		}

		.bmr-value span:first-child,
		.tdee-value span:first-child {
			font-size: 2rem;
		}
	}
</style>

<script type="module">
	import sharedValues from "/sharedValues.js";

	// Load shared values on page load
	const values = sharedValues.load();
	let currentGender = values.gender;
	let currentHeightUnit = values.heightUnit;
	let currentWeightUnit = values.weightUnit;
	let currentActivityMultiplier = 1.2;

	// Get DOM elements
	const age = document.getElementById("age");
	const heightFeet = document.getElementById("height-feet");
	const heightInches = document.getElementById("height-inches");
	const heightCm = document.getElementById("height-cm");
	const weightLbs = document.getElementById("weight-lbs");
	const weightKg = document.getElementById("weight-kg");

	const ageDisplay = document.getElementById("age-display");
	const heightFeetDisplay = document.getElementById("height-feet-display");
	const heightInchesDisplay = document.getElementById("height-inches-display");
	const heightCmDisplay = document.getElementById("height-cm-display");
	const weightLbsDisplay = document.getElementById("weight-lbs-display");
	const weightKgDisplay = document.getElementById("weight-kg-display");

	const bmrNumber = document.getElementById("bmr-number");
	const tdeeNumber = document.getElementById("tdee-number");
	const formulaText = document.getElementById("formula-text");

	// Initialize inputs with shared values
	function initializeInputs() {
		if (age) age.value = values.age.toString();
		if (heightFeet) heightFeet.value = values.heightFeet.toString();
		if (heightInches) heightInches.value = values.heightInches.toString();
		if (heightCm) heightCm.value = values.heightCm.toString();
		if (weightLbs) weightLbs.value = values.weightLbs.toString();
		if (weightKg) weightKg.value = values.weightKg.toString();

		// Set gender toggle to match saved preference
		document.querySelectorAll(".gender-btn").forEach((btn) => {
			btn.classList.remove("active");
			if (btn.dataset.gender === currentGender) {
				btn.classList.add("active");
			}
		});

		// Set unit toggles to match saved preferences
		document.querySelectorAll(".unit-toggle").forEach((toggle) => {
			const isHeightToggle =
				toggle.closest(".input-group")?.querySelector("label")?.textContent?.toLowerCase() ===
				"height";
			const targetUnit = isHeightToggle ? currentHeightUnit : currentWeightUnit;

			toggle.querySelectorAll(".unit-btn").forEach((btn) => {
				btn.classList.remove("active");
				if (btn.dataset.unit === targetUnit) {
					btn.classList.add("active");
				}
			});

			// Show/hide appropriate inputs
			const inputGroup = toggle.closest(".input-group");
			if (isHeightToggle) {
				inputGroup?.querySelectorAll(".height-inputs").forEach((input) => {
					input.style.display = input.classList.contains(targetUnit) ? "flex" : "none";
				});
			} else {
				inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
					input.style.display = input.classList.contains(targetUnit) ? "block" : "none";
				});
			}
		});
	}

	// Save current values to shared storage
	function saveCurrentValues() {
		const currentValues = {
			age: parseInt(age?.value || "30"),
			heightFeet: parseInt(heightFeet?.value || "5"),
			heightInches: parseFloat(heightInches?.value || "8"),
			heightCm: parseInt(heightCm?.value || "173"),
			weightLbs: parseInt(weightLbs?.value || "160"),
			weightKg: parseInt(weightKg?.value || "73"),
			heightUnit: currentHeightUnit,
			weightUnit: currentWeightUnit,
			gender: currentGender,
		};
		sharedValues.update(currentValues);
	}
	function calculateBMR() {
		let heightInCm, weightInKg;
		const ageValue = parseInt(age?.value || "30");

		// Convert height to cm
		if (currentHeightUnit === "imperial") {
			const feet = parseInt(heightFeet?.value || "5");
			const inches = parseFloat(heightInches?.value || "8");
			const totalInches = feet * 12 + inches;
			heightInCm = totalInches * 2.54;
		} else {
			heightInCm = parseInt(heightCm?.value || "173");
		}

		// Convert weight to kg
		if (currentWeightUnit === "imperial") {
			weightInKg = parseInt(weightLbs?.value || "160") * 0.453592;
		} else {
			weightInKg = parseInt(weightKg?.value || "73");
		}

		// Harris-Benedict formula
		let bmr;
		if (currentGender === "male") {
			bmr = 88.362 + 13.397 * weightInKg + 4.799 * heightInCm - 5.677 * ageValue;
		} else {
			bmr = 447.593 + 9.247 * weightInKg + 3.098 * heightInCm - 4.33 * ageValue;
		}

		return bmr;
	}

	function updateBMRDisplay() {
		const bmr = calculateBMR();
		const tdee = bmr * currentActivityMultiplier;

		if (bmrNumber) bmrNumber.textContent = Math.round(bmr).toString();
		if (tdeeNumber) tdeeNumber.textContent = Math.round(tdee).toString();

		// Update formula display
		if (formulaText) {
			if (currentGender === "male") {
				formulaText.innerHTML =
					"<strong>Male:</strong> BMR = 88.362 + (13.397 × weight) + (4.799 × height) - (5.677 × age)";
			} else {
				formulaText.innerHTML =
					"<strong>Female:</strong> BMR = 447.593 + (9.247 × weight) + (3.098 × height) - (4.330 × age)";
			}
		}

		// Save values after calculation
		saveCurrentValues();
	}

	function updateDisplays() {
		if (ageDisplay && age) ageDisplay.textContent = age.value;
		if (heightFeetDisplay && heightFeet) heightFeetDisplay.textContent = heightFeet.value;
		if (heightInchesDisplay && heightInches) heightInchesDisplay.textContent = heightInches.value;
		if (heightCmDisplay && heightCm) heightCmDisplay.textContent = heightCm.value;
		if (weightLbsDisplay && weightLbs) weightLbsDisplay.textContent = weightLbs.value;
		if (weightKgDisplay && weightKg) weightKgDisplay.textContent = weightKg.value;
	}

	// Debounced calculation
	let calculationTimeout;
	function debouncedCalculation() {
		clearTimeout(calculationTimeout);
		calculationTimeout = setTimeout(updateBMRDisplay, 100);
	}

	// Event listeners for sliders
	[age, heightFeet, heightInches, heightCm, weightLbs, weightKg].forEach((slider) => {
		if (slider) {
			slider.addEventListener("input", () => {
				updateDisplays();
				debouncedCalculation();
			});
		}
	});

	// Gender toggle functionality
	document.querySelectorAll(".gender-toggle .gender-btn").forEach((btn) => {
		btn.addEventListener("click", (e) => {
			const target = e.target;
			const gender = target.dataset.gender;

			if (gender) {
				currentGender = gender;

				// Update active state
				document.querySelectorAll(".gender-btn").forEach((b) => b.classList.remove("active"));
				target.classList.add("active");

				debouncedCalculation();
			}
		});
	});

	// Unit toggle functionality
	document.querySelectorAll(".unit-toggle").forEach((toggle) => {
		toggle.addEventListener("click", (e) => {
			const target = e.target;
			if (!target?.classList.contains("unit-btn")) return;

			const unitType = target
				.closest(".input-group")
				?.querySelector("label")
				?.textContent?.toLowerCase();
			const unit = target.dataset.unit;

			// Update active state
			toggle.querySelectorAll(".unit-btn").forEach((btn) => btn.classList.remove("active"));
			target.classList.add("active");

			// Show/hide appropriate inputs
			const inputGroup = target.closest(".input-group");
			if (unitType === "height") {
				currentHeightUnit = unit || "imperial";
				sharedValues.syncHeightUnits(currentHeightUnit);
				inputGroup?.querySelectorAll(".height-inputs").forEach((input) => {
					input.style.display = input.classList.contains(unit || "imperial") ? "flex" : "none";
				});
			} else {
				currentWeightUnit = unit || "imperial";
				sharedValues.syncWeightUnits(currentWeightUnit);
				inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
					input.style.display = input.classList.contains(unit || "imperial") ? "block" : "none";
				});
			}

			// Update sliders with converted values after unit change
			const updatedValues = sharedValues.load();
			if (heightFeet) heightFeet.value = updatedValues.heightFeet.toString();
			if (heightInches) heightInches.value = updatedValues.heightInches.toString();
			if (heightCm) heightCm.value = updatedValues.heightCm.toString();
			if (weightLbs) weightLbs.value = updatedValues.weightLbs.toString();
			if (weightKg) weightKg.value = updatedValues.weightKg.toString();

			updateDisplays();
			debouncedCalculation();
		});
	});
	// Activity level functionality
	document.querySelectorAll(".activity-btn").forEach((btn) => {
		btn.addEventListener("click", (e) => {
			const target = e.currentTarget; // Use currentTarget instead of target to get the button element
			const multiplier = target.dataset.multiplier;

			if (multiplier) {
				currentActivityMultiplier = parseFloat(multiplier);

				// Update active state
				document.querySelectorAll(".activity-btn").forEach((b) => b.classList.remove("active"));
				target.classList.add("active");

				debouncedCalculation();
			}
		});
	});

	// Initialize the calculator
	initializeInputs();
	updateDisplays();
	updateBMRDisplay();
</script>
