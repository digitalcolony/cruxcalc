---
import Layout from "../layouts/Layout.astro";
---

<Layout
	title="BMI Calculator - Potato Hack Fitness Calculators"
	description="Calculate your Body Mass Index with our modern, interactive BMI calculator. Real-time results with visual indicators."
>
	<section class="calculator-page">
		<div class="container">
			<div class="calculator-header">
				<h1>BMI Calculator</h1>
				<p>Calculate your Body Mass Index with real-time visual feedback</p>
			</div>

			<div class="calculator-layout">
				<div class="calculator-inputs">
					<div class="input-group">
						<label for="height">Height</label>
						<div class="unit-toggle">
							<button class="unit-btn active" data-unit="imperial">ft/in</button>
							<button class="unit-btn" data-unit="metric">cm</button>
						</div>

						<div class="height-inputs imperial">
							<div class="input-container">
								<input type="range" id="height-feet" min="4" max="7" value="5" />
								<div class="input-display">
									<span id="height-feet-display">5</span> ft
								</div>
							</div>
							<div class="input-container">
								<input type="range" id="height-inches" min="0" max="11.5" step="0.5" value="8" />
								<div class="input-display">
									<span id="height-inches-display">8</span> in
								</div>
							</div>
						</div>

						<div class="height-inputs metric" style="display: none;">
							<div class="input-container">
								<input type="range" id="height-cm" min="120" max="220" value="173" />
								<div class="input-display">
									<span id="height-cm-display">173</span> cm
								</div>
							</div>
						</div>
					</div>

					<div class="input-group">
						<label for="weight">Weight</label>
						<div class="unit-toggle">
							<button class="unit-btn active" data-unit="imperial">lbs</button>
							<button class="unit-btn" data-unit="metric">kg</button>
						</div>

						<div class="weight-inputs imperial">
							<div class="input-container">
								<input type="range" id="weight-lbs" min="80" max="400" value="160" />
								<div class="input-display">
									<span id="weight-lbs-display">160</span> lbs
								</div>
							</div>
						</div>

						<div class="weight-inputs metric" style="display: none;">
							<div class="input-container">
								<input type="range" id="weight-kg" min="35" max="180" value="73" />
								<div class="input-display">
									<span id="weight-kg-display">73</span> kg
								</div>
							</div>
						</div>
					</div>

					<div class="input-group bmi-scale-group">
						<label>BMI Scale</label>
						<div class="checkbox-container">
							<label class="checkbox-label">
								<input type="checkbox" id="asian-scale" />
								<span class="checkbox-text">Use Asian BMI Scale</span>
							</label>
						</div>
						<p class="input-help">
							Asian populations have different BMI thresholds for health risks
						</p>
					</div>
				</div>

				<div class="calculator-results">
					<div class="result-display">
						<div class="bmi-value">
							<span id="bmi-number">22.8</span>
							<span class="bmi-unit">BMI</span>
						</div>
						<div class="bmi-category" id="bmi-category">Normal Weight</div>
					</div>

					<div class="bmi-scale">
						<div class="scale-bar">
							<div class="scale-segment underweight">
								<span>Under<br />weight</span>
							</div>
							<div class="scale-segment normal">
								<span>Normal</span>
							</div>
							<div class="scale-segment overweight">
								<span>Over<br />weight</span>
							</div>
							<div class="scale-segment obese">
								<span>Obese</span>
							</div>
						</div>
						<div class="scale-indicator" id="scale-indicator"></div>
					</div>

					<div class="bmi-info">
						<h3>Understanding Your BMI</h3>
						<p id="bmi-explanation">
							Your BMI falls within the normal weight range. This suggests a healthy weight for your
							height.
						</p>

						<div class="bmi-scales-info" id="bmi-scales-info">
							<h4>BMI Scale Comparison</h4>
							<div class="scales-comparison">
								<div class="scale-info">
									<h5>Standard BMI Scale</h5>
									<ul>
										<li>Underweight: &lt; 18.5</li>
										<li>Normal: 18.5 - 24.9</li>
										<li>Overweight: 25.0 - 29.9</li>
										<li>Obese: ≥ 30.0</li>
									</ul>
								</div>
								<div class="scale-info">
									<h5>Asian BMI Scale</h5>
									<ul>
										<li>Underweight: &lt; 18.5</li>
										<li>Normal: 18.5 - 22.9</li>
										<li>Overweight: 23.0 - 27.4</li>
										<li>Obese: ≥ 27.5</li>
									</ul>
								</div>
							</div>
							<p class="scale-note">
								<strong>Why different scales?</strong> Research shows that Asian populations have higher
								risks of diabetes and cardiovascular disease at lower BMI levels. The Asian BMI scale
								uses lower thresholds to better identify health risks in Asian populations.
							</p>
						</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>

<style>
	.calculator-page {
		padding: 2rem 0 4rem 0;
	}

	.calculator-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.calculator-header h1 {
		color: var(--color-primary);
		margin-bottom: 0.5rem;
		font-size: 2.5rem;
		font-weight: 700;
	}

	.calculator-header p {
		color: var(--color-text-muted);
		font-size: 1.125rem;
	}

	.calculator-layout {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 3rem;
		max-width: 1200px;
		margin: 0 auto;
	}

	.calculator-inputs {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		height: fit-content;
	}

	.input-group {
		margin-bottom: 2rem;
	}

	.input-group:last-child {
		margin-bottom: 0;
	}

	.input-group label {
		display: block;
		font-weight: 600;
		margin-bottom: 0.75rem;
		color: var(--color-text);
	}

	.input-help {
		margin-top: 0.5rem;
		margin-bottom: 0;
		color: var(--color-text-muted);
		font-size: 0.75rem;
		font-style: italic;
	}

	/* Checkbox styling */
	.bmi-scale-group {
		margin-top: 0.5rem;
	}

	.checkbox-container {
		margin-bottom: 0.75rem;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		cursor: pointer;
		font-weight: 500;
		margin-bottom: 0;
		padding: 0.5rem 0;
	}

	.checkbox-label input[type="checkbox"] {
		width: 20px;
		height: 20px;
		accent-color: var(--color-primary);
		cursor: pointer;
		flex-shrink: 0;
	}

	.checkbox-text {
		font-size: 1rem;
		color: var(--color-text);
		font-weight: 500;
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.height-inputs {
		display: flex;
		gap: 1rem;
	}

	.height-inputs.metric {
		display: block;
	}

	.input-container {
		margin-bottom: 1rem;
	}

	.input-container:last-child {
		margin-bottom: 0;
	}

	.input-display {
		text-align: center;
		font-weight: 600;
		color: var(--color-primary);
		margin-top: 0.5rem;
		font-size: 1.125rem;
	}

	input[type="range"] {
		width: 100%;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
	}

	input[type="range"]::-webkit-slider-thumb {
		appearance: none;
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	input[type="range"]::-moz-range-thumb {
		width: 20px;
		height: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		cursor: pointer;
		border: none;
		box-shadow: var(--shadow-sm);
	}

	/* Results */
	.calculator-results {
		display: flex;
		flex-direction: column;
		gap: 1.5rem;
	}

	.result-display {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		text-align: center;
	}

	.bmi-value {
		margin-bottom: 1rem;
	}

	.bmi-value span:first-child {
		font-size: 2.5rem;
		font-weight: 700;
		color: var(--color-primary);
		display: block;
		line-height: 1;
	}

	.bmi-unit {
		color: var(--color-text-muted);
		font-size: 1rem;
		font-weight: 500;
	}

	.bmi-category {
		font-size: 1.125rem;
		font-weight: 600;
		padding: 0.75rem 1.5rem;
		border-radius: var(--border-radius);
		background: var(--color-success);
		color: white;
		display: inline-block;
		margin-bottom: 1rem;
	}

	.bmi-scale {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		position: relative;
	}

	.scale-bar {
		display: flex;
		height: 60px;
		border-radius: var(--border-radius);
		overflow: hidden;
		margin-bottom: 1.5rem;
	}

	.scale-segment {
		flex: 1;
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		font-weight: 600;
		font-size: 0.875rem;
		text-align: center;
		position: relative;
	}

	.scale-segment.underweight {
		background: #3366ff;
	}
	.scale-segment.normal {
		background: var(--color-success);
	}
	.scale-segment.overweight {
		background: var(--color-warning);
	}
	.scale-segment.obese {
		background: var(--color-danger);
	}

	.scale-indicator {
		position: absolute;
		bottom: 1rem;
		width: 0;
		height: 0;
		border-left: 10px solid transparent;
		border-right: 10px solid transparent;
		border-bottom: 12px solid var(--color-text);
		transform: translateX(-50%);
		transition: left 0.3s ease;
	}

	.bmi-info {
		background: var(--color-background);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 1.5rem;
	}

	.bmi-info h3 {
		margin: 0 0 0.75rem 0;
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
	}

	.bmi-info p {
		margin: 0;
		color: var(--color-text-muted);
		font-size: 0.875rem;
		line-height: 1.5;
	}

	.bmi-scales-info {
		margin-top: 1.5rem;
		padding-top: 1.5rem;
		border-top: 1px solid var(--color-border);
	}

	.bmi-scales-info h4 {
		margin: 0 0 1rem 0;
		color: var(--color-text);
		font-size: 0.9rem;
		font-weight: 600;
	}

	.scales-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.scale-info h5 {
		margin: 0 0 0.5rem 0;
		color: var(--color-primary);
		font-size: 0.8rem;
		font-weight: 600;
	}

	.scale-info ul {
		margin: 0;
		padding-left: 1rem;
		list-style-type: none;
	}

	.scale-info li {
		color: var(--color-text-muted);
		font-size: 0.75rem;
		margin-bottom: 0.25rem;
		position: relative;
	}

	.scale-info li::before {
		content: "•";
		color: var(--color-primary);
		position: absolute;
		left: -0.75rem;
	}

	.scale-note {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 0.75rem;
		margin: 0;
		font-size: 0.75rem;
		line-height: 1.4;
	}

	.scale-note strong {
		color: var(--color-text);
	}

	/* Mobile Responsiveness */
	@media (max-width: 768px) {
		.calculator-layout {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.calculator-header h1 {
			font-size: 2rem;
		}

		.height-inputs {
			flex-direction: column;
			gap: 1rem;
		}

		.bmi-value span:first-child {
			font-size: 2rem;
		}

		.scales-comparison {
			grid-template-columns: 1fr;
			gap: 0.75rem;
		}

		.checkmark {
			width: 28px;
			height: 28px;
		}

		.checkbox-text {
			font-size: 0.9rem;
		}
	}
</style>

<script src="/sharedValues.js" is:inline></script>
<script>
	// @ts-nocheck - Disable TypeScript checking for this Astro component
	// Load shared values on page load
	const values = new window.SharedValues().load();
	const sharedValues = new window.SharedValues();
	let currentHeightUnit = values.heightUnit;
	let currentWeightUnit = values.weightUnit;

	// Initialize the calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		// Get DOM elements
		const asianScale = document.getElementById("asian-scale");
		const heightFeet = document.getElementById("height-feet");
		const heightInches = document.getElementById("height-inches");
		const heightCm = document.getElementById("height-cm");
		const weightLbs = document.getElementById("weight-lbs");
		const weightKg = document.getElementById("weight-kg");

		const heightFeetDisplay = document.getElementById("height-feet-display");
		const heightInchesDisplay = document.getElementById("height-inches-display");
		const heightCmDisplay = document.getElementById("height-cm-display");
		const weightLbsDisplay = document.getElementById("weight-lbs-display");
		const weightKgDisplay = document.getElementById("weight-kg-display");
		const bmiNumber = document.getElementById("bmi-number");
		const bmiCategory = document.getElementById("bmi-category");
		const bmiExplanation = document.getElementById("bmi-explanation");
		const scaleIndicator = document.getElementById("scale-indicator");

		// Initialize inputs with shared values
		function initializeInputs() {
			if (heightFeet) heightFeet.value = values.heightFeet.toString();
			if (heightInches) heightInches.value = values.heightInches.toString();
			if (heightCm) heightCm.value = values.heightCm.toString();
			if (weightLbs) weightLbs.value = values.weightLbs.toString();
			if (weightKg) weightKg.value = values.weightKg.toString();

			// Restore Asian BMI scale preference
			if (asianScale) {
				asianScale.checked = values.useAsianBMI || false;
			}

			// Set unit toggles to match saved preferences
			document.querySelectorAll(".unit-toggle").forEach((toggle) => {
				const isHeightToggle =
					toggle.closest(".input-group")?.querySelector("label")?.textContent?.toLowerCase() ===
					"height";
				const targetUnit = isHeightToggle ? currentHeightUnit : currentWeightUnit;

				toggle.querySelectorAll(".unit-btn").forEach((btn) => {
					btn.classList.remove("active");
					if (btn.dataset.unit === targetUnit) {
						btn.classList.add("active");
					}
				});

				// Show/hide appropriate inputs
				const inputGroup = toggle.closest(".input-group");
				if (isHeightToggle) {
					inputGroup?.querySelectorAll(".height-inputs").forEach((input) => {
						input.style.display = input.classList.contains(targetUnit) ? "flex" : "none";
					});
				} else {
					inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
						input.style.display = input.classList.contains(targetUnit) ? "block" : "none";
					});
				}
			});
		}

		// Save current values to shared storage
		function saveCurrentValues() {
			const currentValues = {
				heightFeet: parseInt(heightFeet?.value || "5"),
				heightInches: parseFloat(heightInches?.value || "8"),
				heightCm: parseInt(heightCm?.value || "173"),
				weightLbs: parseInt(weightLbs?.value || "160"),
				weightKg: parseInt(weightKg?.value || "73"),
				heightUnit: currentHeightUnit,
				weightUnit: currentWeightUnit,
				useAsianBMI: asianScale?.checked || false,
			};
			sharedValues.update(currentValues);
		}

		// BMI categories and explanations
		const bmiCategories = {
			standard: {
				underweight: {
					name: "Underweight",
					color: "#3366ff",
					explanation:
						"Your BMI indicates you may be underweight. Consider consulting with a healthcare provider about healthy weight gain strategies.",
				},
				normal: {
					name: "Normal Weight",
					color: "var(--color-success)",
					explanation:
						"Your BMI falls within the normal weight range. This suggests a healthy weight for your height.",
				},
				overweight: {
					name: "Overweight",
					color: "var(--color-warning)",
					explanation:
						"Your BMI indicates you may be overweight. Consider consulting with a healthcare provider about healthy weight management.",
				},
				obese: {
					name: "Obese",
					color: "var(--color-danger)",
					explanation:
						"Your BMI indicates obesity. We recommend consulting with a healthcare provider for personalized advice.",
				},
			},
			asian: {
				underweight: {
					name: "Underweight",
					color: "#3366ff",
					explanation:
						"Your BMI indicates you may be underweight. Consider consulting with a healthcare provider about healthy weight gain strategies.",
				},
				normal: {
					name: "Normal Weight",
					color: "var(--color-success)",
					explanation:
						"Your BMI falls within the normal weight range for Asian populations. This suggests a healthy weight for your height.",
				},
				overweight: {
					name: "Overweight",
					color: "var(--color-warning)",
					explanation:
						"Your BMI indicates you may be overweight according to Asian BMI standards. Consider consulting with a healthcare provider about healthy weight management.",
				},
				obese: {
					name: "Obese",
					color: "var(--color-danger)",
					explanation:
						"Your BMI indicates obesity according to Asian BMI standards. We recommend consulting with a healthcare provider for personalized advice.",
				},
			},
		};

		function getBMICategory(bmi, useAsianScale = false) {
			if (useAsianScale) {
				// Asian BMI scale thresholds
				if (bmi < 18.5) return "underweight";
				if (bmi < 23) return "normal";
				if (bmi < 27.5) return "overweight";
				return "obese";
			} else {
				// Standard BMI scale thresholds
				if (bmi < 18.5) return "underweight";
				if (bmi < 25) return "normal";
				if (bmi < 30) return "overweight";
				return "obese";
			}
		}

		function calculateBMI() {
			let heightInMeters, weightInKg;

			// Convert height to meters
			if (currentHeightUnit === "imperial") {
				const feet = parseInt(heightFeet?.value || "5");
				const inches = parseFloat(heightInches?.value || "8");
				const totalInches = feet * 12 + inches;
				heightInMeters = totalInches * 0.0254;
			} else {
				heightInMeters = parseInt(heightCm?.value || "173") / 100;
			}

			// Convert weight to kg
			if (currentWeightUnit === "imperial") {
				weightInKg = parseInt(weightLbs?.value || "160") * 0.453592;
			} else {
				weightInKg = parseInt(weightKg?.value || "73");
			}

			const bmi = weightInKg / (heightInMeters * heightInMeters);
			return bmi;
		}

		function updateBMIDisplay() {
			const bmi = calculateBMI();
			const useAsianScale = asianScale?.checked || false;
			const scaleType = useAsianScale ? "asian" : "standard";
			const category = getBMICategory(bmi, useAsianScale);
			const categoryData = bmiCategories[scaleType][category];

			if (bmiNumber) bmiNumber.textContent = bmi.toFixed(1);
			if (bmiCategory) {
				bmiCategory.textContent = categoryData.name;
				bmiCategory.style.backgroundColor = categoryData.color;
			}
			if (bmiExplanation) bmiExplanation.textContent = categoryData.explanation;

			// Update scale indicator position based on the selected scale
			let position;
			if (useAsianScale) {
				// Asian scale: underweight < 18.5, normal 18.5-22.9, overweight 23-27.4, obese ≥ 27.5
				if (bmi < 18.5) position = (bmi / 18.5) * 25;
				else if (bmi < 23) position = 25 + ((bmi - 18.5) / 4.5) * 25;
				else if (bmi < 27.5) position = 50 + ((bmi - 23) / 4.5) * 25;
				else position = 75 + Math.min(((bmi - 27.5) / 7.5) * 25, 25);
			} else {
				// Standard scale: underweight < 18.5, normal 18.5-24.9, overweight 25-29.9, obese ≥ 30
				if (bmi < 18.5) position = (bmi / 18.5) * 25;
				else if (bmi < 25) position = 25 + ((bmi - 18.5) / 6.5) * 25;
				else if (bmi < 30) position = 50 + ((bmi - 25) / 5) * 25;
				else position = 75 + Math.min(((bmi - 30) / 10) * 25, 25);
			}

			if (scaleIndicator) scaleIndicator.style.left = `${Math.min(position, 100)}%`;

			// Save values after calculation
			saveCurrentValues();
		}

		function updateDisplays() {
			if (heightFeetDisplay && heightFeet) heightFeetDisplay.textContent = heightFeet.value;
			if (heightInchesDisplay && heightInches) heightInchesDisplay.textContent = heightInches.value;
			if (heightCmDisplay && heightCm) heightCmDisplay.textContent = heightCm.value;
			if (weightLbsDisplay && weightLbs) weightLbsDisplay.textContent = weightLbs.value;
			if (weightKgDisplay && weightKg) weightKgDisplay.textContent = weightKg.value;
		}

		// Debounced calculation
		let calculationTimeout;
		function debouncedCalculation() {
			clearTimeout(calculationTimeout);
			calculationTimeout = setTimeout(updateBMIDisplay, 100);
		}

		// Event listeners for sliders
		[heightFeet, heightInches, heightCm, weightLbs, weightKg].forEach((slider) => {
			if (slider) {
				slider.addEventListener("input", () => {
					updateDisplays();
					debouncedCalculation();
				});
			}
		});

		// Event listener for Asian scale checkbox
		if (asianScale) {
			asianScale.addEventListener("change", () => {
				// Save the preference immediately when changed
				saveCurrentValues();
				debouncedCalculation();
			});
		}

		// Unit toggle functionality
		document.querySelectorAll(".unit-toggle").forEach((toggle) => {
			toggle.addEventListener("click", (e) => {
				const target = e.target;
				if (!target?.classList.contains("unit-btn")) return;

				const unitType = target
					.closest(".input-group")
					?.querySelector("label")
					?.textContent?.toLowerCase();
				const unit = target.dataset.unit;

				// Update active state
				toggle.querySelectorAll(".unit-btn").forEach((btn) => btn.classList.remove("active"));
				target.classList.add("active");

				// Show/hide appropriate inputs
				const inputGroup = target.closest(".input-group");
				if (unitType === "height") {
					currentHeightUnit = unit || "imperial";
					sharedValues.syncHeightUnits(currentHeightUnit);
					inputGroup?.querySelectorAll(".height-inputs").forEach((input) => {
						input.style.display = input.classList.contains(unit || "imperial") ? "flex" : "none";
					});
				} else {
					currentWeightUnit = unit || "imperial";
					sharedValues.syncWeightUnits(currentWeightUnit);
					inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
						input.style.display = input.classList.contains(unit || "imperial") ? "block" : "none";
					});
				}

				// Update sliders with converted values after unit change
				const updatedValues = sharedValues.load();
				if (heightFeet) heightFeet.value = updatedValues.heightFeet.toString();
				if (heightInches) heightInches.value = updatedValues.heightInches.toString();
				if (heightCm) heightCm.value = updatedValues.heightCm.toString();
				if (weightLbs) weightLbs.value = updatedValues.weightLbs.toString();
				if (weightKg) weightKg.value = updatedValues.weightKg.toString();

				updateDisplays();
				debouncedCalculation();
			});
		});

		// Initialize the calculator
		initializeInputs();
		updateDisplays();
		updateBMIDisplay();
	});
</script>
