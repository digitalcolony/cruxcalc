---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import InputGroup from "../components/InputGroup.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import CategoryBadge from "../components/CategoryBadge.astro";

// Initialize SharedValues on the server side
const sharedValues = {
	heightUnit: "imperial",
	weightUnit: "imperial",
};
---

<Layout
	title="BMI Calculator - Potato Hack Fitness Calculators"
	description="Calculate your Body Mass Index with our modern, interactive BMI calculator. Real-time results with visual indicators."
>
	<CalculatorLayout
		title="BMI Calculator"
		description="Calculate your Body Mass Index with real-time visual feedback"
	>
		<div slot="inputs">
			<InputGroup label="Height" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "ft/in" },
						{ value: "metric", label: "cm" },
					]}
					activeValue={sharedValues.heightUnit}
					dataAttribute="unit"
				/>
			</InputGroup>

			<div class="height-inputs imperial-height" data-unit-group="imperial">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-total-inches"
						label=""
						min={48}
						max={84}
						step={0.5}
						value={68}
						unit=""
						sharedKey="heightTotalInches"
						formatAsHeight={true}
					/>
				</InputGroup>
			</div>

			<div class="height-inputs metric-height" data-unit-group="metric" style="display: none;">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="height-cm"
						label=""
						min={120}
						max={220}
						step={1}
						value={173}
						unit="cm"
						sharedKey="heightCm"
					/>
				</InputGroup>
			</div>

			<InputGroup label="Weight" helpText="Choose your preferred measurement system">
				<UnitToggle
					options={[
						{ value: "imperial", label: "lbs" },
						{ value: "metric", label: "kg" },
					]}
					activeValue={sharedValues.weightUnit}
					dataAttribute="unit"
				/>
			</InputGroup>

			<div class="weight-inputs imperial-weight" data-unit-group="imperial">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="weight-lbs"
						label=""
						min={80}
						max={400}
						value={160}
						unit="lbs"
						sharedKey="weightLbs"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-weight" data-unit-group="metric" style="display: none;">
				<InputGroup label="" helpText="" class="full-width">
					<PrecisionRangeSlider
						id="weight-kg"
						label=""
						min={35}
						max={180}
						value={73}
						unit="kg"
						sharedKey="weightKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="BMI Scale"
				helpText="Asian populations have different BMI thresholds for health risks"
			>
				<div class="checkbox-container">
					<label class="checkbox-label">
						<input type="checkbox" id="asian-scale" />
						<span class="checkbox-text">Use Asian BMI Scale</span>
					</label>
				</div>
			</InputGroup>
		</div>

		<div slot="results">
			<ResultCard title="Your BMI Result" variant="primary">
				<ResultValue value={22.8} unit="BMI" size="xl" color="primary" id="bmi-number" />
				<div slot="badge">
					<CategoryBadge category="Normal Weight" class="normal" id="bmi-category" />
				</div>
			</ResultCard>

			<div class="bmi-scale">
				<div class="scale-bar">
					<div class="scale-segment underweight">
						<span>Under<br />weight</span>
					</div>
					<div class="scale-segment normal">
						<span>Normal</span>
					</div>
					<div class="scale-segment overweight">
						<span>Over<br />weight</span>
					</div>
					<div class="scale-segment obese">
						<span>Obese</span>
					</div>
					<!-- scale indicator removed - controlled indicator caused layout issues -->
				</div>
			</div>

			<ResultCard title="Understanding Your BMI">
				<p id="bmi-explanation">
					Your BMI falls within the normal weight range. This suggests a healthy weight for your
					height.
				</p>
			</ResultCard>

			<ResultCard title="BMI Scale Comparison">
				<div class="scales-comparison">
					<div class="scale-info">
						<h5>Standard BMI Scale</h5>
						<ul>
							<li>Underweight: &lt; 18.5</li>
							<li>Normal: 18.5 - 24.9</li>
							<li>Overweight: 25.0 - 29.9</li>
							<li>Obese: ≥ 30.0</li>
						</ul>
					</div>
					<div class="scale-info">
						<h5>Asian BMI Scale</h5>
						<ul>
							<li>Underweight: &lt; 18.5</li>
							<li>Normal: 18.5 - 22.9</li>
							<li>Overweight: 23.0 - 27.4</li>
							<li>Obese: ≥ 27.5</li>
						</ul>
					</div>
				</div>
			</ResultCard>
			<p class="scale-note">
				<strong>Why different scales?</strong> Research shows that Asian populations have higher risks
				of diabetes and cardiovascular disease at lower BMI levels. The Asian BMI scale uses lower thresholds
				to better identify health risks in Asian populations.
			</p>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	/* Checkbox styling */
	.checkbox-container {
		margin-bottom: 0.75rem;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		gap: 0.75rem;
		cursor: pointer;
		font-weight: 500;
		margin-bottom: 0;
		padding: 0.5rem 0;
	}

	.checkbox-label input[type="checkbox"] {
		width: 20px;
		height: 20px;
		accent-color: var(--color-primary);
		cursor: pointer;
		flex-shrink: 0;
	}

	.checkbox-text {
		font-size: 1rem;
		color: var(--color-text);
		font-weight: 500;
	}

	/* BMI Scale Visualization */
	.bmi-scale {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 2rem;
		position: relative;
	}

	.scale-bar {
		display: flex;
		height: 60px;
		border-radius: var(--border-radius);
		/* allow the pointer triangle to render outside the bar */
		overflow: visible;
		margin-bottom: 1.5rem;
		position: relative;
	}

	.scale-segment {
		flex: 1;
		display: flex;
		align-items: center;
		justify-content: center;
		color: white;
		font-weight: 600;
		font-size: 0.875rem;
		text-align: center;
		position: relative;
	}

	.scale-segment.underweight {
		background: #3366ff;
	}
	.scale-segment.normal {
		background: var(--color-success);
	}
	.scale-segment.overweight {
		background: var(--color-warning);
	}
	.scale-segment.obese {
		background: var(--color-danger);
	}

	/* scale indicator removed - kept for historical context
	.scale-indicator { ... }
	*/

	.bmi-info {
		background: var(--color-background);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius-lg);
		padding: 1.5rem;
	}

	.bmi-info h3 {
		margin: 0 0 0.75rem 0;
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
	}

	.bmi-info p {
		margin: 0;
		color: var(--color-text-muted);
		font-size: 0.875rem;
		line-height: 1.5;
	}

	.bmi-scales-info {
		margin-top: 1.5rem;
		padding-top: 1.5rem;
		border-top: 1px solid var(--color-border);
	}

	.bmi-scales-info h4 {
		margin: 0 0 1rem 0;
		color: var(--color-text);
		font-size: 0.9rem;
		font-weight: 600;
	}

	.scales-comparison {
		display: grid;
		grid-template-columns: 1fr 1fr;
		gap: 1rem;
		margin-bottom: 1rem;
	}

	.scale-info h5 {
		margin: 0 0 0.5rem 0;
		color: var(--color-primary);
		font-size: 0.8rem;
		font-weight: 600;
	}

	.scale-info ul {
		margin: 0;
		padding-left: 1rem;
		list-style-type: none;
	}

	.scale-info li {
		color: var(--color-text-muted);
		font-size: 0.75rem;
		margin-bottom: 0.25rem;
		position: relative;
	}

	.scale-info li::before {
		content: "•";
		color: var(--color-primary);
		position: absolute;
		left: -0.75rem;
	}

	.scale-note {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 0.75rem;
		margin: 0;
		font-size: 0.75rem;
		line-height: 1.4;
	}

	.scale-note strong {
		color: var(--color-text);
	}

	/* Mobile Responsiveness */
	@media (max-width: 768px) {
		.calculator-layout {
			grid-template-columns: 1fr;
			gap: 2rem;
		}

		.calculator-header h1 {
			font-size: 2rem;
		}

		.scales-comparison {
			grid-template-columns: 1fr;
			gap: 0.75rem;
		}

		.checkbox-text {
			font-size: 0.9rem;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Extend Window interface for SharedValues
	declare global {
		interface Window {
			SharedValues: any;
			bmiCalculator: BMICalculator;
		}
	}

	// BMI Calculator with Component Integration
	class BMICalculator {
		private sharedValues: any;
		private bmiNumber: HTMLElement | null = null;
		private bmiCategory: HTMLElement | null = null;
		private bmiExplanation: HTMLElement | null = null;
		// scaleIndicator removed from DOM; keep property for compatibility
		private scaleIndicator: HTMLElement | null = null;
		private asianScale: HTMLInputElement | null = null;

		constructor() {
			// Use ReactiveSharedValues
			this.sharedValues = new (window as any).ReactiveSharedValues();
			this.initializeElements();
			this.loadSharedValues();
			this.attachEventListeners();
			this.calculate();
		}

		private initializeElements(): void {
			// Result display elements
			this.bmiNumber = document.getElementById("bmi-number");
			this.bmiCategory = document.getElementById("bmi-category");
			this.bmiExplanation = document.getElementById("bmi-explanation");
			// scaleIndicator intentionally not queried - removed from markup
			this.asianScale = document.getElementById("asian-scale") as HTMLInputElement;
		}

		private loadSharedValues(): void {
			const values = this.sharedValues.getAll();
			console.log("BMI Calculator - Loaded SharedValues (updated):", values);

			// Load Asian scale preference
			if (this.asianScale) {
				this.asianScale.checked = values.useAsianBMI || false;
			}

			// Initialize unit toggles and update sliders immediately
			this.initializeUnitToggles(values);

			// Show appropriate input containers
			this.showCurrentUnitInputs();

			// Force refresh of all range sliders after a short delay to ensure they load saved values
			setTimeout(() => {
				this.updateRangeSliders(values);
			}, 50);
		}

		private initializeUnitToggles(values: any): void {
			console.log("Initializing unit toggles with values:", values);

			// Find and update height unit toggle
			const heightToggle = document.querySelector(
				'.input-group:has(label[for="height"]) .unit-toggle'
			);
			if (heightToggle) {
				const heightButtons = heightToggle.querySelectorAll(".unit-btn");
				heightButtons.forEach((btn) => {
					btn.classList.remove("active");
					if (btn.getAttribute("data-unit") === values.heightUnit) {
						btn.classList.add("active");
						console.log("Set height unit toggle to:", values.heightUnit);
					}
				});
			}

			// Find and update weight unit toggle
			const weightToggle = document.querySelector(
				'.input-group:has(label[for="weight"]) .unit-toggle'
			);
			if (weightToggle) {
				const weightButtons = weightToggle.querySelectorAll(".unit-btn");
				weightButtons.forEach((btn) => {
					btn.classList.remove("active");
					if (btn.getAttribute("data-unit") === values.weightUnit) {
						btn.classList.add("active");
						console.log("Set weight unit toggle to:", values.weightUnit);
					}
				});
			}

			// Update the range sliders to show current values
			this.updateRangeSliders(values);
		}

		private updateRangeSliders(values: any): void {
			console.log("Updating precision range sliders with values:", values);

			// Find all precision range sliders and trigger their update
			const precisionSliders = document.querySelectorAll(".precision-range-wrapper");
			precisionSliders.forEach((wrapper) => {
				// Dispatch a custom event to tell the slider to refresh from SharedValues
				wrapper.dispatchEvent(
					new CustomEvent("refresh-from-shared-values", {
						bubbles: true,
					})
				);
			});
		}

		private showCurrentUnitInputs(): void {
			const values = this.sharedValues.load();

			// Show/hide height inputs based on current unit
			const heightInputs = document.querySelectorAll(".height-inputs");
			heightInputs.forEach((input) => {
				const htmlInput = input as HTMLElement;
				if (input.classList.contains(`${values.heightUnit}-height`)) {
					htmlInput.style.display = "block";
				} else {
					htmlInput.style.display = "none";
				}
			});

			// Show/hide weight inputs based on current unit
			const weightInputs = document.querySelectorAll(".weight-inputs");
			weightInputs.forEach((input) => {
				const htmlInput = input as HTMLElement;
				if (input.classList.contains(`${values.weightUnit}-weight`)) {
					htmlInput.style.display = "block";
				} else {
					htmlInput.style.display = "none";
				}
			});
		}

		private attachEventListeners(): void {
			// Listen for unit toggle changes
			document.addEventListener("unit-toggle-change", (event) => {
				this.handleUnitChange(event as CustomEvent);
			});

			// Listen for precision range slider changes (from our PrecisionRangeSlider components)
			document.addEventListener("precision-range-change", () => {
				this.calculate();
			});

			// Asian scale checkbox
			if (this.asianScale) {
				this.asianScale.addEventListener("change", () => {
					this.sharedValues.set("useAsianBMI", this.asianScale?.checked);
					this.calculate();
				});
			}
		}

		private handleUnitChange(event: CustomEvent): void {
			console.log("Unit change event received:", event.detail);

			if (event.detail.attribute === "unit") {
				// Get the unit toggle that dispatched this event
				const unitToggle = event.target as HTMLElement;
				const inputGroup = unitToggle?.closest(".input-group");

				if (!inputGroup) {
					console.error("Could not find input group for unit toggle");
					return;
				}

				const label = inputGroup.querySelector("label");
				if (!label) {
					console.error("Could not find label in input group");
					return;
				}

				const labelText = label.textContent?.toLowerCase() || "";
				console.log("Label text:", labelText, "New value:", event.detail.value);

				if (labelText.includes("height")) {
					console.log("Updating height unit to:", event.detail.value);
					this.sharedValues.set("heightUnit", event.detail.value);
					if (event.detail.value === "metric") {
						this.sharedValues.syncHeightUnits("metric");
					} else {
						this.sharedValues.syncHeightUnits("imperial");
					}
				} else if (labelText.includes("weight")) {
					console.log("Updating weight unit to:", event.detail.value);
					this.sharedValues.set("weightUnit", event.detail.value);
					if (event.detail.value === "metric") {
						this.sharedValues.syncWeightUnits("metric");
					} else {
						this.sharedValues.syncWeightUnits("imperial");
					}
				}

				// Refresh range sliders to show converted values
				this.updateRangeSliders(this.sharedValues.getAll());
				this.showCurrentUnitInputs();
				this.calculate();
			}
		}

		public calculate(): void {
			const values = this.sharedValues.getAll();
			let heightInMeters, weightInKg;

			// Convert height to meters
			if (values.heightUnit === "imperial") {
				const totalInches = values.heightTotalInches || 68;
				heightInMeters = totalInches * 0.0254;
			} else {
				heightInMeters = values.heightCm / 100;
			}

			// Convert weight to kg
			if (values.weightUnit === "imperial") {
				weightInKg = values.weightLbs * 0.453592;
			} else {
				weightInKg = values.weightKg;
			}

			const bmi = weightInKg / (heightInMeters * heightInMeters);
			this.updateDisplay(bmi, values.useAsianBMI || false);
		}

		private updateDisplay(bmi: number, useAsianScale: boolean): void {
			const category = this.getBMICategory(bmi, useAsianScale);
			const categoryData = this.getCategoryData(category, useAsianScale);

			// Update BMI number (find the span inside the result-value component)
			if (this.bmiNumber) {
				const numberSpan = this.bmiNumber.querySelector(".result-value__number");
				if (numberSpan) {
					numberSpan.textContent = bmi.toFixed(1);
				}
			}

			// Update BMI category
			if (this.bmiCategory) {
				this.bmiCategory.textContent = categoryData.name;
				// Update the CSS class for the category badge
				this.bmiCategory.className = `category-badge category-badge--md category-badge--solid ${category}`;
				// Set the badge color to match the chart legend colors exactly
				this.bmiCategory.style.setProperty("--badge-color", categoryData.color);
			}
			if (this.bmiExplanation) {
				this.bmiExplanation.textContent = categoryData.explanation;
			}

			this.updateScaleIndicator(bmi, useAsianScale);
		}

		private getBMICategory(bmi: number, useAsianScale: boolean): string {
			if (useAsianScale) {
				if (bmi < 18.5) return "underweight";
				if (bmi < 23) return "normal";
				if (bmi < 27.5) return "overweight";
				return "obese";
			} else {
				if (bmi < 18.5) return "underweight";
				if (bmi < 25) return "normal";
				if (bmi < 30) return "overweight";
				return "obese";
			}
		}

		private getCategoryData(category: string, useAsianScale: boolean): any {
			const categories = {
				underweight: {
					name: "Underweight",
					color: "#3366ff",
					explanation:
						"Your BMI indicates you may be underweight. Consider consulting with a healthcare provider about healthy weight gain strategies.",
				},
				normal: {
					name: "Normal Weight",
					color: "var(--color-success)",
					explanation: useAsianScale
						? "Your BMI falls within the normal weight range for Asian populations. This suggests a healthy weight for your height."
						: "Your BMI falls within the normal weight range. This suggests a healthy weight for your height.",
				},
				overweight: {
					name: "Overweight",
					color: "var(--color-warning)",
					explanation: useAsianScale
						? "Your BMI indicates you may be overweight according to Asian BMI standards. Consider consulting with a healthcare provider about healthy weight management."
						: "Your BMI indicates you may be overweight. Consider consulting with a healthcare provider about healthy weight management.",
				},
				obese: {
					name: "Obese",
					color: "var(--color-danger)",
					explanation: useAsianScale
						? "Your BMI indicates obesity according to Asian BMI standards. We recommend consulting with a healthcare provider for personalized advice."
						: "Your BMI indicates obesity. We recommend consulting with a healthcare provider for personalized advice.",
				},
			};

			return categories[category as keyof typeof categories];
		}

		private updateScaleIndicator(bmi: number, useAsianScale: boolean): void {
			// scale-indicator removed - no-op
			return;
		}
	}

	// Initialize BMI calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		// Ensure ReactiveSharedValues is available
		if (typeof (window as any).ReactiveSharedValues === "undefined") {
			console.error("ReactiveSharedValues not loaded");
			return;
		}

		// Use the global ReactiveSharedValues instance
		const sharedValues = new (window as any).ReactiveSharedValues();
		const values = sharedValues.getAll();

		console.log("Initializing BMI page with ReactiveSharedValues:", values);

		// Add debug button to test values
		const debugBtn = document.createElement("button");
		debugBtn.textContent = "Debug & Test";
		debugBtn.style.cssText =
			"position: fixed; top: 10px; right: 10px; z-index: 1000; background: red; color: white; padding: 5px; border: none; border-radius: 3px; cursor: pointer;";
		debugBtn.onclick = () => {
			console.log("=== DEBUG VALUES ===");
			const currentValues = sharedValues.getAll();
			console.log("Current values:", currentValues);

			// Test setting height to 74 inches manually
			console.log("Setting heightTotalInches to 74...");
			sharedValues.set("heightTotalInches", 74);

			const updatedValues = sharedValues.getAll();
			console.log("After setting to 74:", updatedValues);

			// Test conversion
			console.log("Testing conversion to metric...");
			sharedValues.set("heightUnit", "metric");
			sharedValues.syncHeightUnits("metric");

			const finalValues = sharedValues.getAll();
			console.log("After conversion:", finalValues);
			console.log("Expected: 188 cm, Got:", finalValues.heightCm);
		};
		document.body.appendChild(debugBtn);

		console.log("Initializing BMI page with values:", values);

		// Initialize unit toggles first - ensure at least one button is active
		function initializeUnitToggles() {
			// Height unit toggle
			const heightButtons = document.querySelectorAll(
				'.input-group:has(label[for="height"]) .unit-btn'
			);
			let heightActiveSet = false;
			heightButtons.forEach((btn) => {
				btn.classList.remove("active");
				if (btn.getAttribute("data-unit") === values.heightUnit) {
					btn.classList.add("active");
					heightActiveSet = true;
				}
			});
			if (!heightActiveSet && heightButtons.length > 0) {
				heightButtons[0].classList.add("active");
				sharedValues.set("heightUnit", heightButtons[0].getAttribute("data-unit"));
			}

			// Weight unit toggle
			const weightButtons = document.querySelectorAll(
				'.input-group:has(label[for="weight"]) .unit-btn'
			);
			let weightActiveSet = false;
			weightButtons.forEach((btn) => {
				btn.classList.remove("active");
				if (btn.getAttribute("data-unit") === values.weightUnit) {
					btn.classList.add("active");
					weightActiveSet = true;
				}
			});
			if (!weightActiveSet && weightButtons.length > 0) {
				weightButtons[0].classList.add("active");
				sharedValues.set("weightUnit", weightButtons[0].getAttribute("data-unit"));
			}
		}

		// Show/hide appropriate input containers based on units
		function showCurrentUnitInputs() {
			const currentValues = sharedValues.getAll();

			// Height inputs
			document.querySelectorAll(".height-inputs").forEach((input) => {
				const htmlInput = input as HTMLElement;
				if (input.classList.contains(`${currentValues.heightUnit}-height`)) {
					htmlInput.style.display = "block";
				} else {
					htmlInput.style.display = "none";
				}
			});

			// Weight inputs
			document.querySelectorAll(".weight-inputs").forEach((input) => {
				const htmlInput = input as HTMLElement;
				if (input.classList.contains(`${currentValues.weightUnit}-weight`)) {
					htmlInput.style.display = "block";
				} else {
					htmlInput.style.display = "none";
				}
			});
		}

		// Update range sliders with current values
		function updateRangeSliders() {
			const currentValues = sharedValues.getAll();
			const sliderUpdates = [
				{ id: "height-total-inches", key: "heightTotalInches" },
				{ id: "height-cm", key: "heightCm" },
				{ id: "weight-lbs", key: "weightLbs" },
				{ id: "weight-kg", key: "weightKg" },
			];

			sliderUpdates.forEach(({ id, key }) => {
				// Find the precision range slider wrapper
				const wrapper = document.querySelector(`.precision-range-wrapper:has(#${id})`);
				if (wrapper && currentValues[key] !== undefined) {
					const slider = document.getElementById(id) as HTMLInputElement;
					const display = document.getElementById(id + "-display");
					const numberInput = document.getElementById(`${id}-number`) as HTMLInputElement;

					if (slider) {
						slider.value = currentValues[key];
					}

					if (numberInput) {
						const value = parseFloat(currentValues[key]);
						// Format the number input according to step precision
						const step = parseFloat(slider?.step || "1");
						if (step < 1) {
							const decimalPlaces = step.toString().split(".")[1]?.length || 1;
							numberInput.value = value.toFixed(decimalPlaces);
						} else {
							numberInput.value = Math.round(value).toString();
						}
					}

					if (display) {
						const value = parseFloat(currentValues[key]);

						// Special handling for height-total-inches (formatAsHeight)
						if (id === "height-total-inches") {
							const feet = Math.floor(value / 12);
							const inches = Math.round((value % 12) * 2) / 2;
							display.textContent = `${feet}'${inches}"`;
						} else {
							// Standard formatting
							const step = parseFloat(slider?.step || "1");
							if (step < 1) {
								const decimalPlaces = step.toString().split(".")[1]?.length || 1;
								display.textContent = value.toFixed(decimalPlaces);
							} else {
								display.textContent = Math.round(value).toString();
							}
						}
					}
				}
			});
		}

		// Initialize precision range sliders
		function initializePrecisionRangeSliders() {
			console.log("BMI Page: Initializing precision range sliders");
			const precisionWrappers = document.querySelectorAll(".precision-range-wrapper");
			console.log(`BMI Page: Found ${precisionWrappers.length} precision range slider components`);

			precisionWrappers.forEach((wrapper, index) => {
				const rangeInput = wrapper.querySelector(".precision-range-input") as HTMLInputElement;
				if (!rangeInput) {
					console.error(`BMI Page: No range input found in wrapper ${index}`);
					return;
				}

				console.log(`BMI Page: Initializing precision slider ${index + 1}: ${rangeInput.id}`);
				initializeSinglePrecisionSlider(wrapper as HTMLElement, rangeInput);
			});
		}

		function initializeSinglePrecisionSlider(wrapper: HTMLElement, rangeInput: HTMLInputElement) {
			const sliderId = rangeInput.id;
			const numberInput = document.getElementById(`${sliderId}-number`) as HTMLInputElement;
			const display = document.getElementById(`${sliderId}-display`) as HTMLElement;
			const decrementBtn = wrapper.querySelector(".precision-decrement") as HTMLElement;
			const incrementBtn = wrapper.querySelector(".precision-increment") as HTMLElement;
			const sharedKey = rangeInput.dataset.sharedKey;

			console.log(`BMI Page: Slider ${sliderId} - Elements found:`, {
				numberInput: !!numberInput,
				display: !!display,
				decrementBtn: !!decrementBtn,
				incrementBtn: !!incrementBtn,
				sharedKey,
			});

			// Load initial value from SharedValues
			if (sharedKey) {
				const savedValue = sharedValues.get(sharedKey);
				if (savedValue !== undefined && savedValue !== null) {
					rangeInput.value = savedValue.toString();
					if (numberInput) numberInput.value = savedValue.toString();
					updateDisplay(rangeInput, display);
				}
			}

			// Range slider events
			rangeInput.addEventListener("input", () => {
				console.log(
					`BMI Page: Range input changed for ${sliderId}, new value: ${rangeInput.value}`
				);
				if (sharedKey) {
					sharedValues.set(sharedKey, parseFloat(rangeInput.value));

					// IMPORTANT: If height total inches changes, also update the cm equivalent
					if (sharedKey === "heightTotalInches") {
						const totalInches = parseFloat(rangeInput.value);
						const cm = Math.round(totalInches * 2.54);
						console.log(`Syncing height: ${totalInches} inches = ${cm} cm`);
						sharedValues.set("heightCm", cm);
					}
					// Similarly for height cm to inches
					else if (sharedKey === "heightCm") {
						const cm = parseFloat(rangeInput.value);
						const totalInches = Math.round((cm / 2.54) * 2) / 2; // Round to nearest 0.5
						console.log(`Syncing height: ${cm} cm = ${totalInches} inches`);
						sharedValues.set("heightTotalInches", totalInches);
					}
					// IMPORTANT: If weight lbs changes, also update the kg equivalent
					else if (sharedKey === "weightLbs") {
						const lbs = parseFloat(rangeInput.value);
						const kg = Math.round(lbs * 0.453592 * 10) / 10; // Round to 1 decimal
						console.log(`Syncing weight: ${lbs} lbs = ${kg} kg`);
						sharedValues.set("weightKg", kg);
					}
					// Similarly for weight kg to lbs
					else if (sharedKey === "weightKg") {
						const kg = parseFloat(rangeInput.value);
						const lbs = Math.round(kg / 0.453592);
						console.log(`Syncing weight: ${kg} kg = ${lbs} lbs`);
						sharedValues.set("weightLbs", lbs);
					}
				}
				syncSliderValues(rangeInput, numberInput, display);
				if ((window as any).bmiCalculator) (window as any).bmiCalculator.calculate();
			});

			// Number input events
			if (numberInput) {
				numberInput.addEventListener("input", () => {
					console.log(`BMI Page: Number input changed for ${sliderId}`);
					const value = clampValue(parseFloat(numberInput.value), rangeInput);
					rangeInput.value = value.toString();
					numberInput.value = value.toString();
					updateDisplay(rangeInput, display);
					if (sharedKey) {
						sharedValues.set(sharedKey, value);

						// IMPORTANT: Keep height values in sync
						if (sharedKey === "heightTotalInches") {
							const cm = Math.round(value * 2.54);
							sharedValues.set("heightCm", cm);
						} else if (sharedKey === "heightCm") {
							const totalInches = Math.round((value / 2.54) * 2) / 2;
							sharedValues.set("heightTotalInches", totalInches);
						}
						// IMPORTANT: Keep weight values in sync
						else if (sharedKey === "weightLbs") {
							const kg = Math.round(value * 0.453592 * 10) / 10;
							sharedValues.set("weightKg", kg);
						} else if (sharedKey === "weightKg") {
							const lbs = Math.round(value / 0.453592);
							sharedValues.set("weightLbs", lbs);
						}
					}
					if ((window as any).bmiCalculator) (window as any).bmiCalculator.calculate();
				});
			}

			// Button events
			if (decrementBtn) {
				decrementBtn.addEventListener("click", () => {
					console.log(`BMI Page: Decrement clicked for ${sliderId}`);
					const currentValue = parseFloat(rangeInput.value);
					const step = parseFloat(rangeInput.step) || 1;
					const newValue = clampValue(currentValue - step, rangeInput);
					rangeInput.value = newValue.toString();
					syncSliderValues(rangeInput, numberInput, display);
					if (sharedKey) {
						sharedValues.set(sharedKey, newValue);

						// Keep height values in sync
						if (sharedKey === "heightTotalInches") {
							const cm = Math.round(newValue * 2.54);
							sharedValues.set("heightCm", cm);
						} else if (sharedKey === "heightCm") {
							const totalInches = Math.round((newValue / 2.54) * 2) / 2;
							sharedValues.set("heightTotalInches", totalInches);
						}
						// Keep weight values in sync
						else if (sharedKey === "weightLbs") {
							const kg = Math.round(newValue * 0.453592 * 10) / 10;
							sharedValues.set("weightKg", kg);
						} else if (sharedKey === "weightKg") {
							const lbs = Math.round(newValue / 0.453592);
							sharedValues.set("weightLbs", lbs);
						}
					}
					if ((window as any).bmiCalculator) (window as any).bmiCalculator.calculate();
				});
			}

			if (incrementBtn) {
				incrementBtn.addEventListener("click", () => {
					console.log(`BMI Page: Increment clicked for ${sliderId}`);
					const currentValue = parseFloat(rangeInput.value);
					const step = parseFloat(rangeInput.step) || 1;
					const newValue = clampValue(currentValue + step, rangeInput);
					rangeInput.value = newValue.toString();
					syncSliderValues(rangeInput, numberInput, display);
					if (sharedKey) {
						sharedValues.set(sharedKey, newValue);

						// Keep height values in sync
						if (sharedKey === "heightTotalInches") {
							const cm = Math.round(newValue * 2.54);
							sharedValues.set("heightCm", cm);
						} else if (sharedKey === "heightCm") {
							const totalInches = Math.round((newValue / 2.54) * 2) / 2;
							sharedValues.set("heightTotalInches", totalInches);
						}
						// Keep weight values in sync
						else if (sharedKey === "weightLbs") {
							const kg = Math.round(newValue * 0.453592 * 10) / 10;
							sharedValues.set("weightKg", kg);
						} else if (sharedKey === "weightKg") {
							const lbs = Math.round(newValue / 0.453592);
							sharedValues.set("weightLbs", lbs);
						}
					}
					if ((window as any).bmiCalculator) (window as any).bmiCalculator.calculate();
				});
			}
		}

		function clampValue(value: number, rangeInput: HTMLInputElement): number {
			const min = parseFloat(rangeInput.min) || 0;
			const max = parseFloat(rangeInput.max) || 100;
			if (isNaN(value)) value = min;
			return Math.max(min, Math.min(max, value));
		}

		function syncSliderValues(
			rangeInput: HTMLInputElement,
			numberInput: HTMLInputElement | null,
			display: HTMLElement | null
		) {
			const value = parseFloat(rangeInput.value);
			if (numberInput) {
				const step = parseFloat(rangeInput.step) || 1;
				if (step < 1) {
					const decimalPlaces = step.toString().split(".")[1]?.length || 1;
					numberInput.value = value.toFixed(decimalPlaces);
				} else {
					numberInput.value = Math.round(value).toString();
				}
			}
			updateDisplay(rangeInput, display);
		}

		function updateDisplay(rangeInput: HTMLInputElement, display: HTMLElement | null) {
			if (!display) return;

			const value = parseFloat(rangeInput.value);
			const formatAsHeight = rangeInput.getAttribute("data-format-as-height") === "true";
			const formatAsPace = rangeInput.getAttribute("data-format-as-pace") === "true";

			if (formatAsHeight) {
				// Format total inches as feet'inches"
				const feet = Math.floor(value / 12);
				const inches = Math.round((value % 12) * 2) / 2; // Round to nearest 0.5
				display.textContent = `${feet}'${inches}"`;
			} else if (formatAsPace) {
				// Format seconds as mm:ss pace format
				const minutes = Math.floor(value / 60);
				const seconds = Math.round(value % 60);
				display.textContent = `${minutes}:${seconds.toString().padStart(2, "0")}`;
			} else {
				// Handle decimal precision for normal values
				const step = parseFloat(rangeInput.step) || 1;
				if (step < 1) {
					const decimalPlaces = step.toString().split(".")[1]?.length || 1;
					display.textContent = value.toFixed(decimalPlaces);
				} else {
					display.textContent = Math.round(value).toString();
				}
			}
		}

		// Initialize everything after DOM and SharedValues are available
		setTimeout(() => {
			initializeUnitToggles();
			showCurrentUnitInputs();
			updateRangeSliders();

			// Initialize precision range sliders before BMI calculator
			initializePrecisionRangeSliders();

			// Initialize BMI calculator
			(window as any).bmiCalculator = new BMICalculator();
		}, 200);

		// Handle unit toggle changes
		document.addEventListener("unit-toggle-change", function (event: Event) {
			const customEvent = event as CustomEvent;
			console.log("Unit toggle change detected:", customEvent.detail);

			if (customEvent.detail.attribute === "unit") {
				const unitToggle = customEvent.target as HTMLElement;
				const inputGroup = unitToggle?.closest(".input-group");
				const label = inputGroup?.querySelector("label");
				const labelText = label?.textContent?.toLowerCase() || "";

				if (labelText.includes("height")) {
					console.log("Converting height units to:", customEvent.detail.value);

					// IMPORTANT: Before conversion, ensure current slider value is saved
					const heightSlider = document.getElementById("height-total-inches") as HTMLInputElement;
					if (heightSlider && sharedValues.get("heightUnit") === "imperial") {
						const currentSliderValue = parseFloat(heightSlider.value);
						sharedValues.set("heightTotalInches", currentSliderValue);
					}

					sharedValues.set("heightUnit", customEvent.detail.value);
					if (customEvent.detail.value === "metric") {
						sharedValues.syncHeightUnits("metric");
					} else {
						sharedValues.syncHeightUnits("imperial");
					}
				} else if (labelText.includes("weight")) {
					console.log("Converting weight units to:", customEvent.detail.value);

					// IMPORTANT: Before conversion, ensure current slider value is saved
					const currentUnit = sharedValues.get("weightUnit");
					if (currentUnit === "imperial") {
						const weightSlider = document.getElementById("weight-lbs") as HTMLInputElement;
						if (weightSlider) {
							const currentSliderValue = parseFloat(weightSlider.value);
							sharedValues.set("weightLbs", currentSliderValue);
						}
					} else if (currentUnit === "metric") {
						const weightSlider = document.getElementById("weight-kg") as HTMLInputElement;
						if (weightSlider) {
							const currentSliderValue = parseFloat(weightSlider.value);
							sharedValues.set("weightKg", currentSliderValue);
						}
					}

					sharedValues.set("weightUnit", customEvent.detail.value);
					if (customEvent.detail.value === "metric") {
						sharedValues.syncWeightUnits("metric");
					} else {
						sharedValues.syncWeightUnits("imperial");
					}
				}

				// Refresh everything
				showCurrentUnitInputs();
				updateRangeSliders();

				// Trigger BMI recalculation if calculator exists
				if ((window as any).bmiCalculator && (window as any).bmiCalculator.calculate) {
					(window as any).bmiCalculator.calculate();
				}
			}
		});
	});
</script>
