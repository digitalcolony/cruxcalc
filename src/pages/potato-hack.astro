---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
// Use the global unit system toggle instead of per-field toggles
import GlobalUnitToggle from "../components/GlobalUnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";

// No server-side unit defaults; the global unit toggle + ReactiveSharedValues handle this
---

<Layout
	title="Potato Hack Calorie Calculator - Potato Hack Diet Calculator"
	description="Calculate your daily calorie deficit on a potato-only diet. Includes resistant starch calculations for cooled potatoes (17% calorie reduction) and weekly fat loss estimates."
	image="/og-potato.png"
	imageAlt="Potato Hack Calculator - Calculate Your Daily Calorie Deficit"
	canonical="/potato-hack"
>
	<CalculatorLayout
		title="Potato Hack Calculator"
		description="Calculate your daily calorie deficit on a potato-only diet. Choose between pounds or kilograms for convenience. Cooling potatoes overnight increases resistant starch, reducing available calories by 17%."
	>
		<div slot="inputs">
			<InputGroup label="Units" helpText="Switch between imperial and metric">
				<GlobalUnitToggle />
			</InputGroup>

			<div class="weight-inputs imperial-weight" data-unit-group="imperial">
				<InputGroup label="" helpText="Amount of cooked potatoes consumed daily" class="full-width">
					<PrecisionRangeSlider
						id="potato-pounds"
						label=""
						min={3}
						max={5}
						step={0.1}
						value={4}
						unit="lbs"
						sharedKey="potatoPounds"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-weight" data-unit-group="metric" style="display: none;">
				<InputGroup
					label="Potato Weight"
					helpText="Amount of cooked potatoes consumed daily"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="potato-kg"
						label=""
						min={1.4}
						max={2.3}
						step={0.05}
						value={1.8}
						unit="kg"
						sharedKey="potatoKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Resistant Starch Option"
				helpText="Cooled potatoes have increased resistant starch"
			>
				<div class="checkbox-container">
					<label class="checkbox-label">
						<input type="checkbox" id="cooled-overnight" />
						<span class="checkmark"></span>
						Cooled Overnight (17% calorie reduction)
					</label>
				</div>
			</InputGroup>

			<InputGroup label="Your TDEE" helpText="Total Daily Energy Expenditure in calories">
				<PrecisionRangeSlider
					id="tdee"
					label=""
					min={800}
					max={3000}
					step={50}
					value={1700}
					unit="calories"
					sharedKey="tdee"
				/>
			</InputGroup>
		</div>

		<div slot="results">
			<div class="main-results">
				<ResultCard title="Total Calories Consumed" variant="primary">
					<ResultValue id="total-calories" value={1400} unit="" size="xl" color="primary" />
					<p slot="description" class="result-description">From daily potato consumption</p>
				</ResultCard>

				<ResultCard title="Daily Calorie Change" variant="success">
					<ResultValue id="calorie-deficit" value={-300} unit="" size="xl" color="success" />
					<p slot="description" class="result-description">Compared to your TDEE</p>
				</ResultCard>
			</div>

			<div class="duration-results">
				<h3>Weight Loss Projections</h3>
				<div class="duration-grid">
					<ResultCard title="3 Day Hack" variant="default">
						<ResultValue
							id="three-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="4 Day Hack" variant="default">
						<ResultValue
							id="four-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="5 Day Hack" variant="default">
						<ResultValue
							id="five-day-change"
							value={0.4}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="Weekly Hack" variant="warning">
						<ResultValue id="weekly-change" value={0.6} unit="lbs loss" size="lg" color="warning" />
					</ResultCard>
				</div>
			</div>

			<div class="formula-info">
				<h4>Formula & Notes</h4>
				<p class="formula-note">
					Cooled potatoes contain resistant starch which reduces available calories by approximately
					17%. Weight loss calculations use 3,500 calories = 1 pound of fat loss. See the <a
						href="https://criticalmas.org/2017/08/math-behind-potato-hack/"
						target="_blank">math behind potato hack</a
					> for details.
				</p>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	.calculator {
		padding: 2rem 0;
	}

	.calculator-title {
		font-size: 2.5rem;
		font-weight: 800;
		margin: 0 0 1rem 0;
		color: var(--color-primary);
		text-align: center;
	}

	.calculator-description {
		text-align: center;
		margin: 0 0 2rem 0;
		color: var(--color-text-muted);
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.calculator-form {
		max-width: 500px;
		margin: 0 auto;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.form-group {
		margin-bottom: 2rem;
	}

	.form-group:last-child {
		margin-bottom: 0;
	}
	label {
		display: block;
		font-weight: 700;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.weight-inputs {
		display: block;
	}

	.slider-container {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.slider {
		flex: 1;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
		appearance: none;
	}

	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider::-moz-range-thumb {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider-value {
		font-weight: 700;
		color: var(--color-primary);
		min-width: 80px;
		text-align: center;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		cursor: pointer;
		font-weight: 700;
		gap: 0.75rem;
	}

	.checkbox-label input[type="checkbox"] {
		display: none;
	}

	.checkmark {
		width: 20px;
		height: 20px;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		position: relative;
		transition: all 0.2s ease;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark {
		background: var(--color-primary);
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
		content: "âœ“";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: white;
		font-weight: 700;
		font-size: 14px;
	}
	.input-field {
		max-width: 200px;
		width: 100%;
		padding: 0.75rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		font-family: inherit;
		font-weight: 700;
		font-size: 1rem;
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
	}

	.input-field:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: var(--shadow-md);
	}

	.input-unit {
		display: inline-block;
		margin-top: 0.5rem;
		color: var(--color-text-muted);
		font-size: 0.875rem;
	}

	.results {
		margin-top: 2rem;
		display: grid;
		gap: 1rem;
	}

	.result-card {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		text-align: center;
		box-shadow: var(--shadow-sm);
	}

	.result-card h3 {
		margin: 0 0 0.5rem 0;
		font-size: 1rem;
		font-weight: 700;
		color: var(--color-text-muted);
	}

	.result-value {
		font-size: 2rem;
		font-weight: 800;
		color: var(--color-primary);
		margin: 0;
	}

	.result-unit {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin-top: 0.25rem;
	}
	@media (max-width: 768px) {
		.calculator-title {
			font-size: 2rem;
			padding: 0 1rem;
		}

		.calculator-description {
			padding: 0 1rem;
		}

		.calculator-form {
			margin: 0 1rem;
			padding: 1.5rem;
		}

		.slider-container {
			flex-direction: column;
			align-items: stretch;
			gap: 0.5rem;
		}

		.slider-value {
			text-align: left;
		}

		.unit-toggle {
			flex-direction: row;
			gap: 0.25rem;
		}

		.unit-btn {
			font-size: 0.75rem;
			padding: 0.4rem;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>

<script>
	// @ts-nocheck - Disable TypeScript checking for this Astro component

	class PotatoHackCalculator {
		private sharedValues: any;
		private get unitSystem(): string {
			return this.sharedValues.get("unitSystem") || "imperial";
		}

		constructor() {
			this.sharedValues = new (window as any).ReactiveSharedValues();
			this.init();
		}

		private init(): void {
			// Defaults
			const defaults = {
				unitSystem: this.sharedValues.get("unitSystem") || "imperial",
				potatoPounds: this.sharedValues.get("potatoPounds") ?? 4.0,
				potatoKg: this.sharedValues.get("potatoKg") ?? 1.8,
				tdee: this.sharedValues.get("tdee") ?? 1700,
			};
			Object.entries(defaults).forEach(([k, v]) => this.sharedValues.set(k, v as any));

			this.bindEvents();
			this.syncVisibility();
			this.refreshInputsFromShared();
			this.calculateResults();
		}

		private bindEvents(): void {
			document.addEventListener("precision-range-change", (e) => {
				const { sharedKey, value } = (e as CustomEvent).detail || {};
				if (!sharedKey) return;
				this.sharedValues.set(sharedKey, value);

				// Keep kg<->lbs in sync regardless of current unit, mirroring BMR/BMI patterns
				if (sharedKey === "potatoPounds") {
					const kg = Math.round(parseFloat(value) * 0.453592 * 100) / 100; // 2 decimals
					this.sharedValues.set("potatoKg", kg);
				} else if (sharedKey === "potatoKg") {
					const lbs = Math.round((parseFloat(value) / 0.453592) * 100) / 100; // keep 2 decimals internally
					// but our slider uses 0.1 granularity; round when rendering
					this.sharedValues.set("potatoPounds", Math.round(lbs * 10) / 10);
				}

				this.calculateResults();
			});

			// Global unit system changes
			window.addEventListener("unit-system-change", () => {
				// Before toggling visibility, convert potato value to target unit with slider-step rounding
				const system = this.unitSystem;
				const roundTo = (val: number, step: number) => Math.round(val / step) * step;
				if (system === "metric") {
					const lbs = parseFloat(this.sharedValues.get("potatoPounds") ?? 4.0);
					const kg = roundTo(lbs * 0.453592, 0.05);
					this.sharedValues.set("potatoKg", parseFloat(kg.toFixed(2)));
				} else {
					const kg = parseFloat(this.sharedValues.get("potatoKg") ?? 1.8);
					const lbs = roundTo(kg / 0.453592, 0.1);
					this.sharedValues.set("potatoPounds", parseFloat(lbs.toFixed(1)));
				}

				this.syncVisibility();
				// Directly set the active slider to the converted value before any refresh
				if (system === "metric") {
					const kgInput = document.getElementById("potato-kg") as HTMLInputElement | null;
					const v = this.sharedValues.get("potatoKg");
					if (kgInput && v != null) {
						kgInput.value = String(v);
						kgInput.dispatchEvent(new Event("input", { bubbles: true }));
					}
				} else {
					const lbsInput = document.getElementById("potato-pounds") as HTMLInputElement | null;
					const v = this.sharedValues.get("potatoPounds");
					if (lbsInput && v != null) {
						lbsInput.value = String(v);
						lbsInput.dispatchEvent(new Event("input", { bubbles: true }));
					}
				}
				// Ensure sliders reload values from shared state as well
				document.querySelectorAll(".precision-range-wrapper").forEach((w) => {
					w.dispatchEvent(new CustomEvent("refresh-from-shared-values", { bubbles: true }));
				});
				this.refreshInputsFromShared();
				this.calculateResults();
			});

			// Resistant starch checkbox
			const cooled = document.getElementById("cooled-overnight");
			cooled?.addEventListener("change", () => this.calculateResults());
		}

		private syncVisibility(): void {
			const system = this.unitSystem;
			document.querySelectorAll(".weight-inputs").forEach((el) => {
				const show = el.classList.contains(`${system}-weight`);
				(el as HTMLElement).style.display = show ? "" : "none";
			});
		}

		private refreshInputsFromShared(): void {
			const poundsInput = document.getElementById("potato-pounds") as HTMLInputElement | null;
			if (poundsInput) {
				const v = this.sharedValues.get("potatoPounds");
				if (v != null && poundsInput.value !== String(v)) {
					poundsInput.value = String(v);
					poundsInput.dispatchEvent(new Event("input", { bubbles: true }));
				}
			}

			const kgInput = document.getElementById("potato-kg") as HTMLInputElement | null;
			if (kgInput) {
				const v = this.sharedValues.get("potatoKg");
				if (v != null && kgInput.value !== String(v)) {
					kgInput.value = String(v);
					kgInput.dispatchEvent(new Event("input", { bubbles: true }));
				}
			}

			const tdeeInput = document.getElementById("tdee") as HTMLInputElement | null;
			if (tdeeInput) {
				const v = this.sharedValues.get("tdee");
				if (v != null && tdeeInput.value !== String(v)) {
					tdeeInput.value = String(v);
					tdeeInput.dispatchEvent(new Event("input", { bubbles: true }));
				}
			}
		}

		private calculateResults(): void {
			const system = this.unitSystem;
			const pounds = parseFloat(this.sharedValues.get("potatoPounds") ?? 4.0);
			const kg = parseFloat(this.sharedValues.get("potatoKg") ?? 1.8);
			const tdee = parseFloat(this.sharedValues.get("tdee") ?? 1700);
			const cooled =
				(document.getElementById("cooled-overnight") as HTMLInputElement)?.checked || false;

			// Match tests: baseline 350 cal per lb cooked potatoes, metric via conversion
			let totalCalories = system === "imperial" ? pounds * 350 : kg * (350 / 0.453592);
			if (cooled) totalCalories *= 0.83; // 17% reduction

			const deficit = tdee - totalCalories; // positive number means deficit

			// Fat loss projections
			const perPoundCals = 3500;
			const perKgCals = 7700;
			const denom = system === "imperial" ? perPoundCals : perKgCals;
			const d3 = Math.max(0, (deficit * 3) / denom);
			const d4 = Math.max(0, (deficit * 4) / denom);
			const d5 = Math.max(0, (deficit * 5) / denom);
			const d7 = Math.max(0, (deficit * 7) / denom);

			// Update UI
			const setNum = (sel: string, val: number) => {
				const el = document.querySelector(`${sel} .result-value__number`);
				if (el) (el as HTMLElement).textContent = Math.round(val).toLocaleString();
			};
			setNum("#total-calories", totalCalories);
			setNum("#calorie-deficit", deficit);

			const setProj = (id: string, val: number) => {
				const numEl = document.querySelector(`${id} .result-value__number`);
				const unitEl = document.querySelector(`${id} .result-value__unit`);
				if (numEl) (numEl as HTMLElement).textContent = val.toFixed(1);
				if (unitEl) (unitEl as HTMLElement).textContent = system === "imperial" ? "lbs" : "kg";
			};
			setProj("#three-day-change", d3);
			setProj("#four-day-change", d4);
			setProj("#five-day-change", d5);
			setProj("#weekly-change", d7);
		}
	}

	// Initialize
	(function start() {
		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", run);
		} else run();
		function run() {
			new PotatoHackCalculator();
		}
	})();
</script>
