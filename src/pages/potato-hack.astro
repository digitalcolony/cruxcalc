---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import PrecisionRangeSlider from "../components/PrecisionRangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";

// Initialize SharedValues on the server side
const sharedValues = {
	potatoUnit: "imperial",
};
---

<Layout
	title="Potato Hack Calorie Calculator - Potato Hack Diet Calculator"
	description="Calculate your daily calorie deficit on a potato-only diet. Includes resistant starch calculations for cooled potatoes (17% calorie reduction) and weekly fat loss estimates."
	image="/og-potato.png"
	imageAlt="Potato Hack Calculator - Calculate Your Daily Calorie Deficit"
	canonical="/potato-hack"
>
	<CalculatorLayout
		title="Potato Hack Calculator"
		description="Calculate your daily calorie deficit on a potato-only diet. Choose between pounds or kilograms for convenience. Cooling potatoes overnight increases resistant starch, reducing available calories by 17%."
	>
		<div slot="inputs">
			<InputGroup
				label="Daily Weight of Cooked Potatoes"
				helpText="Choose your preferred measurement system"
			>
				<UnitToggle
					options={[
						{ value: "imperial", label: "lbs" },
						{ value: "metric", label: "kg" },
					]}
					activeValue={sharedValues.potatoUnit}
					dataAttribute="potato-unit"
				/>
			</InputGroup>

			<div class="weight-inputs imperial-potato" data-unit-group="imperial">
				<InputGroup label="" helpText="Amount of cooked potatoes consumed daily" class="full-width">
					<PrecisionRangeSlider
						id="potato-pounds"
						label=""
						min={3}
						max={5}
						step={0.1}
						value={4}
						unit="lbs"
						sharedKey="potatoPounds"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-potato" data-unit-group="metric" style="display: none;">
				<InputGroup
					label="Potato Weight"
					helpText="Amount of cooked potatoes consumed daily"
					class="full-width"
				>
					<PrecisionRangeSlider
						id="potato-kg"
						label=""
						min={1.4}
						max={2.3}
						step={0.05}
						value={1.8}
						unit="kg"
						sharedKey="potatoKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Resistant Starch Option"
				helpText="Cooled potatoes have increased resistant starch"
			>
				<div class="checkbox-container">
					<label class="checkbox-label">
						<input type="checkbox" id="cooled-overnight" />
						<span class="checkmark"></span>
						Cooled Overnight (17% calorie reduction)
					</label>
				</div>
			</InputGroup>

			<InputGroup label="Your TDEE" helpText="Total Daily Energy Expenditure in calories">
				<PrecisionRangeSlider
					id="tdee"
					label=""
					min={800}
					max={3000}
					step={50}
					value={1700}
					unit="calories"
					sharedKey="tdee"
				/>
			</InputGroup>
		</div>

		<div slot="results">
			<div class="main-results">
				<ResultCard title="Total Calories Consumed" variant="primary">
					<ResultValue id="total-calories" value={1400} unit="" size="xl" color="primary" />
					<p slot="description" class="result-description">From daily potato consumption</p>
				</ResultCard>

				<ResultCard title="Daily Calorie Change" variant="success">
					<ResultValue id="calorie-deficit" value={-300} unit="" size="xl" color="success" />
					<p slot="description" class="result-description">Compared to your TDEE</p>
				</ResultCard>
			</div>

			<div class="duration-results">
				<h3>Weight Loss Projections</h3>
				<div class="duration-grid">
					<ResultCard title="3 Day Hack" variant="default">
						<ResultValue
							id="three-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="4 Day Hack" variant="default">
						<ResultValue
							id="four-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="5 Day Hack" variant="default">
						<ResultValue
							id="five-day-change"
							value={0.4}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="Weekly Hack" variant="warning">
						<ResultValue id="weekly-change" value={0.6} unit="lbs loss" size="lg" color="warning" />
					</ResultCard>
				</div>
			</div>

			<div class="formula-info">
				<h4>Formula & Notes</h4>
				<p class="formula-note">
					Cooled potatoes contain resistant starch which reduces available calories by approximately
					17%. Weight loss calculations use 3,500 calories = 1 pound of fat loss. See the <a
						href="https://criticalmas.org/2017/08/math-behind-potato-hack/"
						target="_blank">math behind potato hack</a
					> for details.
				</p>
			</div>
		</div>
	</CalculatorLayout>
</Layout>

<style>
	.calculator {
		padding: 2rem 0;
	}

	.calculator-title {
		font-size: 2.5rem;
		font-weight: 800;
		margin: 0 0 1rem 0;
		color: var(--color-primary);
		text-align: center;
	}

	.calculator-description {
		text-align: center;
		margin: 0 0 2rem 0;
		color: var(--color-text-muted);
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.calculator-form {
		max-width: 500px;
		margin: 0 auto;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.form-group {
		margin-bottom: 2rem;
	}

	.form-group:last-child {
		margin-bottom: 0;
	}
	label {
		display: block;
		font-weight: 700;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.weight-inputs {
		display: block;
	}

	.slider-container {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.slider {
		flex: 1;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
		appearance: none;
	}

	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider::-moz-range-thumb {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider-value {
		font-weight: 700;
		color: var(--color-primary);
		min-width: 80px;
		text-align: center;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		cursor: pointer;
		font-weight: 700;
		gap: 0.75rem;
	}

	.checkbox-label input[type="checkbox"] {
		display: none;
	}

	.checkmark {
		width: 20px;
		height: 20px;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		position: relative;
		transition: all 0.2s ease;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark {
		background: var(--color-primary);
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
		content: "âœ“";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: white;
		font-weight: 700;
		font-size: 14px;
	}
	.input-field {
		max-width: 200px;
		width: 100%;
		padding: 0.75rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		font-family: inherit;
		font-weight: 700;
		font-size: 1rem;
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
	}

	.input-field:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: var(--shadow-md);
	}

	.input-unit {
		display: inline-block;
		margin-top: 0.5rem;
		color: var(--color-text-muted);
		font-size: 0.875rem;
	}

	.results {
		margin-top: 2rem;
		display: grid;
		gap: 1rem;
	}

	.result-card {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		text-align: center;
		box-shadow: var(--shadow-sm);
	}

	.result-card h3 {
		margin: 0 0 0.5rem 0;
		font-size: 1rem;
		font-weight: 700;
		color: var(--color-text-muted);
	}

	.result-value {
		font-size: 2rem;
		font-weight: 800;
		color: var(--color-primary);
		margin: 0;
	}

	.result-unit {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin-top: 0.25rem;
	}
	@media (max-width: 768px) {
		.calculator-title {
			font-size: 2rem;
			padding: 0 1rem;
		}

		.calculator-description {
			padding: 0 1rem;
		}

		.calculator-form {
			margin: 0 1rem;
			padding: 1.5rem;
		}

		.slider-container {
			flex-direction: column;
			align-items: stretch;
			gap: 0.5rem;
		}

		.slider-value {
			text-align: left;
		}

		.unit-toggle {
			flex-direction: row;
			gap: 0.25rem;
		}

		.unit-btn {
			font-size: 0.75rem;
			padding: 0.4rem;
		}
	}
</style>

<script src="/reactiveSharedValues.js" is:inline></script>

<script>
	// @ts-nocheck - Disable TypeScript checking for this Astro component

	class PotatoHackCalculator {
		private reactiveSharedValues: any;
		private currentPotatoUnit = "imperial";

		constructor() {
			// Initialize ReactiveSharedValues system
			if ((window as any).ReactiveSharedValues) {
				this.reactiveSharedValues = new (window as any).ReactiveSharedValues();
			}

			this.init();
		}

		private init(): void {
			// Set up event listeners
			this.setupEventListeners();

			// Initialize default values if not already set
			if (!this.reactiveSharedValues.get("potatoPounds")) {
				this.reactiveSharedValues.set("potatoPounds", "4.0");
			}
			if (!this.reactiveSharedValues.get("potatoKg")) {
				this.reactiveSharedValues.set("potatoKg", "1.8");
			}
			if (!this.reactiveSharedValues.get("tdee")) {
				this.reactiveSharedValues.set("tdee", "1700");
			}

			// Initialize unit from saved data or default
			const savedUnit = this.reactiveSharedValues.get("potatoUnit") || "imperial";
			console.log("Potato calculator initializing with unit:", savedUnit);
			console.log("Server-side default was 'imperial', but saved preference is:", savedUnit);

			this.togglePotatoUnit(savedUnit);

			// Initial slider update and calculation
			console.log("Initial values loaded:", {
				potatoPounds: this.reactiveSharedValues.get("potatoPounds"),
				potatoKg: this.reactiveSharedValues.get("potatoKg"),
				tdee: this.reactiveSharedValues.get("tdee"),
				unit: savedUnit,
			});

			this.updateVisibleSliders();
			this.calculateResults();
		}

		private setupEventListeners(): void {
			// Listen for precision-range-change events with bidirectional sync
			document.addEventListener("precision-range-change", (event) => {
				const customEvent = event as CustomEvent;
				const { sharedKey, value } = customEvent.detail;

				// Update ReactiveSharedValues for persistence
				this.reactiveSharedValues.set(sharedKey, value);

				// For potato weight changes, sync the corresponding unit
				if (sharedKey === "potatoPounds" && this.currentPotatoUnit === "imperial") {
					const kg = parseFloat(value) * 0.453592;
					this.reactiveSharedValues.set("potatoKg", kg.toFixed(2));
				} else if (sharedKey === "potatoKg" && this.currentPotatoUnit === "metric") {
					const lbs = parseFloat(value) / 0.453592;
					this.reactiveSharedValues.set("potatoPounds", lbs.toFixed(1));
				}

				// Recalculate results
				this.calculateResults();
			});

			// Listen for unit toggle changes
			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				const unit = customEvent.detail.value;
				const attribute = customEvent.detail.attribute;

				if (attribute === "potato-unit") {
					console.log("Potato unit toggle to:", unit);

					// Convert current potato values between units
					const currentPounds = parseFloat(this.reactiveSharedValues.get("potatoPounds") || "4.0");
					const currentKg = parseFloat(this.reactiveSharedValues.get("potatoKg") || "1.8");

					if (unit === "metric") {
						// Convert current pounds to kg
						const kg = currentPounds * 0.453592;
						this.reactiveSharedValues.set("potatoKg", kg.toFixed(2));
						console.log(`Converted ${currentPounds} lbs to ${kg.toFixed(2)} kg`);
					} else {
						// Convert current kg to pounds
						const lbs = currentKg / 0.453592;
						this.reactiveSharedValues.set("potatoPounds", lbs.toFixed(1));
						console.log(`Converted ${currentKg} kg to ${lbs.toFixed(1)} lbs`);
					}

					this.togglePotatoUnit(unit);
				}
			});

			// Listen for checkbox changes
			const cooledOvernight = document.getElementById("cooled-overnight");
			if (cooledOvernight) {
				cooledOvernight.addEventListener("change", () => {
					this.calculateResults();
				});
			}
		}

		private togglePotatoUnit(unit: string): void {
			this.currentPotatoUnit = unit;
			this.reactiveSharedValues.set("potatoUnit", unit);

			const imperialPotato = document.querySelector(".imperial-potato");
			const metricPotato = document.querySelector(".metric-potato");

			if (unit === "metric") {
				if (imperialPotato) imperialPotato.style.display = "none";
				if (metricPotato) metricPotato.style.display = "block";
			} else {
				if (imperialPotato) imperialPotato.style.display = "block";
				if (metricPotato) metricPotato.style.display = "none";
			}

			// Update the UnitToggle component to match the active unit
			const unitToggle = document.querySelector(".unit-toggle");
			if (unitToggle) {
				const buttons = unitToggle.querySelectorAll(".unit-btn");
				buttons.forEach((button: HTMLElement) => {
					const buttonUnit = button.getAttribute("data-potato-unit");
					if (buttonUnit === unit) {
						button.classList.add("active");
						console.log(`Updated button for ${buttonUnit} to active`);
					} else {
						button.classList.remove("active");
						console.log(`Updated button for ${buttonUnit} to inactive`);
					}
				});
			}

			// After sync, update the visible sliders to show converted values
			this.updateVisibleSliders();
			this.calculateResults();
		}

		private updateVisibleSliders(): void {
			// Update potato pounds slider
			const poundsInput = document.querySelector(
				"#potato-pounds .precision-range-input"
			) as HTMLInputElement;
			if (poundsInput) {
				const poundsValue = this.reactiveSharedValues.get("potatoPounds");
				if (poundsValue && poundsInput.value !== poundsValue.toString()) {
					poundsInput.value = poundsValue.toString();
					poundsInput.dispatchEvent(new Event("input", { bubbles: true }));
					console.log("Updated pounds input to:", poundsValue);
				}
			}

			// Update potato kg slider
			const kgInput = document.querySelector(
				"#potato-kg .precision-range-input"
			) as HTMLInputElement;
			if (kgInput) {
				const kgValue = this.reactiveSharedValues.get("potatoKg");
				if (kgValue && kgInput.value !== kgValue.toString()) {
					kgInput.value = kgValue.toString();
					kgInput.dispatchEvent(new Event("input", { bubbles: true }));
					console.log("Updated kg input to:", kgValue);
				}
			}

			// Update TDEE slider
			const tdeeInput = document.querySelector("#tdee .precision-range-input") as HTMLInputElement;
			if (tdeeInput) {
				const tdeeValue = this.reactiveSharedValues.get("tdee");
				if (tdeeValue && tdeeInput.value !== tdeeValue.toString()) {
					tdeeInput.value = tdeeValue.toString();
					tdeeInput.dispatchEvent(new Event("input", { bubbles: true }));
				}
			}
		}

		private calculateResults(): void {
			const potatoWeight =
				this.currentPotatoUnit === "imperial"
					? parseFloat(this.reactiveSharedValues.get("potatoPounds") || "4.0")
					: parseFloat(this.reactiveSharedValues.get("potatoKg") || "1.8");

			const tdee = parseFloat(this.reactiveSharedValues.get("tdee") || "1700");
			const cooledOvernight = document.getElementById("cooled-overnight") as HTMLInputElement;
			const isCooled = cooledOvernight?.checked || false;

			// Convert weight to grams for calculation
			let potatoGrams;
			if (this.currentPotatoUnit === "imperial") {
				potatoGrams = potatoWeight * 453.592; // pounds to grams
			} else {
				potatoGrams = potatoWeight * 1000; // kg to grams
			}

			// Potato calories: ~77 cal per 100g
			let totalCalories = (potatoGrams / 100) * 77;

			// If cooled overnight, resistant starch reduces available calories by 17%
			if (isCooled) {
				totalCalories = totalCalories * 0.83;
			}

			// Calculate deficit
			const calorieDeficit = tdee - totalCalories;

			// Fat loss calculation (1 lb fat = 3500 calories, 1 kg fat = 7700 calories)
			let threeDayFatChange, fourDayFatChange, fiveDayFatChange, weeklyFatChange;

			if (this.currentPotatoUnit === "imperial") {
				threeDayFatChange = (calorieDeficit * 3) / 3500;
				fourDayFatChange = (calorieDeficit * 4) / 3500;
				fiveDayFatChange = (calorieDeficit * 5) / 3500;
				weeklyFatChange = (calorieDeficit * 7) / 3500;
			} else {
				threeDayFatChange = (calorieDeficit * 3) / 7700;
				fourDayFatChange = (calorieDeficit * 4) / 7700;
				fiveDayFatChange = (calorieDeficit * 5) / 7700;
				weeklyFatChange = (calorieDeficit * 7) / 7700;
			}

			// Update displays
			const totalCaloriesDisplay = document.querySelector("#total-calories .result-value__number");
			const calorieDeficitDisplay = document.querySelector(
				"#calorie-deficit .result-value__number"
			);
			const threeDayChangeDisplay = document.querySelector(
				"#three-day-change .result-value__number"
			);
			const fourDayChangeDisplay = document.querySelector("#four-day-change .result-value__number");
			const fiveDayChangeDisplay = document.querySelector("#five-day-change .result-value__number");
			const weeklyChangeDisplay = document.querySelector("#weekly-change .result-value__number");

			// Unit displays
			const threeDayUnitDisplay = document.querySelector("#three-day-change .result-value__unit");
			const fourDayUnitDisplay = document.querySelector("#four-day-change .result-value__unit");
			const fiveDayUnitDisplay = document.querySelector("#five-day-change .result-value__unit");
			const weeklyUnitDisplay = document.querySelector("#weekly-change .result-value__unit");

			if (totalCaloriesDisplay) totalCaloriesDisplay.textContent = Math.round(totalCalories);
			if (calorieDeficitDisplay) calorieDeficitDisplay.textContent = Math.round(calorieDeficit);

			// Helper function to update fat change displays
			const updateFatChangeDisplay = (fatChange, changeDisplay, unitDisplay) => {
				if (changeDisplay) {
					const absChange = Math.abs(fatChange);
					changeDisplay.textContent = absChange.toFixed(1);
				}
				if (unitDisplay) {
					unitDisplay.textContent = this.currentPotatoUnit === "imperial" ? "lbs" : "kg";
				}
			};

			// Update all fat change displays
			updateFatChangeDisplay(threeDayFatChange, threeDayChangeDisplay, threeDayUnitDisplay);
			updateFatChangeDisplay(fourDayFatChange, fourDayChangeDisplay, fourDayUnitDisplay);
			updateFatChangeDisplay(fiveDayFatChange, fiveDayChangeDisplay, fiveDayUnitDisplay);
			updateFatChangeDisplay(weeklyFatChange, weeklyChangeDisplay, weeklyUnitDisplay);
		}
	}

	// Initialize the calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		console.log("=== POTATO HACK CALCULATOR INITIALIZATION ===");
		// Wait a brief moment to ensure all DOM elements are fully rendered
		setTimeout(() => {
			const calculator = new PotatoHackCalculator();
		}, 50);
	});
</script>
