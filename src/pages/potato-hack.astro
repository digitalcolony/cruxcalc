---
import Layout from "../layouts/Layout.astro";
---

<Layout
	title="Potato Hack Calorie Calculator - Potato Hack Diet Calculator"
	description="Calculate your daily calorie deficit on a potato-only diet. Includes resistant starch calculations for cooled potatoes (17% calorie reduction) and weekly fat loss estimates."
	image="/og-potato.png"
	imageAlt="Potato Hack Calculator - Calculate Your Daily Calorie Deficit"
	canonical="/potato-hack"
>
	<section class="calculator">
		<div class="container">
			<h1 class="calculator-title">Potato Hack Calculator</h1>
			<p class="calculator-description">
				Calculate your daily calorie deficit on a potato-only diet. Choose between pounds or
				kilograms for convenience. Cooling potatoes overnight increases resistant starch, reducing
				available calories by 17%. See the <a
					href="https://criticalmas.org/2017/08/math-behind-potato-hack/"
					target="_blank">math</a
				>.
			</p>
			<div class="calculator-form">
				<div class="form-group">
					<label for="potato-weight">Daily Weight of Cooked Potatoes Consumed</label>
					<div class="unit-toggle">
						<button class="unit-btn active" data-unit="imperial">lbs</button>
						<button class="unit-btn" data-unit="metric">kg</button>
					</div>

					<div class="weight-inputs imperial">
						<div class="slider-container">
							<input
								type="range"
								id="potato-pounds"
								min="3"
								max="5"
								step="0.1"
								value="4"
								class="slider"
							/>
							<div class="slider-value">
								<span id="potato-pounds-value">4.0</span> lbs
							</div>
						</div>
					</div>

					<div class="weight-inputs metric" style="display: none;">
						<div class="slider-container">
							<input
								type="range"
								id="potato-kg"
								min="1.4"
								max="2.3"
								step="0.05"
								value="1.8"
								class="slider"
							/>
							<div class="slider-value">
								<span id="potato-kg-value">1.8</span> kg
							</div>
						</div>
					</div>
				</div>

				<div class="form-group">
					<label class="checkbox-label">
						<input type="checkbox" id="cooled-overnight" />
						<span class="checkmark"></span>
						Cooled Overnight<br /> (17% resistant starch reduction)
					</label>
				</div>
				<div class="form-group">
					<label for="bmr">Your TDEE (Total Daily Energy Expenditure)</label>
					<input type="number" id="bmr" value="1700" min="800" max="3000" class="input-field" />
					<span class="input-unit">calories</span>
				</div>
				<div class="results">
					<div class="result-card">
						<h3>Total Calories Consumed</h3>
						<div class="result-value" id="total-calories">1400</div>
						<div class="result-unit">calories</div>
					</div>
					<div class="result-card">
						<h3>Daily Calorie Change</h3>
						<div class="result-value" id="calorie-deficit">300</div>
						<div class="result-unit">calories</div>
					</div>
					<div class="result-card">
						<h3>3 Day Hack</h3>
						<div class="result-value" id="three-day-change">0.3</div>
						<div class="result-unit" id="three-day-unit">lbs (loss)</div>
					</div>
					<div class="result-card">
						<h3>4 Day Hack</h3>
						<div class="result-value" id="four-day-change">0.3</div>
						<div class="result-unit" id="four-day-unit">lbs (loss)</div>
					</div>
					<div class="result-card">
						<h3>5 Day Hack</h3>
						<div class="result-value" id="five-day-change">0.4</div>
						<div class="result-unit" id="five-day-unit">lbs (loss)</div>
					</div>
					<div class="result-card">
						<h3>Estimated Weekly Fat Change</h3>
						<div class="result-value" id="weekly-fat-change">0.6</div>
						<div class="result-unit" id="fat-change-unit">lbs fat loss</div>
					</div>
				</div>
			</div>
		</div>
	</section>
</Layout>

<style>
	.calculator {
		padding: 2rem 0;
	}

	.calculator-title {
		font-size: 2.5rem;
		font-weight: 800;
		margin: 0 0 1rem 0;
		color: var(--color-primary);
		text-align: center;
	}

	.calculator-description {
		text-align: center;
		margin: 0 0 2rem 0;
		color: var(--color-text-muted);
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.calculator-form {
		max-width: 500px;
		margin: 0 auto;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.form-group {
		margin-bottom: 2rem;
	}

	.form-group:last-child {
		margin-bottom: 0;
	}
	label {
		display: block;
		font-weight: 700;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.weight-inputs {
		display: block;
	}

	.slider-container {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.slider {
		flex: 1;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
		appearance: none;
	}

	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider::-moz-range-thumb {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider-value {
		font-weight: 700;
		color: var(--color-primary);
		min-width: 80px;
		text-align: center;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		cursor: pointer;
		font-weight: 700;
		gap: 0.75rem;
	}

	.checkbox-label input[type="checkbox"] {
		display: none;
	}

	.checkmark {
		width: 20px;
		height: 20px;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		position: relative;
		transition: all 0.2s ease;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark {
		background: var(--color-primary);
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
		content: "âœ“";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: white;
		font-weight: 700;
		font-size: 14px;
	}
	.input-field {
		max-width: 200px;
		width: 100%;
		padding: 0.75rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		font-family: inherit;
		font-weight: 700;
		font-size: 1rem;
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
	}

	.input-field:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: var(--shadow-md);
	}

	.input-unit {
		display: inline-block;
		margin-top: 0.5rem;
		color: var(--color-text-muted);
		font-size: 0.875rem;
	}

	.results {
		margin-top: 2rem;
		display: grid;
		gap: 1rem;
	}

	.result-card {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		text-align: center;
		box-shadow: var(--shadow-sm);
	}

	.result-card h3 {
		margin: 0 0 0.5rem 0;
		font-size: 1rem;
		font-weight: 700;
		color: var(--color-text-muted);
	}

	.result-value {
		font-size: 2rem;
		font-weight: 800;
		color: var(--color-primary);
		margin: 0;
	}

	.result-unit {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin-top: 0.25rem;
	}
	@media (max-width: 768px) {
		.calculator-title {
			font-size: 2rem;
			padding: 0 1rem;
		}

		.calculator-description {
			padding: 0 1rem;
		}

		.calculator-form {
			margin: 0 1rem;
			padding: 1.5rem;
		}

		.slider-container {
			flex-direction: column;
			align-items: stretch;
			gap: 0.5rem;
		}

		.slider-value {
			text-align: left;
		}

		.unit-toggle {
			flex-direction: row;
			gap: 0.25rem;
		}

		.unit-btn {
			font-size: 0.75rem;
			padding: 0.4rem;
		}
	}
</style>

<script type="module">
	import sharedValues from "/sharedValues.js";

	// Get DOM elements
	const potatoPoundsSlider = document.getElementById("potato-pounds");
	const potatoKgSlider = document.getElementById("potato-kg");
	const potatoPoundsValue = document.getElementById("potato-pounds-value");
	const potatoKgValue = document.getElementById("potato-kg-value");
	const cooledCheckbox = document.getElementById("cooled-overnight");
	const bmrInput = document.getElementById("bmr");
	const totalCaloriesDisplay = document.getElementById("total-calories");
	const calorieDeficitDisplay = document.getElementById("calorie-deficit");
	const threeDayChangeDisplay = document.getElementById("three-day-change");
	const threeDayUnitDisplay = document.getElementById("three-day-unit");
	const fourDayChangeDisplay = document.getElementById("four-day-change");
	const fourDayUnitDisplay = document.getElementById("four-day-unit");
	const fiveDayChangeDisplay = document.getElementById("five-day-change");
	const fiveDayUnitDisplay = document.getElementById("five-day-unit");
	const weeklyFatChangeDisplay = document.getElementById("weekly-fat-change");
	const fatChangeUnitDisplay = document.getElementById("fat-change-unit");

	// Current unit state
	let currentWeightUnit = "imperial";

	// Conversion functions
	function poundsToKg(pounds) {
		return pounds * 0.453592;
	}

	function kgToPounds(kg) {
		return kg / 0.453592;
	}

	// Initialize BMR value from shared data or default
	function initializeBMR() {
		const values = sharedValues.load();
		const savedTDEE = localStorage.getItem("cruxcalc-tdee-mifflin");

		if (savedTDEE) {
			bmrInput.value = savedTDEE;
		} else if (values.bmr) {
			// Fallback to shared values BMR if available
			bmrInput.value = values.bmr.toString();
		} else {
			// Default to 1700
			bmrInput.value = "1700";
		}
	}

	// Calculate Mifflin-St Jeor BMR from shared values if no saved BMR exists
	function calculateMifflinBMR() {
		const values = sharedValues.load();

		if (!values.age || !values.heightCm || !values.weightKg || !values.gender) {
			return null; // Can't calculate without complete data
		}

		const { age, heightCm, weightKg, gender } = values;

		let bmr = 10 * weightKg + 6.25 * heightCm - 5 * age;
		bmr += gender === "male" ? 5 : -161;

		return Math.round(bmr);
	}

	// Enhanced BMR initialization
	function initializeBMREnhanced() {
		// Priority 1: Saved TDEE from BMR calculator
		const savedTDEE = localStorage.getItem("cruxcalc-tdee-mifflin");

		if (savedTDEE) {
			bmrInput.value = savedTDEE;
			return;
		}

		// Priority 2: Calculate from shared values if available
		const calculatedBMR = calculateMifflinBMR();
		if (calculatedBMR) {
			bmrInput.value = calculatedBMR.toString();
			return;
		}

		// Priority 3: Check shared values for BMR
		const values = sharedValues.load();
		if (values.bmr) {
			bmrInput.value = values.bmr.toString();
			return;
		}

		// Priority 4: Default to 1700
		bmrInput.value = "1700";
	}

	// Save BMR value to shared storage
	function saveBMRValue() {
		const currentBMR = parseInt(bmrInput.value) || 1700;
		const values = sharedValues.load();
		values.bmr = currentBMR;
		sharedValues.save(values);

		// Also save the potato hack specific data
		const potatoData = {
			potatoPounds: parseFloat(potatoPoundsSlider.value),
			potatoKg: parseFloat(potatoKgSlider.value),
			cooledOvernight: cooledCheckbox.checked,
			bmr: currentBMR,
			weightUnit: currentWeightUnit,
		};
		localStorage.setItem("cruxcalc-potato-hack", JSON.stringify(potatoData));
	}

	// Load potato hack specific data
	function loadPotatoData() {
		try {
			const saved = localStorage.getItem("cruxcalc-potato-hack");
			if (saved) {
				const data = JSON.parse(saved);
				if (data.potatoPounds) potatoPoundsSlider.value = data.potatoPounds.toString();
				if (data.potatoKg) potatoKgSlider.value = data.potatoKg.toString();
				if (data.cooledOvernight !== undefined) cooledCheckbox.checked = data.cooledOvernight;
				if (data.weightUnit) currentWeightUnit = data.weightUnit;
			}
		} catch (error) {
			console.warn("Error loading potato hack data:", error);
		}
	}

	// Update display values
	function updateDisplays() {
		if (potatoPoundsValue)
			potatoPoundsValue.textContent = parseFloat(potatoPoundsSlider.value).toFixed(1);
		if (potatoKgValue) potatoKgValue.textContent = parseFloat(potatoKgSlider.value).toFixed(1);
	}

	// Sync weight values between units
	function syncWeightValues(fromUnit) {
		if (fromUnit === "imperial") {
			const pounds = parseFloat(potatoPoundsSlider.value);
			const kg = poundsToKg(pounds);
			potatoKgSlider.value = kg.toFixed(2);
		} else {
			const kg = parseFloat(potatoKgSlider.value);
			const pounds = kgToPounds(kg);
			potatoPoundsSlider.value = pounds.toFixed(1);
		}
		updateDisplays();
	}

	function calculateCalories() {
		// Get weight in pounds (convert if needed)
		let pounds;
		if (currentWeightUnit === "imperial") {
			pounds = parseFloat(potatoPoundsSlider.value);
		} else {
			pounds = kgToPounds(parseFloat(potatoKgSlider.value));
		}

		const isCooled = cooledCheckbox.checked;
		const bmr = parseInt(bmrInput.value) || 1700;

		// Calculate potato calories (350 per pound)
		let potatoCalories = pounds * 350;

		// Apply resistant starch reduction if cooled overnight
		if (isCooled) {
			potatoCalories = potatoCalories * (1 - 0.17); // 17% reduction
		}

		// Round to nearest calorie
		potatoCalories = Math.round(potatoCalories);
		// Calculate deficit
		const deficit = bmr - potatoCalories;
		// Calculate weekly fat change (3500 calories = 1 pound of fat)
		const weeklyCalorieChange = deficit * 7;
		const weeklyFatChange = weeklyCalorieChange / 3500;

		// Calculate 3, 4, and 5 day estimates
		const threeDayCalorieChange = deficit * 3;
		const threeDayFatChange = threeDayCalorieChange / 3500;

		const fourDayCalorieChange = deficit * 4;
		const fourDayFatChange = fourDayCalorieChange / 3500;

		const fiveDayCalorieChange = deficit * 5;
		const fiveDayFatChange = fiveDayCalorieChange / 3500;

		// Update displays
		totalCaloriesDisplay.textContent = potatoCalories.toString();
		// Add minus sign for deficits (negative values)
		calorieDeficitDisplay.textContent = deficit < 0 ? deficit.toString() : `-${deficit}`;
		// Helper function to update fat change display
		function updateFatChangeDisplay(fatChange, valueElement, unitElement, dayLabel) {
			const displayWeight =
				currentWeightUnit === "metric" ? poundsToKg(Math.abs(fatChange)) : Math.abs(fatChange);
			const unitLabel = currentWeightUnit === "metric" ? "kg" : "lbs";

			if (deficit > 0) {
				valueElement.textContent = `-${displayWeight.toFixed(1)}`;
				unitElement.textContent = `${unitLabel} (loss)`;
			} else if (deficit < 0) {
				valueElement.textContent = `+${displayWeight.toFixed(1)}`;
				unitElement.textContent = `${unitLabel} (gain)`;
			} else {
				valueElement.textContent = "0.0";
				unitElement.textContent = `${unitLabel} (maintenance)`;
			}
		}

		// Update 3, 4, 5 day displays
		updateFatChangeDisplay(threeDayFatChange, threeDayChangeDisplay, threeDayUnitDisplay, "3 Day");
		updateFatChangeDisplay(fourDayFatChange, fourDayChangeDisplay, fourDayUnitDisplay, "4 Day");
		updateFatChangeDisplay(fiveDayFatChange, fiveDayChangeDisplay, fiveDayUnitDisplay, "5 Day");

		// Update weekly fat change display
		const weeklyDisplayWeight =
			currentWeightUnit === "metric"
				? poundsToKg(Math.abs(weeklyFatChange))
				: Math.abs(weeklyFatChange);
		const weeklyUnitLabel = currentWeightUnit === "metric" ? "kg fat" : "lbs fat";

		if (deficit > 0) {
			weeklyFatChangeDisplay.textContent = `-${weeklyDisplayWeight.toFixed(1)}`;
			fatChangeUnitDisplay.textContent = `${weeklyUnitLabel} loss`;
		} else if (deficit < 0) {
			weeklyFatChangeDisplay.textContent = `+${weeklyDisplayWeight.toFixed(1)}`;
			fatChangeUnitDisplay.textContent = `${weeklyUnitLabel} gain`;
		} else {
			weeklyFatChangeDisplay.textContent = "0.0";
			fatChangeUnitDisplay.textContent = `${weeklyUnitLabel} (maintenance)`;
		}

		// Save values after calculation
		saveBMRValue();
	}

	// Initialize unit toggle display
	function initializeUnitToggle() {
		const toggle = document.querySelector(".unit-toggle");
		if (toggle) {
			toggle.querySelectorAll(".unit-btn").forEach((btn) => {
				btn.classList.remove("active");
				if (btn.dataset.unit === currentWeightUnit) {
					btn.classList.add("active");
				}
			});

			// Show/hide appropriate inputs
			const inputGroup = toggle.closest(".form-group");
			inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
				input.style.display = input.classList.contains(currentWeightUnit) ? "block" : "none";
			});
		}
	}

	// Event listeners
	potatoPoundsSlider.addEventListener("input", () => {
		syncWeightValues("imperial");
		calculateCalories();
	});

	potatoKgSlider.addEventListener("input", () => {
		syncWeightValues("metric");
		calculateCalories();
	});

	cooledCheckbox.addEventListener("change", calculateCalories);
	bmrInput.addEventListener("input", calculateCalories);

	// Unit toggle functionality
	document.querySelector(".unit-toggle")?.addEventListener("click", (e) => {
		const target = e.target;
		if (!target?.classList.contains("unit-btn")) return;

		const unit = target.dataset.unit;
		currentWeightUnit = unit || "imperial";

		// Update active state
		const toggle = target.closest(".unit-toggle");
		toggle.querySelectorAll(".unit-btn").forEach((btn) => btn.classList.remove("active"));
		target.classList.add("active");

		// Show/hide appropriate inputs
		const inputGroup = target.closest(".form-group");
		inputGroup?.querySelectorAll(".weight-inputs").forEach((input) => {
			input.style.display = input.classList.contains(unit || "imperial") ? "block" : "none";
		});

		updateDisplays();
		calculateCalories();
	});

	// Initialize on page load
	loadPotatoData();
	initializeBMREnhanced();
	initializeUnitToggle();
	updateDisplays();
	calculateCalories();
</script>
