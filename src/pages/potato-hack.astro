---
import Layout from "../layouts/Layout.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import RangeSlider from "../components/RangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import ValidationDisplay from "../components/ValidationDisplay.astro";
---

<Layout
	title="Potato Hack Calorie Calculator - Potato Hack Diet Calculator"
	description="Calculate your daily calorie deficit on a potato-only diet. Includes resistant starch calculations for cooled potatoes (17% calorie reduction) and weekly fat loss estimates."
	image="/og-potato.png"
	imageAlt="Potato Hack Calculator - Calculate Your Daily Calorie Deficit"
	canonical="/potato-hack"
>
	<CalculatorLayout
		title="Potato Hack Calculator"
		description="Calculate your daily calorie deficit on a potato-only diet. Choose between pounds or kilograms for convenience. Cooling potatoes overnight increases resistant starch, reducing available calories by 17%."
	>
		<div slot="inputs">
			<InputGroup
				label="Daily Weight of Cooked Potatoes"
				helpText="Choose your preferred measurement system"
			>
				<UnitToggle
					options={[
						{ value: "imperial", label: "lbs" },
						{ value: "metric", label: "kg" },
					]}
					activeValue="imperial"
					dataAttribute="potato-unit"
				/>
			</InputGroup>

			<div class="weight-inputs imperial-potato" data-unit-group="imperial">
				<InputGroup
					label="Potato Weight"
					helpText="Amount of cooked potatoes consumed daily"
					class="full-width"
				>
					<RangeSlider
						id="potato-pounds"
						label=""
						min={3}
						max={5}
						step={0.1}
						value={4}
						unit="lbs"
						sharedKey="potatoPounds"
					/>
				</InputGroup>
			</div>

			<div class="weight-inputs metric-potato" data-unit-group="metric" style="display: none;">
				<InputGroup
					label="Potato Weight"
					helpText="Amount of cooked potatoes consumed daily"
					class="full-width"
				>
					<RangeSlider
						id="potato-kg"
						label=""
						min={1.4}
						max={2.3}
						step={0.05}
						value={1.8}
						unit="kg"
						sharedKey="potatoKg"
					/>
				</InputGroup>
			</div>

			<InputGroup
				label="Resistant Starch Option"
				helpText="Cooled potatoes have increased resistant starch"
			>
				<div class="checkbox-container">
					<label class="checkbox-label">
						<input type="checkbox" id="cooled-overnight" />
						<span class="checkmark"></span>
						Cooled Overnight (17% calorie reduction)
					</label>
				</div>
			</InputGroup>

			<InputGroup label="Your TDEE" helpText="Total Daily Energy Expenditure in calories">
				<RangeSlider
					id="tdee"
					label=""
					min={800}
					max={3000}
					step={50}
					value={1700}
					unit="calories"
					sharedKey="tdee"
				/>
			</InputGroup>

			<ValidationDisplay />
		</div>

		<div slot="results">
			<div class="main-results">
				<ResultCard title="Total Calories Consumed" variant="primary">
					<ResultValue id="total-calories" value={1400} unit="calories" size="xl" color="primary" />
					<p slot="description" class="result-description">From daily potato consumption</p>
				</ResultCard>

				<ResultCard title="Daily Calorie Change" variant="success">
					<ResultValue id="calorie-deficit" value={-300} unit="deficit" size="xl" color="success" />
					<p slot="description" class="result-description">Compared to your TDEE</p>
				</ResultCard>
			</div>

			<div class="duration-results">
				<h3>Weight Loss Projections</h3>
				<div class="duration-grid">
					<ResultCard title="3 Day Hack" variant="default">
						<ResultValue
							id="three-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="4 Day Hack" variant="default">
						<ResultValue
							id="four-day-change"
							value={0.3}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="5 Day Hack" variant="default">
						<ResultValue
							id="five-day-change"
							value={0.4}
							unit="lbs loss"
							size="lg"
							color="default"
						/>
					</ResultCard>

					<ResultCard title="Weekly Hack" variant="warning">
						<ResultValue id="weekly-change" value={0.6} unit="lbs loss" size="lg" color="warning" />
					</ResultCard>
				</div>
			</div>

			<div class="formula-info">
				<h4>Formula & Notes</h4>
				<p class="formula-note">
					Cooled potatoes contain resistant starch which reduces available calories by approximately
					17%. Weight loss calculations use 3,500 calories = 1 pound of fat loss. See the <a
						href="https://criticalmas.org/2017/08/math-behind-potato-hack/"
						target="_blank">math behind potato hack</a
					> for details.
				</p>
			</div>
		</div>
	</CalculatorLayout>
</Layout>
<div class="result-value" id="five-day-change">0.4</div>
<div class="result-unit" id="five-day-unit">lbs (loss)</div>

<div class="result-card">
	<h3>Estimated Weekly Fat Change</h3>
	<div class="result-value" id="weekly-fat-change">0.6</div>
	<div class="result-unit" id="fat-change-unit">lbs fat loss</div>
</div>

<style>
	.calculator {
		padding: 2rem 0;
	}

	.calculator-title {
		font-size: 2.5rem;
		font-weight: 800;
		margin: 0 0 1rem 0;
		color: var(--color-primary);
		text-align: center;
	}

	.calculator-description {
		text-align: center;
		margin: 0 0 2rem 0;
		color: var(--color-text-muted);
		max-width: 600px;
		margin-left: auto;
		margin-right: auto;
	}

	.calculator-form {
		max-width: 500px;
		margin: 0 auto;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.form-group {
		margin-bottom: 2rem;
	}

	.form-group:last-child {
		margin-bottom: 0;
	}
	label {
		display: block;
		font-weight: 700;
		margin-bottom: 0.5rem;
		color: var(--color-text);
	}

	/* Unit Toggle */
	.unit-toggle {
		display: flex;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.unit-btn {
		flex: 1;
		padding: 0.5rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-background);
		color: var(--color-text);
		cursor: pointer;
		transition: all 0.2s ease;
		font-weight: 500;
		font-size: 0.875rem;
	}

	.unit-btn:hover {
		border-color: var(--color-primary);
	}

	.unit-btn.active {
		background: var(--color-primary);
		color: white;
		border-color: var(--color-primary);
	}

	.weight-inputs {
		display: block;
	}

	.slider-container {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.slider {
		flex: 1;
		height: 8px;
		border-radius: 4px;
		background: var(--color-border);
		outline: none;
		-webkit-appearance: none;
		appearance: none;
	}

	.slider::-webkit-slider-thumb {
		-webkit-appearance: none;
		appearance: none;
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider::-moz-range-thumb {
		width: 24px;
		height: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 3px solid var(--color-border);
		cursor: pointer;
		box-shadow: var(--shadow-sm);
	}

	.slider-value {
		font-weight: 700;
		color: var(--color-primary);
		min-width: 80px;
		text-align: center;
	}

	.checkbox-label {
		display: flex;
		align-items: center;
		cursor: pointer;
		font-weight: 700;
		gap: 0.75rem;
	}

	.checkbox-label input[type="checkbox"] {
		display: none;
	}

	.checkmark {
		width: 20px;
		height: 20px;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		position: relative;
		transition: all 0.2s ease;
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark {
		background: var(--color-primary);
	}

	.checkbox-label input[type="checkbox"]:checked + .checkmark::after {
		content: "âœ“";
		position: absolute;
		top: 50%;
		left: 50%;
		transform: translate(-50%, -50%);
		color: white;
		font-weight: 700;
		font-size: 14px;
	}
	.input-field {
		max-width: 200px;
		width: 100%;
		padding: 0.75rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		background: var(--color-surface);
		color: var(--color-text);
		font-family: inherit;
		font-weight: 700;
		font-size: 1rem;
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
	}

	.input-field:focus {
		outline: none;
		border-color: var(--color-primary);
		box-shadow: var(--shadow-md);
	}

	.input-unit {
		display: inline-block;
		margin-top: 0.5rem;
		color: var(--color-text-muted);
		font-size: 0.875rem;
	}

	.results {
		margin-top: 2rem;
		display: grid;
		gap: 1rem;
	}

	.result-card {
		background: var(--color-bg);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 1.5rem;
		text-align: center;
		box-shadow: var(--shadow-sm);
	}

	.result-card h3 {
		margin: 0 0 0.5rem 0;
		font-size: 1rem;
		font-weight: 700;
		color: var(--color-text-muted);
	}

	.result-value {
		font-size: 2rem;
		font-weight: 800;
		color: var(--color-primary);
		margin: 0;
	}

	.result-unit {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin-top: 0.25rem;
	}
	@media (max-width: 768px) {
		.calculator-title {
			font-size: 2rem;
			padding: 0 1rem;
		}

		.calculator-description {
			padding: 0 1rem;
		}

		.calculator-form {
			margin: 0 1rem;
			padding: 1.5rem;
		}

		.slider-container {
			flex-direction: column;
			align-items: stretch;
			gap: 0.5rem;
		}

		.slider-value {
			text-align: left;
		}

		.unit-toggle {
			flex-direction: row;
			gap: 0.25rem;
		}

		.unit-btn {
			font-size: 0.75rem;
			padding: 0.4rem;
		}
	}
</style>

<script>
	// @ts-nocheck
	import { ReactiveSharedValues } from "/reactiveSharedValues.js";

	class PotatoHackCalculator {
		constructor() {
			this.potatoUnit = "imperial";
			this.potatoPounds = 4.0;
			this.potatoKg = 1.8;
			this.cooledOvernight = false;
			this.tdee = 1700;

			this.setupEventListeners();
			this.setupSharedValues();
		}

		setupEventListeners() {
			// Unit toggle events
			document.addEventListener("unitToggle", (event) => {
				const { unit, dataAttribute } = event.detail;
				if (dataAttribute === "potato-unit") {
					this.handleUnitToggle(unit);
				}
			});

			// SharedValues change events
			document.addEventListener("sharedValuesChanged", (event) => {
				const { key, value } = event.detail;
				this.handleSharedValueChange(key, value);
			});

			// Checkbox change event
			const checkbox = document.getElementById("cooled-overnight");
			if (checkbox) {
				checkbox.addEventListener("change", (e) => {
					this.cooledOvernight = e.target.checked;
					this.calculateAndDisplay();
				});
			}
		}

		setupSharedValues() {
			// Initialize SharedValues with current values
			ReactiveSharedValues.set("potatoPounds", this.potatoPounds);
			ReactiveSharedValues.set("potatoKg", this.potatoKg);
			ReactiveSharedValues.set("tdee", this.tdee);

			// Initial calculation
			this.calculateAndDisplay();
		}

		handleUnitToggle(unit) {
			this.potatoUnit = unit;
			const imperialInputs = document.querySelector(".imperial-potato");
			const metricInputs = document.querySelector(".metric-potato");

			if (unit === "metric") {
				imperialInputs.style.display = "none";
				metricInputs.style.display = "block";
				// Convert pounds to kg
				this.potatoKg = Math.round(this.potatoPounds * 0.453592 * 20) / 20; // Round to nearest 0.05
				ReactiveSharedValues.set("potatoKg", this.potatoKg);
			} else {
				imperialInputs.style.display = "block";
				metricInputs.style.display = "none";
				// Convert kg to pounds
				this.potatoPounds = Math.round((this.potatoKg / 0.453592) * 10) / 10; // Round to nearest 0.1
				ReactiveSharedValues.set("potatoPounds", this.potatoPounds);
			}
			this.calculateAndDisplay();
		}

		handleSharedValueChange(key, value) {
			switch (key) {
				case "potatoPounds":
					this.potatoPounds = value;
					this.potatoKg = Math.round(value * 0.453592 * 20) / 20;
					ReactiveSharedValues.set("potatoKg", this.potatoKg);
					break;
				case "potatoKg":
					this.potatoKg = value;
					this.potatoPounds = Math.round((value / 0.453592) * 10) / 10;
					ReactiveSharedValues.set("potatoPounds", this.potatoPounds);
					break;
				case "tdee":
					this.tdee = value;
					break;
			}
			this.calculateAndDisplay();
		}

		calculateCalories() {
			// Get current potato weight in pounds for calculation
			let potatoPounds =
				this.potatoUnit === "metric" ? this.potatoKg / 0.453592 : this.potatoPounds;

			// Base calories: ~350 calories per pound of cooked potato
			let totalCalories = potatoPounds * 350;

			// Apply resistant starch reduction if cooled overnight
			if (this.cooledOvernight) {
				totalCalories *= 0.83; // 17% reduction
			}

			return Math.round(totalCalories);
		}

		calculateWeightLoss(calories, days) {
			const totalDeficit = calories * days;
			const poundsLoss = totalDeficit / 3500; // 3500 calories = 1 pound
			return Math.round(poundsLoss * 10) / 10; // Round to 1 decimal
		}

		calculateAndDisplay() {
			const totalCalories = this.calculateCalories();
			const calorieDeficit = this.tdee - totalCalories;

			// Update main results
			const totalCaloriesElement = document.getElementById("total-calories");
			const calorieDeficitElement = document.getElementById("calorie-deficit");

			if (totalCaloriesElement) {
				totalCaloriesElement.textContent = totalCalories;
			}
			if (calorieDeficitElement) {
				calorieDeficitElement.textContent =
					calorieDeficit > 0 ? calorieDeficit : Math.abs(calorieDeficit);
			}

			// Update weight loss projections
			const threeDayLoss = this.calculateWeightLoss(calorieDeficit, 3);
			const fourDayLoss = this.calculateWeightLoss(calorieDeficit, 4);
			const fiveDayLoss = this.calculateWeightLoss(calorieDeficit, 5);
			const weeklyLoss = this.calculateWeightLoss(calorieDeficit, 7);

			const threeDayElement = document.getElementById("three-day-change");
			const fourDayElement = document.getElementById("four-day-change");
			const fiveDayElement = document.getElementById("five-day-change");
			const weeklyElement = document.getElementById("weekly-change");

			if (threeDayElement) threeDayElement.textContent = threeDayLoss;
			if (fourDayElement) fourDayElement.textContent = fourDayLoss;
			if (fiveDayElement) fiveDayElement.textContent = fiveDayLoss;
			if (weeklyElement) weeklyElement.textContent = weeklyLoss;
		}
	}

	// Initialize calculator when DOM is ready
	document.addEventListener("DOMContentLoaded", () => {
		window.potatoHackCalculator = new PotatoHackCalculator();
	});
</script>
