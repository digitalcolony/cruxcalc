---
import ResultCard from "../components/ResultCard.astro";
import ResultValue from "../components/ResultValue.astro";
import CategoryBadge from "../components/CategoryBadge.astro";
import ComparisonTable from "../components/ComparisonTable.astro";
import CalculatorLayout from "../components/CalculatorLayout.astro";
import InputGroup from "../components/InputGroup.astro";
import Layout from "../layouts/Layout.astro";
import RangeSlider from "../components/RangeSlider.astro";
import UnitToggle from "../components/UnitToggle.astro";
import GenderToggle from "../components/GenderToggle.astro";
---

<Layout
	title="Component Showcase - CruxCalc Components"
	description="Interactive showcase of reusable CruxCalc components for testing and documentation."
>
	<section class="showcase-page">
		<div class="container">
			<div class="showcase-header">
				<h1>Component Showcase</h1>
				<p>Interactive examples of all reusable components</p>
			</div>

			<div class="component-section">
				<h2>RangeSlider Component</h2>
				<p class="component-description">
					RangeSlider components can be used standalone or within InputGroup components. The modern
					pattern (used in calculators) wraps sliders in InputGroup for consistent styling.
				</p>

				<h3>Modern Pattern - RangeSlider with InputGroup</h3>
				<div class="component-examples">
					<div class="example">
						<h4>Height (Imperial) - formatAsHeight</h4>
						<InputGroup
							label="Height"
							helpText="Single slider displaying total inches as feet'inches"
						>
							<RangeSlider
								id="height-total-inches-demo"
								label=""
								min={48}
								max={84}
								step={0.5}
								value={68}
								unit=""
								sharedKey="heightTotalInches"
								formatAsHeight={true}
							/>
						</InputGroup>
					</div>

					<div class="example">
						<h4>Height (Metric)</h4>
						<InputGroup label="Height" helpText="Enter your height in centimeters">
							<RangeSlider
								id="height-cm-demo"
								label=""
								min={120}
								max={220}
								value={175}
								unit="cm"
								sharedKey="heightCm"
							/>
						</InputGroup>
					</div>

					<div class="example">
						<h4>Weight (Imperial)</h4>
						<InputGroup label="Weight" helpText="Enter your current weight in pounds">
							<RangeSlider
								id="weight-lbs-demo"
								label=""
								min={80}
								max={400}
								value={160}
								unit="lbs"
								sharedKey="weightLbs"
							/>
						</InputGroup>
					</div>

					<div class="example">
						<h4>Weight (Metric)</h4>
						<InputGroup label="Weight" helpText="Enter your current weight in kilograms">
							<RangeSlider
								id="weight-kg-demo"
								label=""
								min={35}
								max={180}
								value={73}
								unit="kg"
								sharedKey="weightKg"
							/>
						</InputGroup>
					</div>

					<div class="example">
						<h4>Body Fat Percentage</h4>
						<InputGroup label="Body Fat %" helpText="Enter your body fat percentage if known">
							<RangeSlider
								id="body-fat-demo"
								label=""
								min={3}
								max={50}
								step={0.1}
								value={15.5}
								unit="%"
							/>
						</InputGroup>
					</div>

					<div class="example">
						<h4>Age</h4>
						<InputGroup label="Age" helpText="Your age in years">
							<RangeSlider
								id="age-demo"
								label=""
								min={15}
								max={100}
								value={30}
								unit="years"
								sharedKey="age"
							/>
						</InputGroup>
					</div>
				</div>

				<h3>Legacy Pattern - Standalone RangeSlider</h3>
				<div class="component-examples legacy-examples">
					<div class="example">
						<h4>Standalone with Label</h4>
						<RangeSlider
							id="standalone-demo"
							label="Standalone Slider"
							min={0}
							max={100}
							step={1}
							value={50}
							unit="units"
							helpText="This pattern is less commonly used in modern calculators"
						/>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>PrecisionRangeSlider Component</h2>
				<p>
					Enhanced range slider for mobile devices with touch-friendly precision controls. Combines
					a visual slider for coarse adjustment with increment/decrement buttons and direct number
					input for precise values.
				</p>

				<div class="component-examples">
					<div class="example">
						<h3>Body Fat Percentage - High Precision</h3>
						<div class="precision-range-wrapper">
							<label for="bodyfat-precision" class="precision-label">Body Fat Percentage</label>
							<div class="precision-range-slider">
								<input
									type="range"
									id="bodyfat-precision"
									min="3"
									max="50"
									step="0.1"
									value="15.5"
									class="precision-range-input"
								/>
								<div class="precision-controls">
									<button
										type="button"
										class="precision-btn precision-decrement"
										data-target="bodyfat-precision">−</button
									>
									<input
										type="number"
										id="bodyfat-precision-number"
										min="3"
										max="50"
										step="0.1"
										value="15.5"
										class="precision-number-input"
									/>
									<button
										type="button"
										class="precision-btn precision-increment"
										data-target="bodyfat-precision">+</button
									>
								</div>
								<div class="precision-display">
									<span id="bodyfat-precision-display">15.5</span>
									<span class="precision-unit">%</span>
								</div>
							</div>
							<p class="input-help">
								Use slider for quick adjustment, +/- buttons or direct input for precision
							</p>
						</div>
					</div>

					<div class="example">
						<h3>Weight - Medium Precision</h3>
						<div class="precision-range-wrapper">
							<label for="weight-precision" class="precision-label">Weight</label>
							<div class="precision-range-slider">
								<input
									type="range"
									id="weight-precision"
									min="80"
									max="400"
									step="0.5"
									value="160"
									class="precision-range-input"
								/>
								<div class="precision-controls">
									<button
										type="button"
										class="precision-btn precision-decrement"
										data-target="weight-precision">−</button
									>
									<input
										type="number"
										id="weight-precision-number"
										min="80"
										max="400"
										step="0.5"
										value="160"
										class="precision-number-input"
									/>
									<button
										type="button"
										class="precision-btn precision-increment"
										data-target="weight-precision">+</button
									>
								</div>
								<div class="precision-display">
									<span id="weight-precision-display">160</span>
									<span class="precision-unit">lbs</span>
								</div>
							</div>
							<p class="input-help">Optimized for mobile touch with 44px minimum touch targets</p>
						</div>
					</div>

					<div class="example">
						<h3>Age - Coarse Values</h3>
						<div class="precision-range-wrapper">
							<label for="age-precision" class="precision-label">Age</label>
							<div class="precision-range-slider">
								<input
									type="range"
									id="age-precision"
									min="15"
									max="80"
									step="1"
									value="30"
									class="precision-range-input"
								/>
								<div class="precision-controls">
									<button
										type="button"
										class="precision-btn precision-decrement"
										data-target="age-precision">−</button
									>
									<input
										type="number"
										id="age-precision-number"
										min="15"
										max="80"
										step="1"
										value="30"
										class="precision-number-input"
									/>
									<button
										type="button"
										class="precision-btn precision-increment"
										data-target="age-precision">+</button
									>
								</div>
								<div class="precision-display">
									<span id="age-precision-display">30</span>
									<span class="precision-unit">years</span>
								</div>
							</div>
							<p class="input-help">Integer values with single unit increments</p>
						</div>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>UnitToggle Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Height Units</h3>
						<UnitToggle
							options={[
								{ value: "imperial", label: "ft/in" },
								{ value: "metric", label: "cm" },
							]}
							activeValue="imperial"
							dataAttribute="height-unit"
						/>
					</div>

					<div class="example">
						<h3>Weight Units</h3>
						<UnitToggle
							options={[
								{ value: "imperial", label: "lbs" },
								{ value: "metric", label: "kg" },
							]}
							activeValue="imperial"
							dataAttribute="weight-unit"
						/>
					</div>

					<div class="example">
						<h3>Distance Units</h3>
						<UnitToggle
							options={[
								{ value: "miles", label: "Miles" },
								{ value: "kilometers", label: "km" },
							]}
							activeValue="miles"
							dataAttribute="distance-unit"
						/>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>GenderToggle Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Gender Selection</h3>
						<GenderToggle activeGender="male" />
					</div>

					<div class="example">
						<h3>Gender Selection (Female Default)</h3>
						<GenderToggle activeGender="female" />
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>ResultCard Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Default Result Card</h3>
						<ResultCard title="BMI Result">
							<ResultValue value={23.4} unit="kg/m²" />
							<p>Your BMI indicates a normal weight range.</p>
						</ResultCard>
					</div>

					<div class="example">
						<h3>Primary Variant with Badge</h3>
						<ResultCard title="BMR Calculation" variant="primary">
							<ResultValue value={1847} unit="calories/day" size="xl" />
							<slot name="badge">
								<CategoryBadge category="Moderately Active" color="var(--color-primary)" />
							</slot>
						</ResultCard>
					</div>

					<div class="example">
						<h3>Warning Variant</h3>
						<ResultCard title="Health Alert" variant="warning">
							<ResultValue value={28.5} unit="BMI" color="warning" />
							<p>Consider consulting a healthcare provider.</p>
						</ResultCard>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>ResultValue Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Different Sizes</h3>
						<div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
							<ResultValue value={23.4} unit="BMI" size="sm" />
							<ResultValue value={23.4} unit="BMI" size="md" />
							<ResultValue value={23.4} unit="BMI" size="lg" />
							<ResultValue value={23.4} unit="BMI" size="xl" />
						</div>
					</div>

					<div class="example">
						<h3>Different Colors</h3>
						<div style="display: flex; flex-direction: column; gap: 1rem; align-items: center;">
							<ResultValue value={18.2} unit="BMI" color="primary" />
							<ResultValue value={22.5} unit="BMI" color="success" />
							<ResultValue value={26.8} unit="BMI" color="warning" />
							<ResultValue value={31.2} unit="BMI" color="danger" />
						</div>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>CategoryBadge Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>BMI Categories</h3>
						<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
							<CategoryBadge category="Underweight" class="underweight" />
							<CategoryBadge category="Normal Weight" class="normal" />
							<CategoryBadge category="Overweight" class="overweight" />
							<CategoryBadge category="Obese" class="obese" />
						</div>
					</div>

					<div class="example">
						<h3>Variants & Sizes</h3>
						<div style="display: flex; flex-direction: column; gap: 1rem;">
							<div style="display: flex; gap: 0.5rem; align-items: center;">
								<CategoryBadge category="Solid" variant="solid" size="sm" />
								<CategoryBadge category="Outline" variant="outline" size="md" />
								<CategoryBadge category="Soft" variant="soft" size="lg" />
							</div>
						</div>
					</div>

					<div class="example">
						<h3>Custom Colors</h3>
						<div style="display: flex; flex-wrap: wrap; gap: 0.5rem;">
							<CategoryBadge category="Custom Blue" color="#007bff" />
							<CategoryBadge category="Custom Green" color="#28a745" variant="outline" />
							<CategoryBadge category="Custom Purple" color="#6f42c1" variant="soft" />
						</div>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>ComparisonTable Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>BMI Categories Table</h3>
						<ComparisonTable
							caption="BMI Categories and Health Risks"
							headers={["Category", "BMI Range", "Health Risk"]}
							rows={[
								{ cells: ["Underweight", "< 18.5", "Low"], class: "underweight" },
								{ cells: ["Normal", "18.5 - 24.9", "Normal"], highlight: true },
								{ cells: ["Overweight", "25.0 - 29.9", "Increased"], class: "overweight" },
								{ cells: ["Obese", "≥ 30.0", "High"], class: "obese" },
							]}
							class="bmi-categories"
						/>
					</div>

					<div class="example">
						<h3>Activity Levels</h3>
						<ComparisonTable
							headers={["Activity Level", "Description", "Multiplier"]}
							rows={[
								{ cells: ["Sedentary", "Little/no exercise", "1.2"] },
								{ cells: ["Light", "Light exercise 1-3 days/week", "1.375"], highlight: true },
								{ cells: ["Moderate", "Moderate exercise 3-5 days/week", "1.55"] },
								{ cells: ["Very Active", "Hard exercise 6-7 days/week", "1.725"] },
								{ cells: ["Extremely Active", "Very hard exercise/physical job", "1.9"] },
							]}
						/>
					</div>

					<div class="example">
						<h3>Simple Data Table</h3>
						<ComparisonTable
							headers={["Metric", "Value"]}
							rows={[
								{ cells: ["Height", "180 cm"] },
								{ cells: ["Weight", "75 kg"] },
								{ cells: ["BMI", "23.1"], highlight: true },
								{ cells: ["Body Fat", "15%"] },
							]}
						/>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>CalculatorLayout Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Basic Layout Structure</h3>
						<div
							style="border: 2px dashed var(--color-border); padding: 1rem; border-radius: var(--border-radius); background: var(--color-bg);"
						>
							<CalculatorLayout
								title="BMI Calculator"
								description="Calculate your Body Mass Index to assess your weight category"
							>
								<div slot="inputs">
									<p
										style="padding: 2rem; background: var(--color-surface); border: 1px solid var(--color-border); border-radius: var(--border-radius); text-align: center; color: var(--color-text-muted);"
									>
										📝 Input components would go here
									</p>
								</div>
								<div slot="results">
									<p
										style="padding: 2rem; background: var(--color-surface); border: 1px solid var(--color-border); border-radius: var(--border-radius); text-align: center; color: var(--color-text-muted);"
									>
										📊 Result components would go here
									</p>
								</div>
							</CalculatorLayout>
						</div>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>InputGroup Component</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Basic Input Groups</h3>
						<InputGroup label="Full Name" helpText="Enter your first and last name">
							<input type="text" placeholder="John Doe" />
						</InputGroup>

						<InputGroup
							label="Email Address"
							required={true}
							helpText="We'll never share your email"
						>
							<input type="email" placeholder="john@example.com" />
						</InputGroup>

						<InputGroup label="Message" helpText="Tell us what you think">
							<textarea placeholder="Your message here..." rows="3"></textarea>
						</InputGroup>
					</div>

					<div class="example">
						<h3>Error States</h3>
						<InputGroup
							label="Password"
							required={true}
							error="Password must be at least 8 characters"
						>
							<input type="password" placeholder="Enter password" />
						</InputGroup>

						<InputGroup label="Confirm Password" required={true} error="Passwords do not match">
							<input type="password" placeholder="Confirm password" />
						</InputGroup>
					</div>

					<div class="example">
						<h3>Component Integration</h3>
						<InputGroup label="Height Units" helpText="Select your preferred unit system">
							<UnitToggle
								options={[
									{ value: "imperial", label: "ft/in" },
									{ value: "metric", label: "cm" },
								]}
								activeValue="imperial"
								dataAttribute="height-unit"
							/>
						</InputGroup>

						<InputGroup label="Body Weight" helpText="Use the slider to set your current weight">
							<RangeSlider id="weight-demo" label="" min={35} max={180} value={70} unit="kg" />
						</InputGroup>

						<InputGroup
							label="Gender Selection"
							helpText="Select your biological gender for accurate calculations"
							class="inline"
						>
							<GenderToggle activeGender="male" />
						</InputGroup>
					</div>

					<div class="example">
						<h3>Size Variants</h3>
						<InputGroup
							label="Compact Size"
							helpText="Smaller spacing for dense forms"
							class="compact"
						>
							<input type="text" placeholder="Compact input" />
						</InputGroup>

						<InputGroup
							label="Large Size"
							helpText="Larger spacing for important inputs"
							class="large"
						>
							<input type="text" placeholder="Large input" />
						</InputGroup>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>Enhanced SharedValues System (Phase 4)</h2>
				<div class="component-examples">
					<div class="example">
						<h3>Event-Driven Updates</h3>
						<div
							id="reactive-demo"
							style="padding: 1.5rem; background: var(--color-bg); border: 1px solid var(--color-border); border-radius: var(--border-radius);"
						>
							<p><strong>Reactive Updates Demo:</strong></p>
							<p>Value change count: <span id="change-counter">0</span></p>
							<p>Last changed: <span id="last-changed">None</span></p>
							<p>Current age: <span id="current-age">Loading...</span></p>
							<button id="demo-update" class="test-button" style="margin-top: 1rem;"
								>Update Age (+1)</button
							>
						</div>
					</div>

					<div class="example">
						<h3>Component Registration</h3>
						<div
							style="padding: 1.5rem; background: var(--color-bg); border: 1px solid var(--color-border); border-radius: var(--border-radius);"
						>
							<p><strong>Registered Components:</strong></p>
							<div id="subscribers-list">Loading...</div>
							<button id="demo-subscribe" class="test-button" style="margin-top: 1rem;"
								>Register Demo Component</button
							>
						</div>
					</div>
				</div>
			</div>

			<div class="component-section">
				<h2>SharedValues Integration Test</h2>
				<div class="shared-values-display">
					<h3>Current SharedValues:</h3>
					<div id="shared-values-output">
						<p>Loading SharedValues...</p>
					</div>
					<button id="clear-shared-values" class="test-button">Clear All SharedValues</button>
					<button id="refresh-display" class="test-button">Refresh Display</button>
				</div>
			</div>

			<div class="component-section">
				<h2>Event Testing</h2>
				<div class="event-log">
					<h3>Range Slider Events:</h3>
					<div id="event-log" class="event-output">
						<p>Move sliders above to see events...</p>
					</div>
					<button id="clear-log" class="test-button">Clear Log</button>
				</div>
			</div>
		</div>
	</section>
</Layout>

<script src="/sharedValues.js" is:inline></script>
<script src="/reactiveSharedValues.js" is:inline></script>
<script>
	// Extend Window interface for SharedValues
	declare global {
		interface Window {
			SharedValues: any;
		}
	}

	// SharedValues display functionality
	class ShowcaseManager {
		private sharedValues: any;
		private reactiveSharedValues: any;
		private eventLog: HTMLElement | null;
		private sharedValuesOutput: HTMLElement | null;
		private changeCounter: number = 0;

		constructor() {
			this.sharedValues = new (window as any).SharedValues();

			// Initialize ReactiveSharedValues if available
			if ((window as any).ReactiveSharedValues) {
				this.reactiveSharedValues = new (window as any).ReactiveSharedValues();
				this.setupReactiveDemo();
			}

			this.eventLog = document.getElementById("event-log");
			this.sharedValuesOutput = document.getElementById("shared-values-output");

			this.attachEventListeners();
			this.updateSharedValuesDisplay();
		}

		private setupReactiveDemo(): void {
			// Demo elements
			const changeCounterEl = document.getElementById("change-counter");
			const lastChangedEl = document.getElementById("last-changed");
			const currentAgeEl = document.getElementById("current-age");
			const subscribersListEl = document.getElementById("subscribers-list");

			// Update current age display
			if (currentAgeEl) {
				currentAgeEl.textContent = this.reactiveSharedValues.get("age").toString();
			}

			// Listen for changes
			this.reactiveSharedValues.addEventListener("change", (event: CustomEvent) => {
				this.changeCounter++;
				if (changeCounterEl) {
					changeCounterEl.textContent = this.changeCounter.toString();
				}
				if (lastChangedEl) {
					const changedKeys = Object.keys(event.detail.changed).join(", ");
					lastChangedEl.textContent = changedKeys || "None";
				}
			});

			// Listen for age changes specifically
			this.reactiveSharedValues.addEventListener("change:age", (event: CustomEvent) => {
				if (currentAgeEl) {
					currentAgeEl.textContent = event.detail.newValue.toString();
				}
			});

			// Update subscribers list
			this.updateSubscribersList();

			// Demo buttons
			const demoUpdateBtn = document.getElementById("demo-update");
			const demoSubscribeBtn = document.getElementById("demo-subscribe");

			if (demoUpdateBtn) {
				demoUpdateBtn.addEventListener("click", () => {
					const currentAge = this.reactiveSharedValues.get("age");
					this.reactiveSharedValues.set("age", currentAge + 1);
				});
			}

			if (demoSubscribeBtn) {
				demoSubscribeBtn.addEventListener("click", () => {
					const componentId = `demo-component-${Date.now()}`;
					this.reactiveSharedValues.subscribe(
						componentId,
						(event: any) => {
							console.log(`${componentId} received update:`, event);
						},
						["age", "weight"]
					);

					this.updateSubscribersList();
				});
			}
		}

		private updateSubscribersList(): void {
			const subscribersListEl = document.getElementById("subscribers-list");
			if (subscribersListEl && this.reactiveSharedValues) {
				const subscriberCount = this.reactiveSharedValues.subscribers.size;
				subscribersListEl.innerHTML = `
					<p>Active subscriptions: <strong>${subscriberCount}</strong></p>
					<p style="font-size: 0.875rem; color: var(--color-text-muted);">
						Components: ${Array.from(this.reactiveSharedValues.subscribers.keys()).join(", ") || "None"}
					</p>
				`;
			}
		}

		private attachEventListeners(): void {
			// Listen for range slider changes
			document.addEventListener("range-slider-change", (event) => {
				const customEvent = event as CustomEvent;
				this.logEvent("Range Slider Change", customEvent.detail);
				this.updateSharedValuesDisplay();
			});

			// Listen for unit toggle changes
			document.addEventListener("unit-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				this.logEvent("Unit Toggle Change", customEvent.detail);
			});

			// Listen for gender toggle changes
			document.addEventListener("gender-toggle-change", (event) => {
				const customEvent = event as CustomEvent;
				this.logEvent("Gender Toggle Change", customEvent.detail);
				this.updateSharedValuesDisplay();
			});

			// Button event listeners
			document.getElementById("clear-shared-values")?.addEventListener("click", () => {
				this.sharedValues.clear();
				this.updateSharedValuesDisplay();
				this.logEvent("SharedValues Cleared", {});
			});

			document.getElementById("refresh-display")?.addEventListener("click", () => {
				this.updateSharedValuesDisplay();
				this.logEvent("Display Refreshed", {});
			});

			document.getElementById("clear-log")?.addEventListener("click", () => {
				if (this.eventLog) {
					this.eventLog.innerHTML = "<p>Event log cleared...</p>";
				}
			});
		}

		private updateSharedValuesDisplay(): void {
			const values = this.sharedValues.load();
			const html = Object.entries(values)
				.map(([key, value]) => `<p><strong>${key}:</strong> ${value}</p>`)
				.join("");

			if (this.sharedValuesOutput) {
				this.sharedValuesOutput.innerHTML = html || "<p>No SharedValues found</p>";
			}
		}

		private logEvent(eventName: string, detail: any): void {
			const timestamp = new Date().toLocaleTimeString();
			const eventItem = document.createElement("div");
			eventItem.className = "event-item";
			eventItem.innerHTML = `
				<strong>${timestamp} - ${eventName}</strong><br>
				<code>${JSON.stringify(detail, null, 2)}</code>
			`;

			if (this.eventLog) {
				this.eventLog.insertBefore(eventItem, this.eventLog.firstChild);

				// Keep only the last 10 events
				const events = this.eventLog.querySelectorAll(".event-item");
				if (events.length > 10) {
					events[events.length - 1].remove();
				}
			}
		}
	}

	// PrecisionRangeSlider functionality
	class PrecisionRangeSlider {
		private rangeInput: HTMLInputElement;
		private numberInput: HTMLInputElement;
		private display: HTMLElement;
		private decrementBtn: HTMLElement;
		private incrementBtn: HTMLElement;
		private step: number;
		private min: number;
		private max: number;

		constructor(rangeInput: HTMLInputElement) {
			this.rangeInput = rangeInput;
			this.step = parseFloat(rangeInput.step) || 1;
			this.min = parseFloat(rangeInput.min) || 0;
			this.max = parseFloat(rangeInput.max) || 100;

			// Find related elements
			const targetId = rangeInput.id;
			this.numberInput = document.getElementById(`${targetId}-number`) as HTMLInputElement;
			this.display = document.getElementById(`${targetId}-display`) as HTMLElement;
			this.decrementBtn = document.querySelector(
				`[data-target="${targetId}"].precision-decrement`
			) as HTMLElement;
			this.incrementBtn = document.querySelector(
				`[data-target="${targetId}"].precision-increment`
			) as HTMLElement;

			this.init();
		}

		private init(): void {
			// Sync all inputs
			this.syncValues();

			// Range input events
			this.rangeInput.addEventListener("input", () => {
				this.syncValues();
			});

			// Number input events
			if (this.numberInput) {
				this.numberInput.addEventListener("input", () => {
					const value = this.clampValue(parseFloat(this.numberInput.value));
					this.setValue(value);
				});

				this.numberInput.addEventListener("blur", () => {
					// Ensure valid value on blur
					const value = this.clampValue(parseFloat(this.numberInput.value) || this.getValue());
					this.setValue(value);
				});
			}

			// Button events
			if (this.decrementBtn) {
				this.decrementBtn.addEventListener("click", () => {
					this.decrement();
				});

				// Long press for rapid decrement
				let longPressTimer: NodeJS.Timeout;
				let isLongPressing = false;

				this.decrementBtn.addEventListener("mousedown", () => {
					longPressTimer = setTimeout(() => {
						isLongPressing = true;
						this.startRapidDecrement();
					}, 500);
				});

				this.decrementBtn.addEventListener("mouseup", () => {
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					}
				});

				this.decrementBtn.addEventListener("mouseleave", () => {
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					}
				});

				// Touch events for mobile
				this.decrementBtn.addEventListener("touchstart", (e) => {
					e.preventDefault();
					longPressTimer = setTimeout(() => {
						isLongPressing = true;
						this.startRapidDecrement();
					}, 500);
				});

				this.decrementBtn.addEventListener("touchend", (e) => {
					e.preventDefault();
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					} else {
						this.decrement();
					}
				});
			}

			if (this.incrementBtn) {
				this.incrementBtn.addEventListener("click", () => {
					this.increment();
				});

				// Long press for rapid increment
				let longPressTimer: NodeJS.Timeout;
				let isLongPressing = false;

				this.incrementBtn.addEventListener("mousedown", () => {
					longPressTimer = setTimeout(() => {
						isLongPressing = true;
						this.startRapidIncrement();
					}, 500);
				});

				this.incrementBtn.addEventListener("mouseup", () => {
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					}
				});

				this.incrementBtn.addEventListener("mouseleave", () => {
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					}
				});

				// Touch events for mobile
				this.incrementBtn.addEventListener("touchstart", (e) => {
					e.preventDefault();
					longPressTimer = setTimeout(() => {
						isLongPressing = true;
						this.startRapidIncrement();
					}, 500);
				});

				this.incrementBtn.addEventListener("touchend", (e) => {
					e.preventDefault();
					clearTimeout(longPressTimer);
					if (isLongPressing) {
						this.stopRapidChange();
						isLongPressing = false;
					} else {
						this.increment();
					}
				});
			}
		}

		private rapidChangeTimer: NodeJS.Timeout | null = null;

		private startRapidDecrement(): void {
			this.decrement();
			this.rapidChangeTimer = setInterval(() => {
				this.decrement();
			}, 100);
		}

		private startRapidIncrement(): void {
			this.increment();
			this.rapidChangeTimer = setInterval(() => {
				this.increment();
			}, 100);
		}

		private stopRapidChange(): void {
			if (this.rapidChangeTimer) {
				clearInterval(this.rapidChangeTimer);
				this.rapidChangeTimer = null;
			}
		}

		private getValue(): number {
			return parseFloat(this.rangeInput.value);
		}

		private setValue(value: number): void {
			const clampedValue = this.clampValue(value);
			this.rangeInput.value = clampedValue.toString();
			if (this.numberInput) {
				// Format the number input to match the display format
				if (this.step < 1) {
					const decimalPlaces = this.step.toString().split(".")[1]?.length || 1;
					this.numberInput.value = clampedValue.toFixed(decimalPlaces);
				} else {
					this.numberInput.value = Math.round(clampedValue).toString();
				}
			}
			this.updateDisplay(clampedValue);
		}

		private clampValue(value: number): number {
			if (isNaN(value)) return this.getValue();
			return Math.max(this.min, Math.min(this.max, value));
		}

		private decrement(): void {
			const currentValue = this.getValue();
			const newValue = currentValue - this.step;
			this.setValue(newValue);
		}

		private increment(): void {
			const currentValue = this.getValue();
			const newValue = currentValue + this.step;
			this.setValue(newValue);
		}

		private syncValues(): void {
			const value = this.getValue();
			if (this.numberInput) {
				// Format the number input to match the display format
				if (this.step < 1) {
					const decimalPlaces = this.step.toString().split(".")[1]?.length || 1;
					this.numberInput.value = value.toFixed(decimalPlaces);
				} else {
					this.numberInput.value = Math.round(value).toString();
				}
			}
			this.updateDisplay(value);
		}

		private updateDisplay(value: number): void {
			if (this.display) {
				// Format based on step precision
				if (this.step < 1) {
					const decimalPlaces = this.step.toString().split(".")[1]?.length || 1;
					this.display.textContent = value.toFixed(decimalPlaces);
				} else {
					this.display.textContent = Math.round(value).toString();
				}
			}
		}
	}

	// Initialize PrecisionRangeSliders
	function initializePrecisionRangeSliders() {
		const precisionSliders = document.querySelectorAll(".precision-range-input");
		precisionSliders.forEach((slider) => {
			new PrecisionRangeSlider(slider as HTMLInputElement);
		});
	}

	// Initialize showcase manager
	document.addEventListener("DOMContentLoaded", () => {
		new ShowcaseManager();
		initializePrecisionRangeSliders();
	});
</script>

<style>
	.showcase-page {
		padding: 2rem 0;
	}

	.showcase-header {
		text-align: center;
		margin-bottom: 3rem;
	}

	.showcase-header h1 {
		font-size: 3rem;
		font-weight: 800;
		color: var(--color-text);
		margin-bottom: 1rem;
	}

	.showcase-header p {
		font-size: 1.25rem;
		color: var(--color-text-muted);
	}

	.component-section {
		margin-bottom: 4rem;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		padding: 2rem;
		box-shadow: var(--shadow-md);
	}

	.component-section h2 {
		font-size: 2rem;
		font-weight: 700;
		margin-bottom: 1.5rem;
		color: var(--color-primary);
		border-bottom: 2px solid var(--color-accent);
		padding-bottom: 0.5rem;
	}

	.component-section h3 {
		color: var(--color-text);
		font-size: 1.25rem;
		margin: 2rem 0 1rem 0;
		font-weight: 600;
	}

	.component-description {
		color: var(--color-text-muted);
		font-style: italic;
		margin-bottom: 2rem;
		padding: 1rem;
		background: var(--color-bg);
		border-left: 4px solid var(--color-accent);
		border-radius: var(--border-radius);
	}

	.legacy-examples {
		opacity: 0.8;
		border-left: 3px solid var(--color-text-muted);
		padding-left: 1rem;
		margin-left: 1rem;
	}

	.legacy-examples .example {
		background: var(--color-bg);
		border: 1px dashed var(--color-border);
	}

	.component-examples {
		display: grid;
		grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
		gap: 2rem;
	}

	.example {
		background: var(--color-bg);
		border: 2px solid var(--color-border);
		padding: 1.5rem;
		border-radius: var(--border-radius);
	}

	.example h3 {
		font-size: 1.25rem;
		font-weight: 600;
		margin-bottom: 1rem;
		color: var(--color-text);
	}

	.shared-values-display {
		background: var(--color-bg);
		border: 2px solid var(--color-border);
		padding: 1.5rem;
		border-radius: var(--border-radius);
	}

	.shared-values-display h3 {
		margin-bottom: 1rem;
		color: var(--color-text);
	}

	#shared-values-output {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		padding: 1rem;
		margin-bottom: 1rem;
		border-radius: var(--border-radius);
		font-family: "JetBrains Mono", monospace;
		max-height: 200px;
		overflow-y: auto;
	}

	.test-button {
		background: var(--color-accent);
		color: white;
		border: var(--border-width) solid var(--color-border);
		padding: 0.75rem 1.5rem;
		margin-right: 1rem;
		margin-bottom: 0.5rem;
		cursor: pointer;
		font-weight: 600;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
	}

	.test-button:hover {
		background: var(--color-primary);
		box-shadow: var(--shadow-hover);
	}

	.event-log {
		background: var(--color-bg);
		border: 2px solid var(--color-border);
		padding: 1.5rem;
		border-radius: var(--border-radius);
	}

	.event-log h3 {
		margin-bottom: 1rem;
		color: var(--color-text);
	}

	.event-output {
		background: var(--color-surface);
		border: 1px solid var(--color-border);
		padding: 1rem;
		margin-bottom: 1rem;
		border-radius: var(--border-radius);
		font-family: "JetBrains Mono", monospace;
		max-height: 300px;
		overflow-y: auto;
	}

	.event-item {
		margin-bottom: 1rem;
		padding-bottom: 1rem;
		border-bottom: 1px solid var(--color-border);
	}

	.event-item:last-child {
		border-bottom: none;
		margin-bottom: 0;
	}

	.event-item code {
		background: var(--color-bg);
		padding: 0.5rem;
		display: block;
		margin-top: 0.5rem;
		border-radius: var(--border-radius);
		font-size: 0.875rem;
		white-space: pre-wrap;
	}

	/* PrecisionRangeSlider Styles */
	.precision-range-wrapper {
		margin-bottom: 2rem;
	}

	.precision-label {
		display: block;
		font-weight: 600;
		font-size: 1rem;
		color: var(--color-text);
		margin-bottom: 0.75rem;
	}

	.precision-range-slider {
		position: relative;
	}

	.precision-range-input {
		width: 100%;
		height: 20px; /* Larger than standard 8px for better touch */
		border-radius: 4px;
		background: var(--color-bg);
		outline: none;
		border: var(--border-width) solid var(--color-border);
		box-shadow: var(--shadow-sm);
		appearance: none;
		cursor: pointer;
		transition: all 0.2s ease;
		margin-bottom: 1rem;
	}

	.precision-range-input:hover {
		box-shadow: var(--shadow-hover);
	}

	.precision-range-input:focus {
		border-color: var(--color-accent);
		box-shadow: var(--shadow-md);
	}

	/* Enhanced thumb for better touch targets */
	.precision-range-input::-webkit-slider-thumb {
		appearance: none;
		height: 44px; /* Touch-friendly 44px minimum */
		width: 44px;
		border-radius: 50%;
		background: radial-gradient(
			circle at center,
			var(--color-primary) 0%,
			var(--color-primary) 45%,
			var(--color-primary) 50%,
			transparent 50%
		);
		border: 2px solid var(--color-border);
		box-shadow: var(--shadow-md);
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.precision-range-input::-webkit-slider-thumb:hover {
		background: radial-gradient(
			circle at center,
			var(--color-secondary) 0%,
			var(--color-secondary) 45%,
			var(--color-secondary) 50%,
			transparent 50%
		);
		box-shadow: var(--shadow-hover);
	}

	.precision-range-input::-moz-range-thumb {
		height: 40px; /* Slightly smaller for Firefox */
		width: 40px;
		border-radius: 50%;
		background: var(--color-primary);
		border: 2px solid var(--color-border);
		box-shadow: var(--shadow-md);
		cursor: pointer;
		transition: all 0.2s ease;
	}

	.precision-range-input::-moz-range-thumb:hover {
		background: var(--color-secondary);
		box-shadow: var(--shadow-hover);
	}

	.precision-controls {
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.5rem;
		margin-bottom: 1rem;
	}

	.precision-btn {
		width: 44px; /* Touch-friendly minimum */
		height: 44px;
		border: var(--border-width) solid var(--color-border);
		background: var(--color-surface);
		color: var(--color-text);
		font-size: 1.5rem;
		font-weight: 600;
		border-radius: var(--border-radius);
		cursor: pointer;
		transition: all 0.2s ease;
		display: flex;
		align-items: center;
		justify-content: center;
		box-shadow: var(--shadow-sm);
		user-select: none;
		-webkit-user-select: none;
		-webkit-tap-highlight-color: transparent;
	}

	.precision-btn:hover {
		background: var(--color-accent);
		color: white;
		box-shadow: var(--shadow-hover);
	}

	.precision-btn:active {
		transform: scale(0.95);
		box-shadow: var(--shadow-sm);
	}

	.precision-number-input {
		width: 80px;
		height: 44px; /* Match button height */
		border: var(--border-width) solid var(--color-border);
		background: var(--color-bg);
		color: var(--color-text);
		font-size: 1rem;
		font-weight: 600;
		text-align: center;
		border-radius: var(--border-radius);
		box-shadow: var(--shadow-sm);
		transition: all 0.2s ease;
		/* Ensure centering works across all browsers */
		-webkit-text-align-last: center;
		text-align-last: center;
		padding: 0 8px;
		box-sizing: border-box;
	}

	.precision-number-input:focus {
		border-color: var(--color-accent);
		box-shadow: var(--shadow-md);
		outline: none;
	}

	.precision-display {
		text-align: center;
		font-weight: 600;
		color: var(--color-primary);
		font-size: 1.5rem;
		margin-bottom: 0.5rem;
	}

	.precision-unit {
		margin-left: 0.5rem;
		color: var(--color-text-muted);
		font-size: 1.25rem;
	}

	/* Mobile optimizations */
	@media (max-width: 768px) {
		.precision-range-input::-webkit-slider-thumb {
			height: 48px; /* Even larger on mobile */
			width: 48px;
		}

		.precision-btn {
			width: 48px;
			height: 48px;
			font-size: 1.75rem;
		}

		.precision-number-input {
			height: 48px;
			width: 90px;
			font-size: 1.125rem;
			text-align: center;
			-webkit-text-align-last: center;
			text-align-last: center;
		}

		.precision-display {
			font-size: 1.75rem;
		}

		.precision-controls {
			gap: 0.75rem;
		}
	}

	@media (max-width: 768px) {
		.component-examples {
			grid-template-columns: 1fr;
		}

		.showcase-header h1 {
			font-size: 2rem;
		}

		.test-button {
			margin-right: 0.5rem;
		}
	}
</style>
