---
// Get current page path to highlight active nav link
const currentPath = Astro.url.pathname;

// Helper function to check if a path is active
// This handles various edge cases that might occur in production vs development
function isActivePath(linkPath: string, currentPath: string): boolean {
	// Normalize paths by removing trailing slashes and converting to lowercase
	const normalizePath = (path: string): string => {
		return path.replace(/\/$/, "").toLowerCase() || "/";
	};

	const normalizedCurrent = normalizePath(currentPath);
	const normalizedLink = normalizePath(linkPath);

	// For home page, exact match only
	if (normalizedLink === "/") {
		return normalizedCurrent === "/";
	}

	// For other pages, check exact match
	return normalizedCurrent === normalizedLink;
}
---

<header class="header">
	<div class="header-container">
		<nav class="nav">
			<a href="/" class="nav-logo">
				<h1>🥔Potato Hack Fitness Calculators</h1>
			</a>
			<div class="nav-links">
				<a
					href="/bmi"
					class={`nav-link ${isActivePath("/bmi", currentPath) ? "nav-link-active" : ""}`}>BMI</a
				>
				<a
					href="/bmr"
					class={`nav-link ${isActivePath("/bmr", currentPath) ? "nav-link-active" : ""}`}>BMR</a
				>
				<a
					href="/heart-rate-zones"
					class={`nav-link ${isActivePath("/heart-rate-zones", currentPath) ? "nav-link-active" : ""}`}
					>HR</a
				>
				<a
					href="/muscle-potential"
					class={`nav-link ${isActivePath("/muscle-potential", currentPath) ? "nav-link-active" : ""}`}
					>Muscle</a
				>
				<a
					href="/potato-hack"
					class={`nav-link ${isActivePath("/potato-hack", currentPath) ? "nav-link-active" : ""}`}
					>Potato</a
				>
				<a
					href="/running"
					class={`nav-link ${isActivePath("/running", currentPath) ? "nav-link-active" : ""}`}
					>Run</a
				>
				<button id="theme-toggle" class="theme-toggle" aria-label="Toggle theme">🌙</button>
			</div>
		</nav>
	</div>
</header>

<style>
	.header {
		background: var(--color-surface);
		border-bottom: var(--border-width) solid var(--color-border);
		padding: 1rem 0;
		position: sticky;
		top: 0;
		z-index: 100;
	}

	.header-container {
		max-width: 1200px;
		margin: 0 auto;
		padding: 0 1rem;
	}

	.nav {
		display: flex;
		justify-content: space-between;
		align-items: center;
	}

	.nav-logo h1 {
		margin: 0;
		color: var(--color-primary);
		font-weight: 800;
		font-size: 1.5rem;
	}

	.nav-logo {
		text-decoration: none;
	}

	.nav-links {
		display: flex;
		align-items: center;
		gap: 1rem;
	}

	.nav-link {
		text-decoration: none;
		color: var(--color-text);
		font-weight: 700;
		padding: 0.5rem 1rem;
		border-radius: var(--border-radius);
		transition: all 0.2s ease;
		position: relative;
	}

	.nav-link:hover {
		background: var(--color-primary);
		color: white;
		transform: translate(-1px, -1px);
		box-shadow: var(--shadow-sm);
	}

	.nav-link-active {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-primary);
		color: var(--color-primary);
		box-shadow: var(--shadow-sm);
		transform: translate(-1px, -1px);
	}

	.nav-link-active:hover {
		background: var(--color-primary);
		color: white;
	}

	/* Dropdown Styles */
	.nav-dropdown {
		position: relative;
		display: inline-block;
	}

	.nav-dropdown-toggle {
		background: none;
		border: none;
		color: var(--color-text);
		font-weight: 700;
		padding: 0.5rem 1rem;
		border-radius: var(--border-radius);
		transition: all 0.2s ease;
		cursor: pointer;
		display: flex;
		align-items: center;
		gap: 0.5rem;
	}

	.nav-dropdown-toggle:hover {
		background: var(--color-primary);
		color: white;
		transform: translate(-1px, -1px);
		box-shadow: var(--shadow-sm);
	}

	.nav-dropdown-active .nav-dropdown-toggle {
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-primary);
		color: var(--color-primary);
		box-shadow: var(--shadow-sm);
		transform: translate(-1px, -1px);
	}

	.nav-dropdown-active .nav-dropdown-toggle:hover {
		background: var(--color-primary);
		color: white;
	}

	.dropdown-arrow {
		font-size: 0.8rem;
		transition: transform 0.2s ease;
	}

	.nav-dropdown.open .dropdown-arrow {
		transform: rotate(180deg);
	}

	.nav-dropdown-menu {
		position: absolute;
		top: 100%;
		left: 0;
		background: var(--color-surface);
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		box-shadow: var(--shadow-lg);
		opacity: 0;
		visibility: hidden;
		transform: translateY(-10px);
		transition: all 0.2s ease;
		min-width: 180px;
		z-index: 1000;
	}

	.nav-dropdown.open .nav-dropdown-menu {
		opacity: 1;
		visibility: visible;
		transform: translateY(0);
	}

	.nav-dropdown-link {
		display: block;
		text-decoration: none;
		color: var(--color-text);
		padding: 0.75rem 1rem;
		font-weight: 600;
		transition: all 0.2s ease;
		border-bottom: 2px solid var(--color-border);
	}

	.nav-dropdown-link:last-child {
		border-bottom: none;
	}

	.nav-dropdown-link:hover {
		background: var(--color-primary);
		color: white;
		transform: translate(-2px, -2px);
	}

	.nav-dropdown-link-active {
		background: var(--color-secondary);
		color: var(--color-text);
		font-weight: 700;
	}

	.nav-dropdown-link-active:hover {
		background: var(--color-primary);
		color: white;
	}

	.theme-toggle {
		background: none;
		border: none;
		padding: 0.5rem;
		cursor: pointer;
		font-size: 1.2rem;
		transition: all 0.2s ease;
		border-radius: var(--border-radius);
	}

	.theme-toggle:hover {
		background: var(--color-bg);
		transform: scale(1.1);
	}

	@media (max-width: 768px) {
		.nav {
			flex-direction: column;
			gap: 1rem;
		}

		.nav-links {
			flex-wrap: wrap;
			justify-content: center;
		}

		.nav-dropdown-menu {
			position: fixed;
			top: auto;
			left: 50%;
			transform: translateX(-50%);
			width: 90%;
			max-width: 300px;
		}

		.nav-dropdown.open .nav-dropdown-menu {
			transform: translateX(-50%) translateY(0);
		}
	}
</style>

<script>
	// Theme toggle functionality
	const themeToggle = document.getElementById("theme-toggle");
	const html = document.documentElement;

	// Set initial theme toggle button icon based on current theme
	if (themeToggle) {
		const currentTheme = html.getAttribute("data-theme") || "light";
		themeToggle.textContent = currentTheme === "dark" ? "☀️" : "🌙";

		themeToggle.addEventListener("click", () => {
			const currentTheme = html.getAttribute("data-theme");
			const newTheme = currentTheme === "dark" ? "light" : "dark";

			html.setAttribute("data-theme", newTheme);
			localStorage.setItem("theme", newTheme);
			themeToggle.textContent = newTheme === "dark" ? "☀️" : "🌙";
		});
	}
	// Fix navigation highlighting for production builds
	function updateActiveNavigation() {
		const currentPath = window.location.pathname;
		const navLinks = document.querySelectorAll(".nav-link");

		// Remove all active classes first
		navLinks.forEach((link) => {
			link.classList.remove("nav-link-active");
		});

		// Add active class to matching link
		navLinks.forEach((link) => {
			const href = link.getAttribute("href");
			if (href && isActivePathClient(href, currentPath)) {
				link.classList.add("nav-link-active");
			}
		});
	}

	// Run on DOMContentLoaded and also with a small delay as fallback
	document.addEventListener("DOMContentLoaded", updateActiveNavigation);

	// Fallback for cases where DOMContentLoaded has already fired or doesn't work properly
	if (document.readyState === "loading") {
		document.addEventListener("DOMContentLoaded", updateActiveNavigation);
	} else {
		// DOM is already ready
		updateActiveNavigation();
	}

	// Additional fallback with small delay
	setTimeout(updateActiveNavigation, 100); // Client-side path matching function
	function isActivePathClient(linkPath: string, currentPath: string): boolean {
		// Normalize paths by removing trailing slashes and converting to lowercase
		const normalizePath = (path: string): string => {
			return path.replace(/\/$/, "").toLowerCase() || "/";
		};

		const normalizedCurrent = normalizePath(currentPath);
		const normalizedLink = normalizePath(linkPath);

		// For home page, exact match only
		if (normalizedLink === "/") {
			return normalizedCurrent === "/";
		}

		// For other pages, check exact match
		return normalizedCurrent === normalizedLink;
	}

	// Dropdown functionality
	document.addEventListener("DOMContentLoaded", () => {
		const dropdown = document.querySelector(".nav-dropdown");
		const dropdownToggle = document.querySelector(".nav-dropdown-toggle");
		const dropdownMenu = document.querySelector(".nav-dropdown-menu");

		if (dropdown && dropdownToggle && dropdownMenu) {
			// Toggle dropdown on click
			dropdownToggle.addEventListener("click", (e) => {
				e.preventDefault();
				e.stopPropagation();
				dropdown.classList.toggle("open");
			});

			// Handle keyboard navigation
			dropdownToggle.addEventListener("keydown", (e) => {
				const keyEvent = e as KeyboardEvent;
				if (keyEvent.key === "Enter" || keyEvent.key === " ") {
					e.preventDefault();
					dropdown.classList.toggle("open");
				} else if (keyEvent.key === "ArrowDown") {
					e.preventDefault();
					dropdown.classList.add("open");
					const firstLink = dropdownMenu.querySelector(".nav-dropdown-link") as HTMLElement;
					if (firstLink) firstLink.focus();
				}
			});

			// Handle navigation within dropdown
			dropdownMenu.addEventListener("keydown", (e) => {
				const keyEvent = e as KeyboardEvent;
				const links = Array.from(
					dropdownMenu.querySelectorAll(".nav-dropdown-link")
				) as HTMLElement[];
				const currentIndex = links.indexOf(document.activeElement as HTMLElement);

				if (keyEvent.key === "ArrowDown") {
					e.preventDefault();
					const nextIndex = (currentIndex + 1) % links.length;
					links[nextIndex]?.focus();
				} else if (keyEvent.key === "ArrowUp") {
					e.preventDefault();
					const prevIndex = currentIndex > 0 ? currentIndex - 1 : links.length - 1;
					links[prevIndex]?.focus();
				} else if (keyEvent.key === "Escape") {
					e.preventDefault();
					dropdown.classList.remove("open");
					(dropdownToggle as HTMLElement).focus();
				}
			});

			// Close dropdown when clicking outside
			document.addEventListener("click", (e) => {
				if (!dropdown.contains(e.target as Node)) {
					dropdown.classList.remove("open");
				}
			});

			// Close dropdown when pressing Escape
			document.addEventListener("keydown", (e) => {
				if (e.key === "Escape") {
					dropdown.classList.remove("open");
				}
			});

			// Prevent dropdown from closing when clicking inside the menu
			dropdownMenu.addEventListener("click", (e) => {
				e.stopPropagation();
			});
		}
	});
</script>
