---
export interface Props {
	activeGender?: string;
	class?: string;
}

const { activeGender = "male", class: className = "" } = Astro.props;
---

<div class={`gender-toggle ${className}`}>
	<button class={`gender-btn ${activeGender === "male" ? "active" : ""}`} data-gender="male">
		Male
	</button>
	<button class={`gender-btn ${activeGender === "female" ? "active" : ""}`} data-gender="female">
		Female
	</button>
</div>

<style>
	.gender-toggle {
		display: flex;
		gap: 0;
		margin-bottom: 1rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		background: var(--color-surface);
	}

	.gender-btn {
		flex: 1;
		padding: 0.75rem 1.5rem;
		border: none;
		background: var(--color-surface);
		color: var(--color-text);
		font-weight: 600;
		font-family: "JetBrains Mono", monospace;
		cursor: pointer;
		transition: all 0.2s ease;
		border-right: var(--border-width) solid var(--color-border);
		position: relative;
	}

	.gender-btn:last-child {
		border-right: none;
	}

	.gender-btn:hover {
		background: var(--color-bg);
	}

	.gender-btn.active {
		background: var(--color-primary);
		color: white;
		box-shadow: inset 0 2px 4px rgba(0, 0, 0, 0.1);
	}

	.gender-btn.active:hover {
		background: var(--color-primary);
	}

	/* Responsive design for mobile */
	@media (max-width: 480px) {
		.gender-toggle {
			flex-direction: column;
		}

		.gender-btn {
			border-right: none;
			border-bottom: var(--border-width) solid var(--color-border);
		}

		.gender-btn:last-child {
			border-bottom: none;
		}
	}
</style>

<script>
	// Extend Window interface for SharedValues
	declare global {
		interface Window {
			SharedValues: any;
		}
	}

	// Gender toggle functionality with SharedValues integration
	class GenderToggleComponent {
		private container: HTMLElement;
		private buttons: NodeListOf<HTMLElement>;
		private sharedValues: any;

		constructor(container: HTMLElement) {
			this.container = container;
			this.buttons = container.querySelectorAll(".gender-btn");

			// Initialize SharedValues if available
			if (typeof window !== "undefined" && (window as any).SharedValues) {
				this.sharedValues = new (window as any).SharedValues();
				this.loadFromSharedValues();
			}

			this.attachEventListeners();
		}

		private loadFromSharedValues(): void {
			if (this.sharedValues) {
				const savedGender = this.sharedValues.get("gender");
				if (savedGender) {
					this.setActiveGender(savedGender);
				}
			}
		}

		private attachEventListeners(): void {
			this.buttons.forEach((button) => {
				button.addEventListener("click", (e: Event) => {
					e.preventDefault();
					this.handleToggle(button);
				});
			});
		}

		private handleToggle(clickedButton: HTMLElement): void {
			// Remove active class from all buttons
			this.buttons.forEach((btn) => btn.classList.remove("active"));

			// Add active class to clicked button
			clickedButton.classList.add("active");

			// Get the selected gender
			const selectedGender = clickedButton.getAttribute("data-gender");

			// Save to SharedValues
			if (this.sharedValues) {
				this.sharedValues.set("gender", selectedGender);
			}

			// Dispatch custom event
			this.container.dispatchEvent(
				new CustomEvent("gender-toggle-change", {
					detail: {
						gender: selectedGender,
						previousGender: this.container.dataset.previousGender || null,
					},
					bubbles: true,
				})
			);

			// Store current value for next change event
			this.container.dataset.previousGender = selectedGender || undefined;
		}

		// Public method to set active gender programmatically
		public setActiveGender(gender: string): void {
			this.buttons.forEach((button) => {
				button.classList.remove("active");
				if (button.getAttribute("data-gender") === gender) {
					button.classList.add("active");
				}
			});

			// Update SharedValues
			if (this.sharedValues) {
				this.sharedValues.set("gender", gender);
			}
		}

		// Public method to get current active gender
		public getActiveGender(): string {
			const activeButton = this.container.querySelector(".gender-btn.active");
			return activeButton ? activeButton.getAttribute("data-gender") || "male" : "male";
		}
	}

	// Initialize all gender toggles on the page
	document.addEventListener("DOMContentLoaded", () => {
		const genderToggles = document.querySelectorAll(".gender-toggle");
		genderToggles.forEach((container) => {
			new GenderToggleComponent(container as HTMLElement);
		});
	});
</script>
