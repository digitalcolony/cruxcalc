---
/**
 * GlobalUnitToggle.astro
 * A shared toggle that switches the global unit system (imperial/metric) using ReactiveSharedValues.
 * Emits changes by calling sharedValues.set('unitSystem', value) which triggers conversions & events.
 */
import "../styles/global.css";
---

<style>
	.unit-toggle {
		display: flex;
		gap: 0;
		margin-bottom: 1rem;
		border: var(--border-width) solid var(--color-border);
		border-radius: var(--border-radius);
		overflow: hidden;
		box-shadow: var(--shadow-sm);
		background: var(--color-surface);
		font-family: "JetBrains Mono", monospace;
	}

	.unit-btn {
		flex: 1;
		padding: 0.75rem 1.25rem;
		border: none;
		background: var(--color-surface);
		color: var(--color-text);
		font-weight: 600;
		cursor: pointer;
		transition: all 0.2s ease;
		border-right: var(--border-width) solid var(--color-border);
		position: relative;
		display: flex;
		align-items: center;
		justify-content: center;
		gap: 0.25rem;
		font-size: 0.85rem;
	}

	.unit-btn:last-child {
		border-right: none;
	}
	.unit-btn:hover {
		background: var(--color-bg);
	}
	.unit-btn.active {
		background: var(--color-primary);
		color: #fff;
	}
	.unit-btn.active:hover {
		background: var(--color-primary);
	}

	@media (max-width: 480px) {
		.unit-toggle {
			flex-direction: column;
		}
		.unit-btn {
			border-right: none;
			border-bottom: var(--border-width) solid var(--color-border);
		}
		.unit-btn:last-child {
			border-bottom: none;
		}
	}
</style>
<div class="unit-toggle" id="global-unit-toggle" role="group" aria-label="Unit system toggle">
	<button
		class="unit-btn"
		id="toggle-imperial"
		type="button"
		aria-pressed="false"
		data-value="imperial">Imperial<span aria-hidden="true"> (ft/lbs)</span></button
	>
	<button class="unit-btn" id="toggle-metric" type="button" aria-pressed="false" data-value="metric"
		>Metric<span aria-hidden="true"> (cm/kg)</span></button
	>
</div>
<script>
	// @ts-nocheck
	// Defer initialization until DOM is ready & ReactiveSharedValues global is available
	(function start() {
		if (document.readyState === "loading") {
			document.addEventListener("DOMContentLoaded", runInit);
		} else {
			runInit();
		}

		function runInit() {
			initWhenReady();
		}

		function initWhenReady(attempt = 0) {
			if (typeof (window as any).ReactiveSharedValues === "undefined") {
				if (attempt < 20) {
					// try for ~500ms
					return setTimeout(() => initWhenReady(attempt + 1), 25);
				}
				return; // give up (silently) - page will just not toggle globally
			}

			const sharedValues = new (window as any).ReactiveSharedValues();
			const container = document.getElementById("global-unit-toggle");
			const imperialBtn = document.getElementById("toggle-imperial");
			const metricBtn = document.getElementById("toggle-metric");

			// Apply visual active state to buttons
			/**
			 * @param {string} current
			 */
			function applyState(/** @type {string} */ current) {
				const imperialActive = current === "imperial";
				const metricActive = current === "metric";
				imperialBtn?.setAttribute("aria-pressed", String(imperialActive));
				metricBtn?.setAttribute("aria-pressed", String(metricActive));
				imperialBtn?.classList.toggle("active", imperialActive);
				metricBtn?.classList.toggle("active", metricActive);
			}

			// Immediate visibility fallback for height / weight input groups
			/**
			 * @param {string} system
			 */
			function immediateVisibility(/** @type {string} */ system) {
				// Height groups
				document.querySelectorAll(".height-inputs").forEach((el) => {
					const show = el.classList.contains(`${system}-height`);
					(el as HTMLElement).style.display = show ? "" : "none";
				});
				// Weight groups
				document.querySelectorAll(".weight-inputs").forEach((el) => {
					const show = el.classList.contains(`${system}-weight`);
					(el as HTMLElement).style.display = show ? "" : "none";
				});
			}

			const current = sharedValues.get("unitSystem") || "imperial";
			applyState(current);
			immediateVisibility(current);

			container?.addEventListener("click", (e) => {
				const target = (e.target as HTMLElement)?.closest("button[data-value]");
				if (!target) return;
				const value = target.getAttribute("data-value");
				if (value && value !== sharedValues.get("unitSystem")) {
					sharedValues.set("unitSystem", value);
					// Provide immediate UI feedback before other listeners run
					immediateVisibility(value);
				}
			});

			// Listen for global events (window-level) and update toggle + visibility
			window.addEventListener("unit-system-change", (e) => {
				try {
					const system = (e as CustomEvent).detail?.value;
					if (!system) return;
					applyState(system);
					immediateVisibility(system);
				} catch {
					/* swallow */
				}
			});
		}
	})();
</script>
