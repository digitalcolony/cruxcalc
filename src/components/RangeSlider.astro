---
export interface Props {
	id: string;
	label: string;
	min: number;
	max: number;
	step?: number;
	value: number;
	unit: string;
	helpText?: string;
	class?: string;
	sharedKey?: string; // For SharedValues integration
	formatAsHeight?: boolean; // For total inches display as feet'inches"
	formatAsPace?: boolean; // For seconds display as mm:ss pace format
}

const {
	id,
	label,
	min,
	max,
	step = 1,
	value,
	unit,
	helpText,
	class: className = "",
	sharedKey,
	formatAsHeight = false,
	formatAsPace = false,
} = Astro.props;
---

<div class={`input-group ${className}`}>
	<label for={id}>{label}</label>
	<div class="input-container">
		<input
			type="range"
			id={id}
			min={min}
			max={max}
			step={step}
			value={value}
			data-shared-key={sharedKey}
			data-format-as-height={formatAsHeight}
			data-format-as-pace={formatAsPace}
		/>
		<div class="input-display">
			<span id={`${id}-display`}>
				{
					formatAsPace
						? `${Math.floor(value / 60)}:${(value % 60).toString().padStart(2, "0")}`
						: formatAsHeight
							? `${Math.floor(value / 12)}'${Math.round((value % 12) * 2) / 2}"`
							: value
				}
			</span>
			<span class="unit">{unit}</span>
		</div>
	</div>
	{helpText && <p class="input-help">{helpText}</p>}
</div>

<style>
	.input-group {
		margin-bottom: 2rem;
		display: block;
	}

	.input-group:last-child {
		margin-bottom: 0;
	}

	.input-group label {
		display: block;
		font-weight: 600;
		font-size: 1rem;
		color: var(--color-text);
		margin-bottom: 0.75rem;
	}

	.input-container {
		position: relative;
		margin-bottom: 1rem;
		width: 100%;
	}

	.input-container:last-child {
		margin-bottom: 0;
	}

	.input-display {
		text-align: center;
		font-weight: 600;
		color: var(--color-primary);
		margin-top: 0.5rem;
		font-size: 1.125rem;
	}

	.unit {
		margin-left: 0.25rem;
		color: var(--color-text-muted);
	}

	input[type="range"] {
		width: 100%;
		height: 8px;
		border-radius: 4px;
		background: var(--color-bg);
		outline: none;
		border: var(--border-width) solid var(--color-border);
		box-shadow: var(--shadow-sm);
		appearance: none;
		cursor: pointer;
		transition: all 0.2s ease;
	}

	input[type="range"]:hover {
		box-shadow: var(--shadow-hover);
	}

	input[type="range"]:focus {
		border-color: var(--color-accent);
		box-shadow: var(--shadow-md);
	}

	input[type="range"]::-webkit-slider-thumb {
		appearance: none;
		height: 24px;
		width: 24px;
		border-radius: 50%;
		background: var(--color-primary);
		border: var(--border-width) solid var(--color-border);
		box-shadow: var(--shadow-sm);
		cursor: pointer;
		transition: all 0.2s ease;
	}

	input[type="range"]::-webkit-slider-thumb:hover {
		background: var(--color-secondary);
		box-shadow: var(--shadow-hover);
	}

	input[type="range"]::-moz-range-thumb {
		height: 20px;
		width: 20px;
		border-radius: 50%;
		background: var(--color-primary);
		border: var(--border-width) solid var(--color-border);
		box-shadow: var(--shadow-sm);
		cursor: pointer;
		transition: all 0.2s ease;
	}

	input[type="range"]::-moz-range-thumb:hover {
		background: var(--color-secondary);
		box-shadow: var(--shadow-hover);
	}

	.input-help {
		font-size: 0.875rem;
		color: var(--color-text-muted);
		margin-top: 0.5rem;
		margin-bottom: 0;
		line-height: 1.4;
	}
</style>

<script>
	// Extend Window interface for SharedValues
	declare global {
		interface Window {
			SharedValues: any;
		}
	}

	// Range slider functionality with SharedValues integration
	class RangeSliderComponent {
		private container: HTMLElement;
		private input: HTMLInputElement | null;
		private display: HTMLElement | null;
		private sharedKey: string | undefined;
		private sharedValues: any;

		constructor(container: HTMLElement) {
			this.container = container;
			this.input = container.querySelector('input[type="range"]') as HTMLInputElement;
			this.display = container.querySelector(`#${this.input?.id}-display`);
			this.sharedKey = this.input?.dataset.sharedKey;

			// Prevent duplicate initialization
			if ((this.container as any).__rangeSliderInitialized) {
				console.log("Skipping duplicate initialization for", this.input?.id);
				return;
			}
			(this.container as any).__rangeSliderInitialized = true;

			// Debug logging
			console.log("RangeSlider initializing:", {
				id: this.input?.id,
				sharedKey: this.sharedKey,
				sharedValuesAvailable: typeof (window as any).SharedValues !== "undefined",
			});

			// Initialize SharedValues if available and sharedKey is provided
			if (typeof window !== "undefined" && (window as any).SharedValues && this.sharedKey) {
				this.sharedValues = new (window as any).SharedValues();
				console.log("SharedValues instance created for", this.input?.id);
				// Load from SharedValues immediately and override any hardcoded value
				this.loadFromSharedValues();
			} else if (this.sharedKey) {
				// Wait for SharedValues to become available
				console.log("Waiting for SharedValues for", this.input?.id);
				const waitForSharedValues = setInterval(() => {
					if (typeof (window as any).SharedValues !== "undefined") {
						clearInterval(waitForSharedValues);
						this.sharedValues = new (window as any).SharedValues();
						console.log("SharedValues now available for", this.input?.id);
						this.loadFromSharedValues();
					}
				}, 10); // Check every 10ms for faster response
			}

			this.attachEventListeners();
		}

		private loadFromSharedValues(): void {
			if (this.sharedValues && this.sharedKey && this.input) {
				const savedValue = this.sharedValues.get(this.sharedKey);
				console.log(
					"[RangeSlider] Loading from SharedValues:",
					this.input.id,
					"sharedKey:",
					this.sharedKey,
					"saved:",
					savedValue,
					"current:",
					this.input.value
				);

				if (savedValue !== undefined && savedValue !== null) {
					// Always apply the saved value, regardless of current value
					this.input.value = savedValue.toString();
					this.updateDisplay();
					console.log(
						"[RangeSlider] Applied saved value:",
						this.input.id,
						this.sharedKey,
						"=",
						savedValue
					);
				} else {
					// No saved value exists, initialize SharedValues with current hardcoded value
					const currentValue = parseFloat(this.input.value);
					this.sharedValues.set(this.sharedKey, currentValue);
					console.log(
						"[RangeSlider] Initialized SharedValues with default:",
						this.input.id,
						this.sharedKey,
						"=",
						currentValue
					);
				}
			}
		}

		private attachEventListeners(): void {
			if (!this.input) return;

			// Debounced input handler for external events
			let debounceTimer: NodeJS.Timeout;

			this.input.addEventListener("input", () => {
				// Always update display immediately
				this.updateDisplay();

				// Debounced saving and event dispatch
				clearTimeout(debounceTimer);
				debounceTimer = setTimeout(() => {
					if (this.input) {
						const newValue = parseFloat(this.input.value);

						// Update SharedValues immediately if available
						if (this.sharedValues && this.sharedKey) {
							const newValue = parseFloat(this.input.value);
							console.log(
								"[RangeSlider] Saving to SharedValues:",
								this.input.id,
								this.sharedKey,
								"=",
								newValue
							);

							// Force save with explicit update
							this.sharedValues.set(this.sharedKey, newValue);

							// Double-check it was actually saved
							setTimeout(() => {
								const verified = this.sharedValues.get(this.sharedKey);
								if (verified !== newValue) {
									console.error(
										"[RangeSlider] Save verification failed! Expected:",
										newValue,
										"Got:",
										verified
									);
									// Try saving again
									this.sharedValues.set(this.sharedKey, newValue);
								} else {
									console.log(
										"[RangeSlider] Save verified:",
										this.input?.id || "unknown",
										this.sharedKey,
										"=",
										verified
									);
								}
							}, 10);
						} else {
							console.warn("[RangeSlider] Cannot save to SharedValues:", {
								hasSharedValues: !!this.sharedValues,
								sharedKey: this.sharedKey,
								inputId: this.input?.id,
							});
						}

						// Dispatch custom event for other components
						this.container.dispatchEvent(
							new CustomEvent("range-slider-change", {
								detail: {
									id: this.input.id,
									value: newValue,
									sharedKey: this.sharedKey,
								},
								bubbles: true,
							})
						);
					}
				}, 100); // Reduced from 150ms to 100ms
			});

			// Listen for refresh requests from unit changes
			this.container.addEventListener("refresh-from-shared-values", () => {
				this.loadFromSharedValues();
			});

			// Immediate display update for smooth UX
			this.input.addEventListener("input", () => {
				this.updateDisplay();
			});
		}

		private updateDisplay(): void {
			if (this.display && this.input) {
				const value = parseFloat(this.input.value);
				const formatAsHeight = this.input.getAttribute("data-format-as-height") === "true";
				const formatAsPace = this.input.getAttribute("data-format-as-pace") === "true";

				if (formatAsHeight) {
					// Format total inches as feet'inches"
					const feet = Math.floor(value / 12);
					const inches = Math.round((value % 12) * 2) / 2; // Round to nearest 0.5
					this.display.textContent = `${feet}'${inches}"`;
				} else if (formatAsPace) {
					// Format seconds as mm:ss pace format
					const minutes = Math.floor(value / 60);
					const seconds = Math.round(value % 60);
					this.display.textContent = `${minutes}:${seconds.toString().padStart(2, "0")}`;
				} else {
					// Handle decimal precision for normal values
					const step = parseFloat(this.input.step);
					if (step < 1) {
						// For decimal steps, show appropriate precision
						const decimalPlaces = step.toString().split(".")[1]?.length || 1;
						this.display.textContent = value.toFixed(decimalPlaces);
					} else {
						this.display.textContent = Math.round(value).toString();
					}
				}
			}
		}

		// Public method to update value programmatically
		public setValue(newValue: string | number): void {
			if (this.input) {
				this.input.value = newValue.toString();
				this.updateDisplay();
				if (this.sharedValues && this.sharedKey) {
					this.sharedValues.set(this.sharedKey, parseFloat(newValue.toString()));
				}
			}
		}

		// Public method to get current value
		public getValue(): number {
			return this.input ? parseFloat(this.input.value) : 0;
		}
	}

	// Initialize all range sliders on the page
	function initializeRangeSliders() {
		const rangeSliders = document.querySelectorAll('.input-group:has(input[type="range"])');
		rangeSliders.forEach((container) => {
			new RangeSliderComponent(container as HTMLElement);
		});
	}

	// Wait for both DOM and SharedValues to be available
	document.addEventListener("DOMContentLoaded", () => {
		// If SharedValues is already available, initialize immediately
		if (typeof (window as any).SharedValues !== "undefined") {
			initializeRangeSliders();
		} else {
			// Otherwise, wait for SharedValues to load
			const checkForSharedValues = setInterval(() => {
				if (typeof (window as any).SharedValues !== "undefined") {
					clearInterval(checkForSharedValues);
					initializeRangeSliders();
				}
			}, 50); // Check every 50ms

			// Fallback: initialize after 2 seconds even if SharedValues isn't available
			setTimeout(() => {
				clearInterval(checkForSharedValues);
				initializeRangeSliders();
			}, 2000);
		}
	});
</script>
